within MultizoneOfficeComplexAir.BaseClasses;
package BuildingControlEmulator
  "Emulators designed for testing building control"

  package Devices "\"Models for capturing the dynamics at the device level\""
    package AirSide "\"Models for device level components\""
      package Coil "\"Component used for modelling fans and pumps\""

        model HeaCoil
          extends BaseClasses.WatCoil;
          parameter Modelica.Units.SI.Efficiency eps(max=1) = 0.8
            "Heat exchanger effectiveness";
          BaseClasses.DryCoil coi(
            redeclare package MediumAir = MediumAir,
            redeclare package MediumWat = MediumWat,
            mAirFloRat=mAirFloRat,
            mWatFloRat=mWatFloRat,
            PreDroAir(displayUnit="Pa") = PreDroAir,
            PreDroWat(displayUnit="Pa") = 0,
            eps=eps) annotation (Placement(transformation(extent={{-20,-34},{18,8}})));
        equation
          connect(coi.port_a_Wat, port_a_Wat) annotation (Line(
              points={{-20,-0.4},{-40,-0.4},{-40,0},{-60,0},{-60,80},{-100,80}},
              color={0,127,255},
              thickness=1));
          connect(coi.port_b_Wat, val.port_a) annotation (Line(
              points={{18,-0.4},{40,-0.4},{40,30}},
              color={0,127,255},
              thickness=1));
          connect(coi.port_a_Air, port_a_Air) annotation (Line(
              points={{18,-25.6},{30,-25.6},{30,-26},{40,-26},{40,-80},{100,-80}},
              color={0,127,255},
              thickness=1));
          connect(coi.port_b_Air, port_b_Air) annotation (Line(
              points={{-20,-25.6},{-58,-25.6},{-58,-80},{-102,-80}},
              color={0,127,255},
              thickness=1));
          connect(coi.TAirLea, pI.Mea) annotation (Line(
              points={{19.9,-17.2},{58,-17.2},{58,-60},{-52,-60},{-52,14},{-42,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (Icon(graphics={
                Line(
                  points={{-90,80},{-40,80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{40,80},{90,80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,40},{-40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{40,40},{40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,-80},{40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,80},{-40,40}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,40},{40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Text(
                  extent={{-10,50},{44,8}},
                  lineColor={0,0,127},
                  lineThickness=0.5,
                  textString="+"),
                Line(
                  points={{-92,-80},{-40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{40,-80},{90,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,40},{40,40}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{40,80},{40,40}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{32,72},{48,72}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{30,46},{50,46}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{32,72},{50,46}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{30,46},{48,72}},
                  color={0,0,127},
                  thickness=0.5)}));
        end HeaCoil;

        model CooCoil
          extends BaseClasses.WatCoil(val(
                dpValve_nominal=PreDroWat), pI(reverseActing=false, conPID(y_reset=1)));
          parameter Real UA "Rated heat exchange coefficients";
          BaseClasses.WetCoil coi(
            redeclare package MediumAir = MediumAir,
            redeclare package MediumWat = MediumWat,
            mAirFloRat=mAirFloRat,
            mWatFloRat=mWatFloRat,
            PreDroAir(displayUnit="Pa") = PreDroAir,
            PreDroWat(displayUnit="Pa") = 0,
            UA=UA) annotation (Placement(transformation(extent={{-18,-34},{20,8}})));
        equation
          connect(coi.port_a_Wat, port_a_Wat) annotation (Line(
              points={{-18,-0.4},{-40,-0.4},{-40,0},{-60,0},{-60,80},{-100,80}},
              color={0,127,255},
              thickness=1));
          connect(coi.port_b_Wat, val.port_a) annotation (Line(
              points={{20,-0.4},{80,-0.4},{80,36}},
              color={0,127,255},
              thickness=1));
          connect(coi.port_a_Air, port_a_Air) annotation (Line(
              points={{20,-25.6},{30,-25.6},{30,-26},{40,-26},{40,-80},{100,-80}},
              color={0,127,255},
              thickness=1));
          connect(coi.port_b_Air, port_b_Air) annotation (Line(
              points={{-18,-25.6},{-58,-25.6},{-58,-80},{-102,-80}},
              color={0,127,255},
              thickness=1));
          connect(coi.TAirLea, pI.Mea) annotation (Line(
              points={{21.9,-17.2},{58,-17.2},{58,-60},{-52,-60},{-52,14},{-42,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (Icon(graphics={
                Line(
                  points={{-90,80},{-40,80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{40,80},{90,80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,40},{-40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{40,40},{40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,-80},{40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,80},{-40,40}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,40},{40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Text(
                  extent={{-10,50},{44,8}},
                  lineColor={0,0,127},
                  lineThickness=0.5,
                  textString="-"),
                Line(
                  points={{-92,-80},{-40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{40,-80},{90,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,40},{40,40}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{40,80},{40,40}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{32,72},{48,72}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{30,46},{50,46}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{32,72},{50,46}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{30,46},{48,72}},
                  color={0,0,127},
                  thickness=0.5)}));
        end CooCoil;

        model DxCoil
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          replaceable package MediumAir =
              Modelica.Media.Interfaces.PartialMedium                             "Medium for the air";
          parameter Modelica.Units.SI.MassFlowRate mAirFloRat "mass flow rate for air";
          parameter Modelica.Units.SI.Pressure PreDroAir
            "Pressure drop in the air side";
          parameter Modelica.Units.SI.Time minOffTim(min=0) = 0 "Minimum off time";
          parameter Modelica.Units.SI.Time minOnTim(min=0) = 0 "Minimum on time";
          parameter Real dT
              "Temperature control deadband";

          Modelica.Fluid.Interfaces.FluidPort_b port_b_Air(redeclare package
              Medium =                                                                MediumAir)
                                                           "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{-112,-90},{-92,-70}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_a_Air(redeclare package
              Medium =                                                                MediumAir)
                                                           "Fluid connector a (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{90,-90},{110,-70}})));
          BuildingControlEmulator.Devices.AirSide.Coil.Control.OnOffSta
                                                     pI(
            minOffTim=minOffTim,
            minOnTim=minOnTim,
            dT=dT,
            OffTim(start=0),
            OnTim(start=0))                             annotation (Placement(transformation(extent={{-52,10},{-32,30}})));
          Modelica.Blocks.Interfaces.BooleanInput On annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
          Modelica.Blocks.Interfaces.RealInput SetPoi "Connector of setpoint input signal"
            annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
          BuildingControlEmulator.Devices.AirSide.Coil.BaseClasses.DxSinSpeCoil
                                                                        dxSinSpeCoil(
            redeclare package MediumAir = MediumAir,
            mAirFloRat=mAirFloRat,
            PreDroAir=PreDroAir,
            datCoi=datCoi)       annotation (Placement(transformation(extent={{-16,-30},{18,8}})));
          Modelica.Blocks.Interfaces.RealInput Mea "Connector of measurement input signal"
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.RealInput TConIn
            "Outside air dry bulb temperature for an air cooled condenser or wetbulb temperature for an evaporative cooled condenser"
            annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
          replaceable parameter
            Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.DXCoil datCoi
            constrainedby
            Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.DXCoil
            "Performance data"
            annotation (Placement(transformation(extent={{64,62},{76,74}})));
        equation
          connect(pI.SetPoi, SetPoi)
            annotation (Line(
              points={{-54,20},{-54,20},{-70,20},{-70,40},{-120,40}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(pI.OnSigIn, On) annotation (Line(
              points={{-54,26},{-80,26},{-80,80},{-120,80}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(dxSinSpeCoil.on, pI.OnSigOut)
            annotation (Line(
              points={{-17.7,4.2},{-26,4.2},{-26,20},{-31,20}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(dxSinSpeCoil.port_b_Air, port_b_Air)
            annotation (Line(
              points={{-16,-22.4},{-40,-22.4},{-40,-80},{-60,-80},{-60,-80},{-102,-80}},
              color={0,127,255},
              thickness=1));
          connect(dxSinSpeCoil.port_a_Air, port_a_Air)
            annotation (Line(
              points={{18,-22.4},{60,-22.4},{60,-80},{100,-80}},
              color={0,127,255},
              thickness=1));
          connect(dxSinSpeCoil.TConIn, TConIn)
            annotation (Line(
              points={{-17.7,-3.4},{-72,-3.4},{-72,-40},{-120,-40}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(dxSinSpeCoil.TAirLea, pI.Mea) annotation (Line(
              points={{19.7,-14.8},{40,-14.8},{40,-62},{-80,-62},{-80,14},{-54,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Line(
                  points={{-40,40},{-40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{40,40},{40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,-80},{40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,40},{40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Text(
                  extent={{-10,50},{44,8}},
                  lineColor={0,0,127},
                  lineThickness=0.5,
                  textString="-"),
                Line(
                  points={{-92,-80},{-40,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{40,-80},{90,-80}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-40,40},{40,40}},
                  color={0,0,127},
                  thickness=0.5)}),                                      Diagram(coordinateSystem(preserveAspectRatio=false)));
        end DxCoil;

        package BaseClasses
          model WetCoil
            replaceable package MediumAir =
                Modelica.Media.Interfaces.PartialMedium                             "Medium for the air";
            replaceable package MediumWat =
                Modelica.Media.Interfaces.PartialMedium                             "Medium for the water";
            parameter Modelica.Units.SI.MassFlowRate mAirFloRat "mass flow rate for air";
            parameter Modelica.Units.SI.MassFlowRate mWatFloRat
              "mass flow rate for water";
            parameter Modelica.Units.SI.Pressure PreDroAir
              "Pressure drop in the air side";
            parameter Modelica.Units.SI.Pressure PreDroWat
              "Pressure drop in the water side";
            parameter Real UA "Rated heat exchange coefficients";

            Buildings.Fluid.HeatExchangers.WetCoilCounterFlow cooCoi(redeclare
                package Medium1 =
                          MediumWat, redeclare package Medium2 = MediumAir,
              m1_flow_nominal=mWatFloRat,
              m2_flow_nominal=mAirFloRat,
              dp1_nominal=PreDroWat,
              dp2_nominal=PreDroAir,
              UA_nominal=UA,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
              annotation (Placement(transformation(extent={{-14,-10},{6,10}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temEntWat(redeclare
                package Medium =
                  MediumWat)
              annotation (Placement(transformation(extent={{-74,-4},{-54,16}})));
             Modelica.Fluid.Sensors.TemperatureTwoPort temLeaWat(redeclare
                package Medium =
                  MediumWat)
              annotation (Placement(transformation(extent={{62,-4},{82,16}})));
            Modelica.Fluid.Interfaces.FluidPort_a port_a_Wat(redeclare package
                Medium =
                  MediumWat)
              "Fluid connector a (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_b_Wat(redeclare package
                Medium =
                  MediumWat)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{90,50},{110,70}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temEntAir(redeclare
                package Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{50,-70},{30,-50}})));
            Modelica.Fluid.Sensors.MassFlowRate masFloWat(redeclare package
                Medium =
                  MediumWat)
              annotation (Placement(transformation(extent={{32,-4},{52,16}})));
            Modelica.Fluid.Sensors.Pressure preWatEnt(redeclare package Medium =
                  MediumWat)
              annotation (Placement(transformation(extent={{-20,6},{-40,26}})));
            Modelica.Fluid.Sensors.Pressure preWatLea(redeclare package Medium =
                  MediumWat)
              annotation (Placement(transformation(extent={{32,6},{12,26}})));
            Modelica.Fluid.Interfaces.FluidPort_a port_a_Air(redeclare package
                Medium =
                  MediumAir)
              "Fluid connector a (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{90,-70},{110,-50}})));
            Modelica.Fluid.Sensors.MassFlowRate masFloAir(redeclare package
                Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{-40,-70},{-60,-50}})));
            replaceable Buildings.Fluid.Sensors.TemperatureTwoPort temLeaAir(redeclare
                package Medium =
                  MediumAir, m_flow_nominal=mAirFloRat)
              annotation (Placement(transformation(extent={{-68,-70},{-88,-50}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_b_Air(redeclare package
                Medium =
                  MediumAir)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-110,-70},{-90,-50}})));
            Modelica.Fluid.Sensors.Pressure preAirLea(redeclare package Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{-30,-46},{-50,-26}})));
            Modelica.Fluid.Sensors.Pressure preAirEnt(redeclare package Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{50,-44},{30,-24}})));
            Modelica.Blocks.Interfaces.RealOutput TAirLea
              "Temperature of the passing fluid"
              annotation (Placement(transformation(extent={{100,-30},{120,-10}})));
          equation
            connect(cooCoi.port_a1, temEntWat.port_b) annotation (Line(
                points={{-14,6},{-40,6},{-54,6}},
                color={0,127,255},
                thickness=1));
            connect(temEntWat.port_a, port_a_Wat) annotation (Line(
                points={{-74,6},{-88,6},{-88,60},{-100,60}},
                color={0,127,255},
                thickness=1));
            connect(temLeaWat.port_b, port_b_Wat) annotation (Line(
                points={{82,6},{90,6},{90,60},{100,60}},
                color={0,127,255},
                thickness=1));
            connect(cooCoi.port_b1, masFloWat.port_a) annotation (Line(
                points={{6,6},{32,6}},
                color={0,127,255},
                thickness=1));
            connect(masFloWat.port_b, temLeaWat.port_a) annotation (Line(
                points={{52,6},{52,6},{62,6}},
                color={0,127,255},
                thickness=1));
            connect(preWatEnt.port, temEntWat.port_b) annotation (Line(
                points={{-30,6},{-30,6},{-40,6},{-54,6}},
                color={0,127,255},
                thickness=1));
            connect(preWatLea.port, masFloWat.port_a) annotation (Line(
                points={{22,6},{22,6},{32,6}},
                color={0,127,255},
                thickness=1));
            connect(temEntAir.port_b, cooCoi.port_a2) annotation (Line(
                points={{30,-60},{20,-60},{20,-6},{6,-6}},
                color={0,127,255},
                thickness=1));
            connect(temEntAir.port_a, port_a_Air) annotation (Line(
                points={{50,-60},{100,-60}},
                color={0,127,255},
                thickness=1));
            connect(masFloAir.port_a, cooCoi.port_b2) annotation (Line(
                points={{-40,-60},{-20,-60},{-20,-6},{-14,-6}},
                color={0,127,255},
                thickness=1));
            connect(temLeaAir.port_a, masFloAir.port_b) annotation (Line(
                points={{-68,-60},{-60,-60}},
                color={0,127,255},
                thickness=1));
            connect(temLeaAir.port_b, port_b_Air) annotation (Line(
                points={{-88,-60},{-100,-60}},
                color={0,127,255},
                thickness=1));
            connect(preAirLea.port, cooCoi.port_b2) annotation (Line(
                points={{-40,-46},{-20,-46},{-20,-6},{-14,-6}},
                color={0,127,255},
                thickness=1));
            connect(preAirEnt.port, cooCoi.port_a2) annotation (Line(
                points={{40,-44},{40,-46},{20,-46},{20,-6},{6,-6}},
                color={0,127,255},
                thickness=1));
            connect(temLeaAir.T, TAirLea) annotation (Line(
                points={{-78,-49},{-78,-20},{110,-20}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(cooCoi.port_a1, preWatEnt.port)
              annotation (Line(points={{-14,6},{-30,6}}, color={0,127,255}));
            connect(cooCoi.port_b1, preWatLea.port)
              annotation (Line(points={{6,6},{22,6}}, color={0,127,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Line(
                    points={{-90,60},{-40,60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-76,60}},
                    color={0,0,127},
                    pattern=LinePattern.Dash),
                  Line(
                    points={{40,60},{90,60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-40,60},{-40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{40,60},{40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-40,-60},{40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-40,60},{40,60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-40,60},{40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Text(
                    extent={{-10,30},{44,-12}},
                    lineColor={0,0,127},
                    lineThickness=0.5,
                    textString="-"),
                  Line(
                    points={{-90,-60},{-40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{40,-60},{90,-60}},
                    color={0,0,127},
                    thickness=0.5)}),                                      Diagram(
                  coordinateSystem(preserveAspectRatio=false)));
          end WetCoil;

          model DryCoil
            parameter Modelica.Units.SI.Efficiency eps(max=1) = 0.8
              "Heat exchanger effectiveness";
            replaceable package MediumAir =
                Modelica.Media.Interfaces.PartialMedium                             "Medium for the air";
            replaceable package MediumWat =
                Modelica.Media.Interfaces.PartialMedium                             "Medium for the water";
            parameter Modelica.Units.SI.MassFlowRate mAirFloRat "mass flow rate for air";
            parameter Modelica.Units.SI.MassFlowRate mWatFloRat
              "mass flow rate for water";
            parameter Modelica.Units.SI.Pressure PreDroAir
              "Pressure drop in the air side";
            parameter Modelica.Units.SI.Pressure PreDroWat
              "Pressure drop in the water side";

            Buildings.Fluid.HeatExchangers.ConstantEffectiveness coi(
              redeclare package Medium1 = MediumWat,
              redeclare package Medium2 = MediumAir,
              m1_flow_nominal=mWatFloRat,
              m2_flow_nominal=mAirFloRat,
              dp1_nominal=PreDroWat,
              dp2_nominal=PreDroAir,
              eps=eps)
              annotation (Placement(transformation(extent={{-14,-10},{6,10}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temEntWat(redeclare
                package Medium =
                  MediumWat)
              annotation (Placement(transformation(extent={{-74,-4},{-54,16}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temLeaWat(redeclare
                package Medium =
                  MediumWat)
              annotation (Placement(transformation(extent={{62,-4},{82,16}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temEntAir(redeclare
                package Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{50,-70},{30,-50}})));
            Modelica.Fluid.Sensors.MassFlowRate masFloWat(redeclare package
                Medium =
                  MediumWat)
              annotation (Placement(transformation(extent={{32,-4},{52,16}})));
            Modelica.Fluid.Sensors.Pressure preWatEnt(redeclare package Medium =
                  MediumWat)
              annotation (Placement(transformation(extent={{-20,6},{-40,26}})));
            Modelica.Fluid.Sensors.Pressure preWatLea(redeclare package Medium =
                  MediumWat)
              annotation (Placement(transformation(extent={{32,6},{12,26}})));
            Modelica.Fluid.Sensors.MassFlowRate masFloAir(redeclare package
                Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{-40,-70},{-60,-50}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temLeaAir(redeclare
                package Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{-68,-70},{-88,-50}})));
            Modelica.Fluid.Sensors.Pressure preAirLea(redeclare package Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{-30,-46},{-50,-26}})));
            Modelica.Fluid.Sensors.Pressure preAirEnt(redeclare package Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{50,-44},{30,-24}})));
            Modelica.Fluid.Interfaces.FluidPort_a port_a_Wat(redeclare package
                Medium =
                  MediumWat)
              "Fluid connector a (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_b_Wat(redeclare package
                Medium =
                  MediumWat)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{90,50},{110,70}})));
            Modelica.Fluid.Interfaces.FluidPort_a port_a_Air(redeclare package
                Medium =
                  MediumAir)
              "Fluid connector a (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{90,-70},{110,-50}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_b_Air(redeclare package
                Medium =
                  MediumAir)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-110,-70},{-90,-50}})));
            Modelica.Blocks.Interfaces.RealOutput TAirLea
              "Temperature of the passing fluid"
              annotation (Placement(transformation(extent={{100,-30},{120,-10}})));
          equation
            connect(coi.port_a1, temEntWat.port_b) annotation (Line(
                points={{-14,6},{-40,6},{-54,6}},
                color={0,127,255},
                thickness=1));
            connect(temEntWat.port_a,port_a_Wat)  annotation (Line(
                points={{-74,6},{-88,6},{-88,60},{-100,60}},
                color={0,127,255},
                thickness=1));
            connect(temLeaWat.port_b,port_b_Wat)  annotation (Line(
                points={{82,6},{90,6},{90,60},{100,60}},
                color={0,127,255},
                thickness=1));
            connect(coi.port_b1, masFloWat.port_a) annotation (Line(
                points={{6,6},{32,6}},
                color={0,127,255},
                thickness=1));
            connect(masFloWat.port_b,temLeaWat. port_a) annotation (Line(
                points={{52,6},{52,6},{62,6}},
                color={0,127,255},
                thickness=1));
            connect(preWatEnt.port,temEntWat. port_b) annotation (Line(
                points={{-30,6},{-30,6},{-40,6},{-54,6}},
                color={0,127,255},
                thickness=1));
            connect(preWatLea.port,masFloWat. port_a) annotation (Line(
                points={{22,6},{22,6},{32,6}},
                color={0,127,255},
                thickness=1));
            connect(temEntAir.port_b, coi.port_a2) annotation (Line(
                points={{30,-60},{20,-60},{20,-6},{6,-6}},
                color={0,140,72},
                thickness=0.5));
            connect(temEntAir.port_a,port_a_Air)  annotation (Line(
                points={{50,-60},{100,-60}},
                color={0,140,72},
                thickness=0.5));
            connect(masFloAir.port_a, coi.port_b2) annotation (Line(
                points={{-40,-60},{-20,-60},{-20,-6},{-14,-6}},
                color={0,140,72},
                thickness=0.5));
            connect(temLeaAir.port_a, masFloAir.port_b) annotation (Line(
                points={{-68,-60},{-60,-60}},
                color={0,140,72},
                thickness=0.5));
            connect(temLeaAir.port_b,port_b_Air)  annotation (Line(
                points={{-88,-60},{-100,-60}},
                color={0,140,72},
                thickness=0.5));
            connect(preAirLea.port, coi.port_b2) annotation (Line(
                points={{-40,-46},{-20,-46},{-20,-6},{-14,-6}},
                color={0,140,72},
                thickness=0.5));
            connect(preAirEnt.port, coi.port_a2) annotation (Line(
                points={{40,-44},{40,-46},{20,-46},{20,-6},{6,-6}},
                color={0,140,72},
                thickness=0.5));
            connect(temLeaAir.T,TAirLea)  annotation (Line(
                points={{-78,-49},{-78,-20},{110,-20}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(coi.port_a1, preWatEnt.port)
              annotation (Line(points={{-14,6},{-30,6}}, color={0,127,255}));
            connect(coi.port_b1, preWatLea.port)
              annotation (Line(points={{6,6},{22,6}}, color={0,127,255}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Line(
                    points={{-90,60},{-40,60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{40,60},{90,60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-40,60},{-40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{40,60},{40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-40,-60},{40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-40,60},{40,60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-40,60},{40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Text(
                    extent={{-46,-16},{8,-58}},
                    lineColor={0,0,127},
                    lineThickness=0.5,
                    textString="-"),
                  Line(
                    points={{-90,-60},{-40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{40,-60},{90,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Text(
                    extent={{-10,50},{44,8}},
                    lineColor={0,0,127},
                    lineThickness=0.5,
                    textString="+")}), Diagram(coordinateSystem(preserveAspectRatio=false)));
          end DryCoil;

          model DxSinSpeCoil
            replaceable package MediumAir =
                Modelica.Media.Interfaces.PartialMedium                             "Medium for the air";
            parameter Modelica.Units.SI.MassFlowRate mAirFloRat "mass flow rate for air";
            parameter Modelica.Units.SI.Pressure PreDroAir
              "Pressure drop in the air side";

            Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.SingleSpeed
                                                             coi(redeclare
                package Medium =
                  MediumAir,
              datCoi=datCoi,
              dp_nominal=PreDroAir,
              T_start=datCoi.sta[1].nomVal.TEvaIn_nominal,
              show_T=true,
              from_dp=true)
              annotation (Placement(transformation(extent={{10,-8},{-10,12}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temEntAir(redeclare
                package Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{50,-70},{30,-50}})));
            Modelica.Fluid.Sensors.MassFlowRate masFloAir(redeclare package
                Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{-40,-70},{-60,-50}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temLeaAir(redeclare
                package Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{-68,-70},{-88,-50}})));
            Modelica.Fluid.Sensors.Pressure preAirLea(redeclare package Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{-30,-46},{-50,-26}})));
            Modelica.Fluid.Sensors.Pressure preAirEnt(redeclare package Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{50,-44},{30,-24}})));
            Modelica.Fluid.Interfaces.FluidPort_a port_a_Air(redeclare package
                Medium =
                  MediumAir)
              "Fluid connector a (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{90,-70},{110,-50}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_b_Air(redeclare package
                Medium =
                  MediumAir)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-110,-70},{-90,-50}})));
            Modelica.Blocks.Interfaces.RealOutput TAirLea
              "Temperature of the passing fluid"
              annotation (Placement(transformation(extent={{100,-30},{120,-10}})));
            Modelica.Blocks.Interfaces.RealInput TConIn
              "Outside air dry bulb temperature for an air cooled condenser or wetbulb temperature for an evaporative cooled condenser"
              annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
            Modelica.Blocks.Interfaces.BooleanInput on
              "Set to true to enable compressor, or false to disable compressor"
              annotation (Placement(transformation(extent={{-120,70},{-100,90}})));
            replaceable parameter
              Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.DXCoil datCoi
              constrainedby
              Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.DXCoil
              "Performance data"
              annotation (Placement(transformation(extent={{64,82},{76,94}})));
          equation
            connect(temEntAir.port_a,port_a_Air)  annotation (Line(
                points={{50,-60},{100,-60}},
                color={0,127,255},
                thickness=1));
            connect(temLeaAir.port_a, masFloAir.port_b) annotation (Line(
                points={{-68,-60},{-60,-60}},
                color={0,127,255},
                thickness=1));
            connect(temLeaAir.port_b,port_b_Air)  annotation (Line(
                points={{-88,-60},{-100,-60}},
                color={0,127,255},
                thickness=1));
            connect(temLeaAir.T,TAirLea)  annotation (Line(
                points={{-78,-49},{-78,-20},{110,-20}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(coi.TConIn, TConIn) annotation (Line(
                points={{11,5},{54,5},{54,38},{-28,38},{-28,40},{-110,40}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(coi.on, on) annotation (Line(
                points={{11,10},{40,10},{40,80},{-110,80}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(temEntAir.port_b, coi.port_a) annotation (Line(
                points={{30,-60},{26,-60},{20,-60},{20,2},{10,2}},
                color={0,127,255},
                thickness=1));
            connect(preAirEnt.port, coi.port_a) annotation (Line(
                points={{40,-44},{20,-44},{20,2},{10,2}},
                color={0,127,255},
                thickness=1));
            connect(coi.port_b, masFloAir.port_a) annotation (Line(
                points={{-10,2},{-16,2},{-20,2},{-20,-60},{-40,-60}},
                color={0,127,255},
                thickness=1));
            connect(preAirLea.port, masFloAir.port_a) annotation (Line(
                points={{-40,-46},{-20,-46},{-20,-60},{-40,-60}},
                color={0,127,255},
                thickness=1));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Line(
                    points={{-40,60},{-40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{40,60},{40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-40,-60},{40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-40,60},{40,60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-40,60},{40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Text(
                    extent={{-46,-16},{8,-58}},
                    lineColor={0,0,127},
                    lineThickness=0.5,
                    textString="-"),
                  Line(
                    points={{-90,-60},{-40,-60}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{40,-60},{90,-60}},
                    color={0,0,127},
                    thickness=0.5)}),  Diagram(coordinateSystem(preserveAspectRatio=false)));
          end DxSinSpeCoil;

          partial model WatCoil
            import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
            replaceable package MediumAir =
                Modelica.Media.Interfaces.PartialMedium                             "Medium for the air";
            replaceable package MediumWat =
                Modelica.Media.Interfaces.PartialMedium                             "Medium for the water";
            parameter Modelica.Units.SI.MassFlowRate mAirFloRat "mass flow rate for air";
            parameter Modelica.Units.SI.MassFlowRate mWatFloRat
              "mass flow rate for water";
            parameter Modelica.Units.SI.Pressure PreDroAir
              "Pressure drop in the air side";
            parameter Modelica.Units.SI.Pressure PreDroWat
              "Pressure drop in the water side";
            parameter Real k(min=0, unit="1") = 1 "Gain of controller";
            parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
              "Time constant of Integrator block";
            Modelica.Fluid.Interfaces.FluidPort_b port_b_Air(redeclare package
                Medium =                                                                MediumAir)
                                                             "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-112,-90},{-92,-70}})));
            Modelica.Fluid.Interfaces.FluidPort_a port_a_Air(redeclare package
                Medium =                                                                MediumAir)
                                                             "Fluid connector a (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{90,-90},{110,-70}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_b_Wat(redeclare package
                Medium =                                                                MediumWat)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{90,70},{110,90}})));
            Modelica.Fluid.Interfaces.FluidPort_a port_a_Wat(redeclare package
                Medium =                                                                MediumWat)
              "Fluid connector a (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-110,70},{-90,90}})));
            replaceable Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
              redeclare package Medium = MediumWat,
              m_flow_nominal=mWatFloRat,
              dpValve_nominal=PreDroWat)
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={80,46})));
            BuildingControlEmulator.Devices.Control.conPI pI(k=k, Ti=Ti)
              annotation (Placement(transformation(extent={{-40,10},{-20,30}})));
            Modelica.Blocks.Interfaces.BooleanInput On annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
            Modelica.Blocks.Interfaces.RealInput SetPoi "Connector of setpoint input signal"
              annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
            Buildings.Controls.OBC.CDL.Continuous.LimitSlewRate ramLim(raisingSlewRate=1/
                  120) "Ramp limiter for water coil control signal"
              annotation (Placement(transformation(extent={{30,36},{50,56}})));
            Buildings.Utilities.IO.SignalExchange.Overwrite yCoo(description=
                  "Cooling coil valve control signal for AHU", u(
                unit="1",
                min=0,
                max=1)) "Cooling coil control signal"
              annotation (Placement(transformation(extent={{-4,36},{16,56}})));
          equation
            connect(val.port_b, port_b_Wat) annotation (Line(
                points={{80,56},{80,80},{100,80}},
                color={0,127,255},
                thickness=1));
            connect(pI.On, On)
              annotation (Line(
                points={{-42,26},{-42,26},{-52,26},{-80,26},{-80,40},{-120,40}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(pI.SetPoi, SetPoi)
              annotation (Line(
                points={{-42,20},{-42,20},{-80,20},{-80,-20},{-120,-20}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(ramLim.y, val.y) annotation (Line(points={{52,46},{68,46}},
                          color={0,0,127}));
            connect(yCoo.y, ramLim.u)
              annotation (Line(points={{17,46},{28,46}}, color={0,0,127}));
            connect(yCoo.u, pI.y) annotation (Line(points={{-6,46},{-14,46},{
                    -14,20},{-19,20}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
          end WatCoil;

          package Examples
              extends Modelica.Icons.ExamplesPackage;
            model WetCoil
              import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
              extends Modelica.Icons.Example;
              package Medium1 = Buildings.Media.Water "Medium model";
              package Medium2 = Buildings.Media.Air "Medium model";
              BuildingControlEmulator.Devices.AirSide.Coil.BaseClasses.WetCoil
                                                                       wetCoil(
                redeclare package MediumAir = Medium2,
                redeclare package MediumWat = Medium1,
                mWatFloRat=1,
                PreDroAir(displayUnit="Pa") = 1000,
                PreDroWat(displayUnit="Pa") = 1000,
                mAirFloRat=1,
                UA=4.2*1000)
                annotation (Placement(transformation(extent={{-20,14},{22,-28}})));
              Buildings.Fluid.Sources.Boundary_pT souWat(
                nPorts=1,
                redeclare package Medium = Medium1,
                p(displayUnit="Pa") = 100000,
                T=278.15)
                annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
              Buildings.Fluid.Sources.Boundary_pT sinWat(
                nPorts=1,
                redeclare package Medium = Medium1,
                p(displayUnit="Pa") = 100000 - 1000,
                T=293.15) annotation (Placement(transformation(extent={{90,-70},{70,-50}})));
              Buildings.Fluid.Sources.Boundary_pT sinAir(
                nPorts=1,
                p(displayUnit="Pa"),
                redeclare package Medium = Medium2,
                T=293.15) annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
              Modelica.Fluid.Sensors.TemperatureTwoPort temLeaWat(redeclare
                  package Medium =
                    Medium1)
                annotation (Placement(transformation(extent={{40,-70},{60,-50}})));
              Buildings.Fluid.Sources.Boundary_pT souAir(
                nPorts=1,
                p(displayUnit="Pa") = 101325 + 1000,
                redeclare package Medium = Medium2,
                X={0.02,1 - 0.02},
                use_T_in=true,
                use_X_in=true)
                annotation (Placement(transformation(extent={{82,32},{62,52}})));
              Buildings.Utilities.Psychrometrics.X_pTphi x_pTphi(use_p_in=false)
                annotation (Placement(transformation(extent={{18,70},{38,90}})));
              Modelica.Blocks.Sources.Constant temSou(k=273.15 + 20)
                "Temperature boundary condition"
                annotation (Placement(transformation(extent={{-60,70},{-40,90}})));
              Modelica.Blocks.Sources.Constant relHum(k=0.8) "Relative humidity"
                annotation (Placement(transformation(extent={{-30,20},{-10,40}})));
            equation
              connect(souWat.ports[1], wetCoil.port_a_Wat) annotation (Line(
                  points={{-60,-60},{-40,-60},{-40,-19.6},{-20,-19.6}},
                  color={0,127,255},
                  thickness=1));
              connect(wetCoil.port_b_Air, sinAir.ports[1]) annotation (Line(points={{-20,
                      5.6},{-40,5.6},{-40,48},{-60,48}}, color={0,127,255}));
              connect(sinWat.ports[1], temLeaWat.port_b) annotation (Line(
                  points={{70,-60},{60,-60}},
                  color={0,127,255},
                  thickness=1));
              connect(temLeaWat.port_a, wetCoil.port_b_Wat) annotation (Line(
                  points={{40,-60},{30,-60},{30,-20},{26,-20},{26,-19.6},{22,-19.6}},
                  color={0,127,255},
                  thickness=1));
              connect(souAir.ports[1], wetCoil.port_a_Air)
                annotation (Line(points={{62,42},{22,42},{22,5.6}}, color={0,127,255}));
              connect(relHum.y,x_pTphi. phi) annotation (Line(
                  points={{-9,30},{-6,30},{-6,74},{16,74}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(temSou.y,x_pTphi. T) annotation (Line(
                  points={{-39,80},{16,80}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(souAir.T_in,x_pTphi. T) annotation (Line(
                  points={{84,46},{90,46},{90,58},{-28,58},{-28,80},{16,80}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(x_pTphi.X, souAir.X_in) annotation (Line(
                  points={{39,80},{68,80},{98,80},{98,38},{84,38}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
                experiment(StopTime=1000));
            end WetCoil;

            model DryCoil
              import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
              extends Modelica.Icons.Example;
              package Medium1 = Buildings.Media.Water "Medium model";
              package Medium2 = Buildings.Media.Air "Medium model";
              BuildingControlEmulator.Devices.AirSide.Coil.BaseClasses.DryCoil
                                                                       dryCoil(
                redeclare package MediumAir = Medium2,
                redeclare package MediumWat = Medium1,
                mWatFloRat=1,
                PreDroAir(displayUnit="Pa") = 1000,
                PreDroWat(displayUnit="Pa") = 1000,
                mAirFloRat=1,
                eps=0.9)
                annotation (Placement(transformation(extent={{-20,14},{22,-28}})));
              Buildings.Fluid.Sources.Boundary_pT souWat(
                nPorts=1,
                redeclare package Medium = Medium1,
                p(displayUnit="Pa") = 100000,
                T=278.15)
                annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
              Buildings.Fluid.Sources.Boundary_pT sinWat(
                nPorts=1,
                redeclare package Medium = Medium1,
                p(displayUnit="Pa") = 100000 - 1000,
                T=293.15) annotation (Placement(transformation(extent={{90,-70},{70,-50}})));
              Buildings.Fluid.Sources.Boundary_pT souAir(
                nPorts=1,
                p(displayUnit="Pa") = 100000,
                redeclare package Medium = Medium2,
                X={0.02,1 - 0.02},
                use_T_in=true,
                use_X_in=true)
                annotation (Placement(transformation(extent={{82,32},{62,52}})));
              Buildings.Fluid.Sources.Boundary_pT sinAir(
                nPorts=1,
                p(displayUnit="Pa") = 100000 - 1000,
                redeclare package Medium = Medium2,
                T=293.15) annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
              Modelica.Fluid.Sensors.TemperatureTwoPort temLeaWat(redeclare
                  package Medium =
                    Medium1)
                annotation (Placement(transformation(extent={{38,-70},{58,-50}})));
              Modelica.Blocks.Sources.Constant relHum(k=0.8) "Relative humidity"
                annotation (Placement(transformation(extent={{-30,20},{-10,40}})));
              Buildings.Utilities.Psychrometrics.X_pTphi x_pTphi(use_p_in=false)
                annotation (Placement(transformation(extent={{18,70},{38,90}})));
              Modelica.Blocks.Sources.Constant temSou(k=273.15 + 20)
                "Temperature boundary condition"
                annotation (Placement(transformation(extent={{-60,70},{-40,90}})));
            equation
              connect(souWat.ports[1], dryCoil.port_a_Wat) annotation (Line(
                  points={{-60,-60},{-40,-60},{-40,-19.6},{-20,-19.6}},
                  color={0,127,255},
                  thickness=1));
              connect(souAir.ports[1], dryCoil.port_a_Air) annotation (Line(points={{62,42},
                      {30,42},{30,5.6},{22,5.6}}, color={0,127,255}));
              connect(dryCoil.port_b_Air, sinAir.ports[1]) annotation (Line(points={{-20,5.6},
                      {-40,5.6},{-40,48},{-60,48}}, color={0,127,255}));
              connect(sinWat.ports[1], temLeaWat.port_b) annotation (Line(
                  points={{70,-60},{58,-60}},
                  color={0,127,255},
                  thickness=1));
              connect(temLeaWat.port_a,dryCoil. port_b_Wat) annotation (Line(
                  points={{38,-60},{30,-60},{30,-20},{26,-20},{26,-19.6},{22,-19.6}},
                  color={0,127,255},
                  thickness=1));
              connect(relHum.y,x_pTphi. phi) annotation (Line(
                  points={{-9,30},{-6,30},{-6,74},{16,74}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(temSou.y, x_pTphi.T) annotation (Line(
                  points={{-39,80},{16,80}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(souAir.T_in, x_pTphi.T) annotation (Line(
                  points={{84,46},{90,46},{90,58},{-28,58},{-28,80},{16,80}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(x_pTphi.X, souAir.X_in) annotation (Line(points={{39,80},{68,80},{98,
                      80},{98,38},{84,38}}, color={0,0,127}));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
                experiment(StopTime=1000));
            end DryCoil;

            model DxSinSpeCoil
              import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
              extends Modelica.Icons.Example;

              package Medium2 = Buildings.Media.Air "Medium model";
              BuildingControlEmulator.Devices.AirSide.Coil.BaseClasses.DxSinSpeCoil
                                                                            DxCoil(
                redeclare package MediumAir = Medium2,
                datCoi=datCoi,
                mAirFloRat=0.1,
                PreDroAir(displayUnit="Pa") = 1000)
                annotation (Placement(transformation(extent={{-20,14},{22,-28}})));
              Buildings.Fluid.Sources.Boundary_pT souAir(
                redeclare package Medium = Medium2,
                p(displayUnit="Pa") = 100000,
                X={0.02,1 - 0.02},
                use_T_in=true,
                use_X_in=true,
                use_p_in=true,
                nPorts=1)
                annotation (Placement(transformation(extent={{82,32},{62,52}})));
              Buildings.Fluid.Sources.Boundary_pT   sinAir(
                redeclare package Medium = Medium2,
                nPorts=1,
                p(displayUnit="Pa") = 100000 - 1000,
                T=303.15) annotation (Placement(transformation(extent={{-80,38},{-60,58}})));

              Modelica.Blocks.Sources.Constant relHum(k=0.8) "Relative humidity"
                annotation (Placement(transformation(extent={{-30,20},{-10,40}})));
              Buildings.Utilities.Psychrometrics.X_pTphi x_pTphi(use_p_in=false)
                annotation (Placement(transformation(extent={{18,70},{38,90}})));
              Modelica.Blocks.Sources.Constant temSou(k=273.15 + 30)
                "Temperature boundary condition"
                annotation (Placement(transformation(extent={{-60,70},{-40,90}})));
              Modelica.Blocks.Sources.Constant Tcon(k=273.15 + 23.89) "Relative humidity"
                annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
              Modelica.Blocks.Sources.BooleanStep booleanStep(startTime=500, startValue=false)
                annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
              parameter
                Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.SingleSpeed.Carrier_Comfort_50ES060
                datCoi(sta={
                    Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.BaseClasses.Stage(
                    spe=1800,
                    nomVal=
                      Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.BaseClasses.NominalValues(
                      Q_flow_nominal=-17500.95,
                      COP_nominal=3.9,
                      SHR_nominal=0.78,
                      m_flow_nominal=1.2*0.944),
                    perCur=
                      Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.BaseClasses.PerformanceCurve(
                      capFunT={1.6380187,-0.0747347,0.0029747,0.0015201,-0.0000519,-0.0004509},
                      capFunFF={0.8185792,0.2831771,-0.1017563},
                      EIRFunT={-0.2209648,0.1033303,-0.0030061,-0.0070657,0.0006322,-0.0002496},
                      EIRFunFF={1.0380778,-0.2013868,0.1633090},
                      TConInMin=273.15 + 23.89,
                      TConInMax=273.15 + 51.67,
                      TEvaInMin=273.15 + 13.89,
                      TEvaInMax=273.15 + 22.22,
                      ffMin=0.875,
                      ffMax=1.125))})
                annotation (Placement(transformation(extent={{60,-36},{80,-16}})));
              Modelica.Blocks.Sources.Constant Pressure(k=100000) "Relative humidity"
                annotation (Placement(transformation(extent={{50,-6},{70,14}})));
            equation
              connect(DxCoil.port_b_Air, sinAir.ports[1]) annotation (Line(points={{-20,5.6},
                      {-40,5.6},{-40,48},{-60,48}}, color={0,127,255}));
              connect(relHum.y,x_pTphi. phi) annotation (Line(
                  points={{-9,30},{-6,30},{-6,74},{16,74}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(temSou.y, x_pTphi.T) annotation (Line(
                  points={{-39,80},{16,80}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(souAir.T_in, x_pTphi.T) annotation (Line(
                  points={{84,46},{90,46},{90,58},{-28,58},{-28,80},{16,80}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(x_pTphi.X, souAir.X_in) annotation (Line(points={{39,80},{68,80},{98,80},
                      {98,38},{84,38}}, color={0,0,127}));
              connect(Tcon.y, DxCoil.TConIn) annotation (Line(
                  points={{-79,-10},{-79,-10},{-40,-10},{-40,-15.4},{-22.1,-15.4}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(booleanStep.y, DxCoil.on) annotation (Line(
                  points={{-79,-50},{-40,-50},{-40,-23.8},{-22.1,-23.8}},
                  color={255,0,255},
                  pattern=LinePattern.Dash));
              connect(Pressure.y, souAir.p_in)
                annotation (Line(points={{71,4},{94,4},{94,50},{84,50}}, color={0,0,127}));
              connect(DxCoil.port_a_Air, souAir.ports[1]) annotation (Line(points={{22,5.6},
                      {32,5.6},{32,6},{40,6},{40,42},{62,42}}, color={0,127,255}));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
                experiment(StopTime=1000));
            end DxSinSpeCoil;
          end Examples;
        end BaseClasses;

        package Control
          model OnOffSta
            parameter Modelica.Units.SI.Time minOffTim(min=0) = 0 "Minimum off time";
            parameter Modelica.Units.SI.Time minOnTim(min=0) = 0 "Minimum on time";
            parameter Real dT
                "Temperature control deadband";
            Modelica.Units.SI.Time OffTim(start=0);
            Modelica.Units.SI.Time OnTim(start=0);

            Modelica.StateGraph.StepWithSignal On(nOut=2, nIn=1)
                                                  annotation (Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=-90,
                  origin={34,-44})));
            Modelica.StateGraph.InitialStepWithSignal Off(nIn=2, nOut=1)
                                                          annotation (Placement(
                  transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=-90,
                  origin={34,42})));
            Modelica.StateGraph.TransitionWithSignal transitionWithSignal(enableTimer=false)
              annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=-90,
                  origin={0,-40})));
            Modelica.StateGraph.TransitionWithSignal transitionWithSignal1 annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={34,0})));
            Modelica.StateGraph.TransitionWithSignal transitionWithSignal2(enableTimer=false)
              annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=-90,
                  origin={-40,60})));
            Modelica.Blocks.Interfaces.BooleanOutput OnSigOut
              annotation (Placement(transformation(extent={{100,-10},{120,10}})));
            Modelica.Blocks.Interfaces.BooleanInput OnSigIn
              annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
            Modelica.Blocks.Logical.Not not1
              annotation (Placement(transformation(extent={{-80,50},{-60,70}})));
            Modelica.Blocks.Interfaces.RealInput Mea "Connector of measurement input signal"
              annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
            Modelica.Blocks.Interfaces.RealInput SetPoi
              "Connector of setpoint input signal"
              annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
            Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=(Mea > SetPoi
                   + dT) and (time - OffTim) > minOffTim and OnSigIn)
              annotation (Placement(transformation(extent={{-78,10},{-58,30}})));
            Modelica.Blocks.Sources.BooleanExpression booleanExpression1(y=(Mea < SetPoi -
                  dT) and (time - OnTim) > minOnTim)
              annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
            inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
              annotation (Placement(transformation(extent={{-100,80},{-80,100}})));

          equation
              when OnSigOut==false then
                  OffTim = time;
              end when;
              when OnSigOut==true then
                  OnTim = time;
              end when;
            connect(transitionWithSignal.inPort,On. outPort[1]) annotation (Line(
                points={{-6.66134e-016,-44},{-6.66134e-016,-80},{33.75,-80},{33.75,-54.5}},
                color={0,0,0},
                pattern=LinePattern.Dash));
            connect(transitionWithSignal.outPort,Off. inPort[1]) annotation (Line(
                points={{4.44089e-016,-38.5},{0,-38.5},{0,60},{33.5,60},{33.5,53}},
                color={0,0,0},
                pattern=LinePattern.Dash));
            connect(Off.outPort[1],transitionWithSignal1. inPort) annotation (Line(
                points={{34,31.5},{34,20},{34,4}},
                color={0,0,0},
                pattern=LinePattern.Dash));
            connect(transitionWithSignal1.outPort,On. inPort[1]) annotation (Line(
                points={{34,-1.5},{34,-12},{34,-33}},
                color={0,0,0},
                pattern=LinePattern.Dash));
            connect(On.active,OnSigOut)  annotation (Line(
                points={{45,-44},{45,-44},{60,-44},{60,0},{110,0}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(transitionWithSignal2.inPort,On. outPort[2]) annotation (Line(
                points={{-40,56},{-40,56},{-40,42},{-40,36},{-40,-94},{34.25,-94},{34.25,-54.5}},
                color={0,0,0},
                pattern=LinePattern.Dash));
            connect(transitionWithSignal2.outPort,Off. inPort[2]) annotation (Line(
                points={{-40,61.5},{-40,61.5},{-40,80},{34,80},{34,66},{34.5,66},{34.5,53}},
                color={0,0,0},
                pattern=LinePattern.Dash));
            connect(transitionWithSignal2.condition, not1.y) annotation (Line(
                points={{-52,60},{-56,60},{-59,60}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(not1.u, OnSigIn) annotation (Line(
                points={{-82,60},{-88,60},{-94,60},{-120,60}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(booleanExpression.y, transitionWithSignal1.condition) annotation (
                Line(points={{-57,20},{-20,20},{-20,0},{22,0}}, color={255,0,255},
                pattern=LinePattern.Dash));
            connect(booleanExpression1.y, transitionWithSignal.condition) annotation (
                Line(points={{-59,-60},{-26,-60},{-26,-40},{-12,-40}}, color={255,0,255},
                pattern=LinePattern.Dash));

            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Rectangle(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,127,255},
                    lineThickness=0.5,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid), Text(
                    extent={{-52,22},{52,-30}},
                    lineColor={0,127,255},
                    lineThickness=1,
                    textString="ON")}), Diagram(coordinateSystem(preserveAspectRatio=false)));
          end OnOffSta;

          package Examples
                extends Modelica.Icons.ExamplesPackage;
            model OnOffSta
              import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
              extends Modelica.Icons.Example;
              BuildingControlEmulator.Devices.AirSide.Coil.Control.OnOffSta
                                                                    onOffSta(
                minOffTim=300,
                minOnTim=300,
                OffTim(fixed=true),
                OnTim(fixed=true),
                dT=0.5) annotation (Placement(transformation(extent={{-12,-10},{8,10}})));
              Modelica.Blocks.Sources.BooleanStep booleanStep(startValue=false, startTime=1
                    *86400/2)
                         annotation (Placement(transformation(extent={{-100,50},{-80,70}})));
              Modelica.Blocks.Sources.Sine sine(f=1/86400)
                annotation (Placement(transformation(extent={{-100,-70},{-80,-50}})));
              Modelica.Blocks.Sources.Constant const(k=0)
                annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
            equation
              connect(booleanStep.y, onOffSta.OnSigIn) annotation (Line(
                  points={{-79,60},{-40,60},{-40,6},{-14,6}},
                  color={255,0,255},
                  pattern=LinePattern.Dash));
              connect(sine.y, onOffSta.Mea) annotation (Line(
                  points={{-79,-60},{-60,-60},{-40,-60},{-40,-6},{-14,-6}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(const.y, onOffSta.SetPoi) annotation (Line(
                  points={{-79,0},{-14,0}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                    coordinateSystem(preserveAspectRatio=false)),
                experiment(StopTime=172800));
            end OnOffSta;
          end Examples;
        end Control;

        package Examples
              extends Modelica.Icons.ExamplesPackage;
          model HeaCoi
            import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
            extends Modelica.Icons.Example;
            package Medium1 = Buildings.Media.Water "Medium model";
            package Medium2 = Buildings.Media.Air "Medium model";
            BuildingControlEmulator.Devices.AirSide.Coil.HeaCoil
                                                         Coi(
              redeclare package MediumAir = Medium2,
              redeclare package MediumWat = Medium1,
              mWatFloRat=1,
              PreDroAir(displayUnit="Pa") = 1000,
              PreDroWat(displayUnit="Pa") = 1000,
              mAirFloRat=1,
              k=1,
              Ti=60,
              eps=0.8) annotation (Placement(transformation(extent={{-20,14},{22,-28}})));
            Buildings.Fluid.Sources.Boundary_pT souWat(
              nPorts=1,
              redeclare package Medium = Medium1,
              p(displayUnit="Pa") = 100000,
              T=318.15)
              annotation (Placement(transformation(extent={{-82,-70},{-62,-50}})));
            Buildings.Fluid.Sources.Boundary_pT sinWat(
              nPorts=1,
              redeclare package Medium = Medium1,
              p(displayUnit="Pa") = 100000 - 1000,
              T=293.15) annotation (Placement(transformation(extent={{94,-70},{74,-50}})));
            Buildings.Fluid.Sources.Boundary_pT sinAir(
              nPorts=1,
              p(displayUnit="Pa"),
              redeclare package Medium = Medium2,
              T=293.15) annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temLeaWat(redeclare
                package Medium =
                  Medium1)
              annotation (Placement(transformation(extent={{40,-70},{60,-50}})));
            Buildings.Fluid.Sources.Boundary_pT souAir(
              nPorts=1,
              p(displayUnit="Pa") = 101325 + 1000,
              redeclare package Medium = Medium2,
              X={0.02,1 - 0.02},
              use_T_in=true,
              use_X_in=true)
              annotation (Placement(transformation(extent={{82,32},{62,52}})));
            Buildings.Utilities.Psychrometrics.X_pTphi x_pTphi(use_p_in=false)
              annotation (Placement(transformation(extent={{18,70},{38,90}})));
            Modelica.Blocks.Sources.Constant temSou(k=273.15 + 20)
              "Temperature boundary condition"
              annotation (Placement(transformation(extent={{-60,70},{-40,90}})));
            Modelica.Blocks.Sources.Constant relHum(k=0.8) "Relative humidity"
              annotation (Placement(transformation(extent={{-30,20},{-10,40}})));
            Modelica.Blocks.Sources.Constant relHum1(k=273.15 + 25)
                                                           "Relative humidity"
              annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
            Modelica.Blocks.Sources.BooleanStep booleanStep(startTime=500, startValue=false)
              annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
          equation
            connect(souWat.ports[1], Coi.port_a_Wat) annotation (Line(
                points={{-62,-60},{-40,-60},{-40,-23.8},{-20,-23.8}},
                color={0,127,255},
                thickness=1));
            connect(Coi.port_b_Air, sinAir.ports[1]) annotation (Line(points={{-20.42,9.8},
                    {-40,9.8},{-40,48},{-60,48}}, color={0,127,255},
                thickness=1));
            connect(sinWat.ports[1], temLeaWat.port_b) annotation (Line(
                points={{74,-60},{60,-60}},
                color={0,127,255},
                thickness=1));
            connect(temLeaWat.port_a, Coi.port_b_Wat) annotation (Line(
                points={{40,-60},{30,-60},{30,-24},{26,-24},{26,-23.8},{22,-23.8}},
                color={0,127,255},
                thickness=1));
            connect(souAir.ports[1], Coi.port_a_Air)
              annotation (Line(points={{62,42},{22,42},{22,9.8}}, color={0,127,255},
                thickness=1));
            connect(relHum.y,x_pTphi. phi) annotation (Line(
                points={{-9,30},{-6,30},{-6,74},{16,74}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(temSou.y,x_pTphi. T) annotation (Line(
                points={{-39,80},{16,80}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(souAir.T_in,x_pTphi. T) annotation (Line(
                points={{84,46},{90,46},{90,58},{-28,58},{-28,80},{16,80}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(x_pTphi.X, souAir.X_in) annotation (Line(
                points={{39,80},{68,80},{98,80},{98,38},{84,38}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(relHum1.y, Coi.SetPoi) annotation (Line(
                points={{-79,10},{-50,10},{-50,-2.8},{-24.2,-2.8}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(booleanStep.y, Coi.On) annotation (Line(
                points={{-79,-30},{-50,-30},{-50,-15.4},{-24.2,-15.4}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=1000));
          end HeaCoi;

          model CooCoi
            import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
            extends Modelica.Icons.Example;
            package Medium1 = Buildings.Media.Water "Medium model";
            package Medium2 = Buildings.Media.Air "Medium model";
            BuildingControlEmulator.Devices.AirSide.Coil.CooCoil
                                                         Coi(
              redeclare package MediumAir = Medium2,
              redeclare package MediumWat = Medium1,
              mWatFloRat=1,
              PreDroAir(displayUnit="Pa") = 1000,
              PreDroWat(displayUnit="Pa") = 1000,
              mAirFloRat=1,
              UA=4.2*1000,
              k=1,
              Ti=60) annotation (Placement(transformation(extent={{-20,14},{22,-28}})));
            Buildings.Fluid.Sources.Boundary_pT souWat(
              nPorts=1,
              redeclare package Medium = Medium1,
              p(displayUnit="Pa") = 100000,
              T=278.15)
              annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
            Buildings.Fluid.Sources.Boundary_pT sinWat(
              nPorts=1,
              redeclare package Medium = Medium1,
              p(displayUnit="Pa") = 100000 - 1000,
              T=293.15) annotation (Placement(transformation(extent={{94,-70},{74,-50}})));
            Buildings.Fluid.Sources.Boundary_pT sinAir(
              nPorts=1,
              p(displayUnit="Pa"),
              redeclare package Medium = Medium2,
              T=293.15) annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temLeaWat(redeclare
                package Medium =
                  Medium1)
              annotation (Placement(transformation(extent={{40,-70},{60,-50}})));
            Buildings.Fluid.Sources.Boundary_pT souAir(
              nPorts=1,
              p(displayUnit="Pa") = 101325 + 1000,
              redeclare package Medium = Medium2,
              X={0.02,1 - 0.02},
              use_T_in=true,
              use_X_in=true)
              annotation (Placement(transformation(extent={{82,32},{62,52}})));
            Buildings.Utilities.Psychrometrics.X_pTphi x_pTphi(use_p_in=false)
              annotation (Placement(transformation(extent={{18,70},{38,90}})));
            Modelica.Blocks.Sources.Constant temSou(k=273.15 + 20)
              "Temperature boundary condition"
              annotation (Placement(transformation(extent={{-60,70},{-40,90}})));
            Modelica.Blocks.Sources.Constant relHum(k=0.8) "Relative humidity"
              annotation (Placement(transformation(extent={{-30,20},{-10,40}})));
            Modelica.Blocks.Sources.Constant relHum1(k=273.15 + 10)
                                                           "Relative humidity"
              annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
            Modelica.Blocks.Sources.BooleanStep booleanStep(startTime=500, startValue=false)
              annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
          equation
            connect(souWat.ports[1], Coi.port_a_Wat) annotation (Line(
                points={{-60,-60},{-40,-60},{-40,-23.8},{-20,-23.8}},
                color={0,127,255},
                thickness=1));
            connect(Coi.port_b_Air, sinAir.ports[1]) annotation (Line(points={{-20.42,9.8},
                    {-40,9.8},{-40,48},{-60,48}}, color={0,127,255},
                thickness=1));
            connect(sinWat.ports[1], temLeaWat.port_b) annotation (Line(
                points={{74,-60},{60,-60}},
                color={0,127,255},
                thickness=1));
            connect(temLeaWat.port_a, Coi.port_b_Wat) annotation (Line(
                points={{40,-60},{30,-60},{30,-24},{26,-24},{26,-23.8},{22,-23.8}},
                color={0,127,255},
                thickness=1));
            connect(souAir.ports[1], Coi.port_a_Air)
              annotation (Line(points={{62,42},{22,42},{22,9.8}}, color={0,127,255},
                thickness=1));
            connect(relHum.y,x_pTphi. phi) annotation (Line(
                points={{-9,30},{-6,30},{-6,74},{16,74}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(temSou.y,x_pTphi. T) annotation (Line(
                points={{-39,80},{16,80}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(souAir.T_in,x_pTphi. T) annotation (Line(
                points={{84,46},{90,46},{90,58},{-28,58},{-28,80},{16,80}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(x_pTphi.X, souAir.X_in) annotation (Line(
                points={{39,80},{68,80},{98,80},{98,38},{84,38}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(relHum1.y, Coi.SetPoi) annotation (Line(
                points={{-79,10},{-50,10},{-50,-2.8},{-24.2,-2.8}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(booleanStep.y, Coi.On) annotation (Line(
                points={{-79,-30},{-50,-30},{-50,-15.4},{-24.2,-15.4}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=1000));
          end CooCoi;

          model DxCoil
            import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
            extends Modelica.Icons.Example;

            package Medium2 = Buildings.Media.Air "Medium model";
            BuildingControlEmulator.Devices.AirSide.Coil.DxCoil           DxCoil(
              redeclare package MediumAir = Medium2,
              datCoi=datCoi,
              PreDroAir(displayUnit="Pa") = 1000,
              mAirFloRat=1,
              minOffTim=300,
              dT=0.5,
              minOnTim=1500)
              annotation (Placement(transformation(extent={{-34,40},{8,-2}})));
            Buildings.Fluid.MixingVolumes.MixingVolume
                                            souAir(
              redeclare package Medium = Medium2,
              p(displayUnit="Pa") = 100000,
              nPorts=2,
              V=10000,
              m_flow_nominal=1)
              annotation (Placement(transformation(extent={{76,-34},{56,-14}})));

            Modelica.Blocks.Sources.Constant Tcon(k=273.15 + 23.89) "Relative humidity"
              annotation (Placement(transformation(extent={{-100,10},{-80,30}})));
            Modelica.Blocks.Sources.BooleanStep booleanStep(startTime=500, startValue=false)
              annotation (Placement(transformation(extent={{-100,-90},{-80,-70}})));
            parameter
              Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.SingleSpeed.Carrier_Comfort_50ES060
              datCoi(sta={
                  Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.BaseClasses.Stage(
                  spe=1800,
                  nomVal=
                    Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.BaseClasses.NominalValues(
                    Q_flow_nominal=-17500.95,
                    COP_nominal=3.9,
                    SHR_nominal=0.78,
                    m_flow_nominal=1.2*0.944),
                  perCur=
                    Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.BaseClasses.PerformanceCurve(
                    capFunT={1.6380187,-0.0747347,0.0029747,0.0015201,-0.0000519,-0.0004509},
                    capFunFF={0.8185792,0.2831771,-0.1017563},
                    EIRFunT={-0.2209648,0.1033303,-0.0030061,-0.0070657,0.0006322,-0.0002496},
                    EIRFunFF={1.0380778,-0.2013868,0.1633090},
                    TConInMin=273.15 + 23.89,
                    TConInMax=273.15 + 51.67,
                    TEvaInMin=273.15 + 13.89,
                    TEvaInMax=273.15 + 22.22,
                    ffMin=0.875,
                    ffMax=1.125))})
              annotation (Placement(transformation(extent={{70,-88},{90,-68}})));
            Modelica.Blocks.Sources.Constant TSet(k=273.15 + 20)    "Relative humidity" annotation (Placement(transformation(extent={{-100,-58},{-80,-38}})));
            Buildings.Fluid.Movers.FlowControlled_m_flow fan(
              redeclare package Medium = Medium2,
              dp_nominal=1000,
              m_flow_nominal=1)
                               annotation (Placement(transformation(extent={{40,24},{20,
                      44}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTem(redeclare package
                Medium =                                                                 Medium2, m_flow_nominal=1)
              annotation (Placement(transformation(extent={{50,-72},{30,-52}})));
            Modelica.Blocks.Sources.Constant const(k=100)
              annotation (Placement(transformation(extent={{-40,70},{-20,90}})));
            Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow preHeaFlo
              "Prescribed heat flow rate"
              annotation (Placement(transformation(extent={{0,70},{20,90}})));
            Modelica.Blocks.Sources.Constant m_flow(k=1)   "Relative humidity" annotation (Placement(transformation(extent={{-100,40},
                      {-80,60}})));

          equation
            connect(Tcon.y, DxCoil.TConIn) annotation (Line(
                points={{-79,20},{-79,20},{-60,20},{-60,27.4},{-38.2,27.4}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(senTem.port_a, souAir.ports[1])
              annotation (Line(
                points={{50,-62},{66,-62},{78,-62},{78,-34},{68,-34}},
                color={0,127,255},
                thickness=1));
            connect(preHeaFlo.Q_flow,const. y) annotation (Line(
                points={{0,80},{-19,80}},
                color={0,0,127}));
            connect(preHeaFlo.port, souAir.heatPort) annotation (Line(points={{20,80},{56,
                    80},{92,80},{92,-24},{76,-24}},                                                                       color={191,0,0}));
            connect(m_flow.y, fan.m_flow_in) annotation (Line(
                points={{-79,50},{30,50},{30,46}},
                color={0,0,127},
                pattern=LinePattern.Dash));

            connect(fan.port_a, souAir.ports[2]) annotation (Line(
                points={{40,34},{50,34},{50,-34},{64,-34}},
                color={0,127,255},
                thickness=1));
            connect(fan.port_b, DxCoil.port_a_Air)
              annotation (Line(points={{20,34},{8,34},{8,35.8}}, color={0,127,255}));
            connect(senTem.port_b, DxCoil.port_b_Air) annotation (Line(
                points={{30,-62},{-4,-62},{-50,-62},{-50,35.8},{-34.42,35.8}},
                color={0,127,255},
                thickness=1));
            connect(booleanStep.y, DxCoil.On) annotation (Line(
                points={{-79,-80},{-60,-80},{-60,2.2},{-38.2,2.2}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(TSet.y, DxCoil.SetPoi) annotation (Line(
                points={{-79,-48},{-66,-48},{-66,10.6},{-38.2,10.6}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(senTem.T, DxCoil.Mea) annotation (Line(
                points={{40,-51},{40,-51},{40,-22},{-76,-22},{-76,14},{-54,14},{-54,19},{
                    -38.2,19}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=86400));
          end DxCoil;
        end Examples;
      end Coil;

      package MixingBox

        model MixingBox
          replaceable package Medium = Modelica.Media.Interfaces.PartialMedium "medium for the fluid";
          parameter Modelica.Units.SI.Pressure PreDro "pressure drop in the air side";
          parameter Modelica.Units.SI.MassFlowRate mFreAirFloRat
            "mass flow rate for fresh air";
          parameter Modelica.Units.SI.MassFlowRate mTotAirFloRat
            "mass flow rate for water";
          parameter Modelica.Units.SI.Temperature TemHig
            "highest temeprature when the economizer is on";
          parameter Modelica.Units.SI.Temperature TemLow
            "lowest temeprature when the economizer is on";
          parameter Real DamMin "minimum damper postion";
          parameter Real k(min=0, unit="1") = 1 "gain of controller";
          parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
            "time constant of Integrator block";
          BaseClasses.MixBox mixBox(
            redeclare package Medium = Medium,
            PreDro=PreDro,
            mFreAirFloRat=mFreAirFloRat,
            mTotAirFloRat=mTotAirFloRat)
                                    annotation (Placement(transformation(extent={{-28,-28},{32,30}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_Exh(redeclare package
              Medium =                                                              Medium)
                                                         "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{-70,90},{-50,110}}),
                iconTransformation(extent={{-70,90},{-50,110}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_Fre(redeclare package
              Medium =                                                              Medium)
                                                         "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{50,90},{70,110}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_Ret(redeclare package
              Medium =                                                              Medium)
                                                         "First port, typically inlet" annotation (Placement(transformation(extent={{-68,
                    -110},{-48,-90}}), iconTransformation(extent={{-68,-110},{-48,-90}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_Sup(redeclare package
              Medium =                                                              Medium)
                                                         "Second port, typically outlet" annotation (Placement(transformation(extent={{50,-112},{70,-92}})));
          Control.ecoCon ecoCon(
            TemHig=TemHig,
            TemLow=TemLow,
            DamMin=DamMin,
            k=k,
            Ti=Ti)              annotation (Placement(transformation(extent={{-70,30},{-50,50}})));
          Modelica.Blocks.Interfaces.RealInput SetPoi "Connector of setpoint input signal"
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.BooleanInput On annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
          Modelica.Blocks.Interfaces.RealInput Tout
            "Connector of measurement input signal"
            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        equation
          connect(mixBox.port_Exh, port_Exh) annotation (Line(
              points={{-19,30},{-19,60},{-60,60},{-60,100}},
              color={0,140,72},
              thickness=0.5));
          connect(mixBox.port_Fre, port_Fre) annotation (Line(
              points={{20,30},{20,62},{60,62},{60,100}},
              color={0,140,72},
              thickness=0.5));
          connect(mixBox.port_Ret, port_Ret)
            annotation (Line(
              points={{-19,-28},{-19,-58},{-58,-58},{-58,-100}},
              color={0,140,72},
              thickness=0.5));
          connect(mixBox.port_Sup, port_Sup)
            annotation (Line(
              points={{20,-28},{20,-28},{20,-58},{60,-58},{60,-102}},
              color={0,140,72},
              thickness=0.5));
          connect(mixBox.T, ecoCon.Mea)
            annotation (Line(
              points={{35,-11.18},{64,-11.18},{64,20},{-88,20},{-88,32},{-72,32}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(ecoCon.SetPoi, SetPoi)
            annotation (Line(
              points={{-72,40},{-92,40},{-92,0},{-120,0}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(ecoCon.On, On) annotation (Line(
              points={{-72,48},{-90,48},{-90,80},{-120,80}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(ecoCon.Tout, Tout) annotation (Line(
              points={{-72,36},{-80,36},{-80,-60},{-120,-60}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(ecoCon.y, mixBox.DamPos) annotation (Line(points={{-49,40},{
                  -46,40},{-46,1},{-34,1}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Line(
                  points={{-60,90},{-60,-94}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{60,92},{60,-92}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{60,0},{-60,0}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-60,72},{-60,32}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-68,64},{-52,64}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-70,38},{-50,38}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-68,64},{-50,38}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{-70,38},{-52,64}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{60,74},{60,34}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{52,66},{68,66}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{50,40},{70,40}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{52,66},{70,40}},
                  color={0,0,127},
                  thickness=0.5),
                Line(
                  points={{50,40},{68,66}},
                  color={0,0,127},
                  thickness=0.5),
                Text(
                  extent={{-150,112},{150,152}},
                  textString="%name",
                  textColor={0,0,255})}),                                Diagram(coordinateSystem(preserveAspectRatio=false)));
        end MixingBox;

        package BaseClasses

          model MixBox
            replaceable package Medium =
                Modelica.Media.Interfaces.PartialMedium                          "Medium for the fluid";
            parameter Modelica.Units.SI.Pressure PreDro "Pressure drop in the air side";
            parameter Modelica.Units.SI.MassFlowRate mFreAirFloRat
              "mass flow rate for fresh air";
            parameter Modelica.Units.SI.MassFlowRate mTotAirFloRat
              "mass flow rate for water";

            Buildings.Fluid.FixedResistances.Junction jun(
              energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
              redeclare package Medium = Medium,
              from_dp=false,
              m_flow_nominal={mTotAirFloRat,mFreAirFloRat,-mTotAirFloRat + mFreAirFloRat},
              dp_nominal={PreDro/4,PreDro/4,PreDro/4},
              linearized=true)
              annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-70,-12})));

            Buildings.Fluid.FixedResistances.Junction jun1(
              energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState,
              redeclare package Medium = Medium,
              from_dp=false,
              m_flow_nominal={mFreAirFloRat,mTotAirFloRat,mTotAirFloRat - mFreAirFloRat},
              dp_nominal={PreDro/4,PreDro/4,PreDro/4},
              linearized=true)
              annotation (Placement(transformation(extent={{10,10},{-10,-10}},
                  rotation=90,
                  origin={60,-12})));

            Modelica.Fluid.Interfaces.FluidPort_a port_Ret(redeclare package
                Medium =                                                              Medium)
              "First port, typically inlet"                                              annotation (Placement(transformation(extent={{-80,-110},{-60,-90}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_Sup(redeclare package
                Medium =                                                              Medium)
              "Second port, typically outlet"                                              annotation (Placement(transformation(extent={{50,-110},{70,-90}})));
            replaceable Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage valExh(
              redeclare package Medium = Medium,
              m_flow_nominal=mFreAirFloRat,
              dpValve_nominal=PreDro/2)
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-70,58})));
            replaceable Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage valFre(
              redeclare package Medium = Medium,
              m_flow_nominal=mFreAirFloRat,
              dpValve_nominal=PreDro/2)
              annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=90,
                  origin={60,54})));
            Modelica.Fluid.Interfaces.FluidPort_b port_Exh(redeclare package
                Medium =                                                              Medium)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-80,90},{-60,110}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_Fre(redeclare package
                Medium =                                                              Medium)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{50,90},{70,110}})));
            replaceable Buildings.Fluid.Sensors.TemperatureTwoPort temOut(redeclare
                package Medium =                                                                 Medium,
                m_flow_nominal=mFreAirFloRat)
              annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={60,82})));
            replaceable Buildings.Fluid.Sensors.TemperatureTwoPort temMix(redeclare
                package Medium =
                  Medium, m_flow_nominal=mTotAirFloRat)
                          annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={60,-42})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temRet(redeclare package
                Medium =
                  Medium) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-70,-50})));
            Modelica.Fluid.Sensors.MassFlowRate masFloAir(redeclare package
                Medium =                                                             Medium)
              annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                  rotation=90,
                  origin={60,20})));
            Modelica.Blocks.Interfaces.RealInput DamPos "Actuator position (0: closed, 1: open)"
              annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
            Modelica.Fluid.Sensors.MassFlowRate masSupAir(redeclare package
                Medium =
                  Medium) annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=90,
                  origin={60,-72})));
            Modelica.Blocks.Interfaces.RealOutput T "Temperature of the passing fluid"
              annotation (Placement(transformation(extent={{100,-52},{120,-32}})));
            Modelica.Blocks.Interfaces.RealOutput TOut "Temperature of the passing fluid"
              annotation (Placement(transformation(extent={{100,72},{120,92}})));
            replaceable Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage valRet(
              redeclare package Medium = Medium,
              dpValve_nominal=PreDro/2,
              m_flow_nominal=mTotAirFloRat - mFreAirFloRat)
              annotation (Placement(transformation(
                  extent={{10,10},{-10,-10}},
                  rotation=180,
                  origin={0,-12})));
            Modelica.Blocks.Sources.RealExpression realExpression(y=1 - DamPos)
              annotation (Placement(transformation(extent={{-60,10},{-40,30}})));
            Buildings.Utilities.IO.SignalExchange.Overwrite yOA(description=
                  "Outside air damper position setpoint for AHU", u(
                unit="1",
                min=0,
                max=1)) "Outside air damper position setpoint"
              annotation (Placement(transformation(extent={{0,44},{20,64}})));
            Buildings.Utilities.IO.SignalExchange.Overwrite yRet(description=
                  "Return air damper position setpoint for AHU", u(
                unit="1",
                min=0,
                max=1)) "Return air damper position setpoint"
              annotation (Placement(transformation(extent={{-28,10},{-8,30}})));
            Buildings.Utilities.IO.SignalExchange.Overwrite yEA(description=
                  "Exhaust air damper position setpoint for AHU", u(
                unit="1",
                min=0,
                max=1)) "Exhaust air damper position setpoint" annotation (
                Placement(transformation(extent={{-48,80},{-28,100}})));
          equation
            connect(valExh.port_a, jun.port_2)
              annotation (Line(
                points={{-70,48},{-70,-2}},
                color={0,127,255},
                thickness=1));
            connect(valExh.port_b, port_Exh)
              annotation (Line(
                points={{-70,68},{-70,100}},
                color={0,127,255},
                thickness=1));
            connect(port_Fre,temOut. port_a) annotation (Line(
                points={{60,100},{60,100},{60,92}},
                color={0,127,255},
                thickness=1));
            connect(jun1.port_2, temMix.port_a) annotation (Line(
                points={{60,-22},{60,-28},{60,-32}},
                color={0,127,255},
                thickness=1));
            connect(jun.port_1, temRet.port_b) annotation (Line(
                points={{-70,-22},{-70,-32},{-70,-40}},
                color={0,127,255},
                thickness=1));
            connect(temRet.port_a, port_Ret) annotation (Line(
                points={{-70,-60},{-70,-80},{-70,-100}},
                color={0,127,255},
                thickness=1));
            connect(masFloAir.port_b, jun1.port_1) annotation (Line(
                points={{60,10},{60,4},{60,-2}},
                color={0,127,255},
                thickness=1));
            connect(port_Fre, port_Fre) annotation (Line(points={{60,100},{60,104},{56,104},{60,104},{60,100}},
                                                                                     color={0,127,255}));
            connect(port_Sup,masSupAir. port_b) annotation (Line(
                points={{60,-100},{60,-92},{60,-82}},
                color={0,127,255},
                thickness=1));
            connect(masSupAir.port_a, temMix.port_b) annotation (Line(
                points={{60,-62},{60,-62},{60,-52}},
                color={0,127,255},
                thickness=1));
            connect(temMix.T, T) annotation (Line(
                points={{71,-42},{110,-42}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(temOut.T, TOut) annotation (Line(
                points={{71,82},{110,82}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(temOut.port_b, valFre.port_a) annotation (Line(
                points={{60,72},{60,64}},
                color={0,127,255},
                thickness=1));
            connect(valFre.port_b, masFloAir.port_a)
              annotation (Line(
                points={{60,44},{60,44},{60,30}},
                color={0,127,255},
                thickness=0.5));
            connect(jun.port_3, valRet.port_a) annotation (Line(
                points={{-60,-12},{-10,-12}},
                color={0,127,255},
                thickness=1));
            connect(valRet.port_b, jun1.port_3) annotation (Line(
                points={{10,-12},{50,-12}},
                color={0,127,255},
                thickness=1));
            connect(yOA.y, valFre.y)
              annotation (Line(points={{21,54},{48,54}}, color={0,0,127}));
            connect(yOA.u, DamPos) annotation (Line(points={{-2,54},{-40,54},{
                    -40,32},{-84,32},{-84,0},{-120,0}}, color={0,0,127}));
            connect(realExpression.y, yRet.u)
              annotation (Line(points={{-39,20},{-30,20}}, color={0,0,127}));
            connect(yRet.y, valRet.y) annotation (Line(points={{-7,20},{0,20},{
                    0,-1.77636e-15}}, color={0,0,127}));
            connect(DamPos, yEA.u) annotation (Line(points={{-120,0},{-92,0},{
                    -92,90},{-50,90}}, color={0,0,127}));
            connect(yEA.y, valExh.y) annotation (Line(points={{-27,90},{-18,90},
                    {-18,76},{-88,76},{-88,58},{-82,58}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Line(
                    points={{-70,92},{-70,-92}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{60,92},{60,-92}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{60,0},{-70,0}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-70,72},{-70,32}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-78,64},{-62,64}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-80,38},{-60,38}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-78,64},{-60,38}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{-80,38},{-62,64}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{60,74},{60,34}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{52,66},{68,66}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{50,40},{70,40}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{52,66},{70,40}},
                    color={0,0,127},
                    thickness=0.5),
                  Line(
                    points={{50,40},{68,66}},
                    color={0,0,127},
                    thickness=0.5)}),                                      Diagram(coordinateSystem(preserveAspectRatio=false)));
          end MixBox;

          package Examples
                  extends Modelica.Icons.ExamplesPackage;
            model Mixbox
              extends Modelica.Icons.Example;
                package Medium = Buildings.Media.Air "Medium model";
              MixBox mixBox(                   mTotAirFloRat=1,
                PreDro(displayUnit="Pa") = 2000,
                redeclare package Medium = Medium,
                mFreAirFloRat=0.9)                              annotation (Placement(transformation(extent={{-16,-14},{16,18}})));
              Buildings.Fluid.Sources.Boundary_pT sin(
                redeclare package Medium = Medium,
                nPorts=1,
                p(displayUnit="Pa") = 100000 - 2000,
                T=293.15) annotation (Placement(transformation(extent={{52,-56},{32,-36}})));
              Buildings.Fluid.Sources.Boundary_pT sou(
                redeclare package Medium = Medium,
                nPorts=1,
                p(displayUnit="Pa") = 100000 + 2000,
                T=299.15)
                annotation (Placement(transformation(extent={{-58,-56},{-38,-36}})));
              Buildings.Fluid.Sources.Boundary_pT souOut(
                redeclare package Medium = Medium,
                nPorts=2,
                p(displayUnit="Pa") = 100000,
                T=288.15) annotation (Placement(transformation(extent={{-42,64},{-22,84}})));
              Modelica.Blocks.Sources.Constant DamPos(k=1) "Damper position"
                annotation (Placement(transformation(extent={{-78,-8},{-58,12}})));
            equation
              connect(sin.ports[1], mixBox.port_Sup) annotation (Line(
                  points={{32,-46},{9.6,-46},{9.6,-14}},
                  color={0,127,255},
                  thickness=1));
              connect(sou.ports[1], mixBox.port_Ret) annotation (Line(
                  points={{-38,-46},{-11.2,-46},{-11.2,-14}},
                  color={0,127,255},
                  thickness=1));
              connect(mixBox.port_Fre, souOut.ports[1]) annotation (Line(
                  points={{9.6,18},{10,18},{10,76},{-22,76}},
                  color={0,127,255},
                  thickness=1));
              connect(mixBox.port_Exh, souOut.ports[2]) annotation (Line(
                  points={{-11.2,18},{-10,18},{-10,36},{-12,36},{-12,72},{-22,72}},
                  color={0,127,255},
                  thickness=1));
              connect(DamPos.y, mixBox.DamPos) annotation (Line(
                  points={{-57,2},{-40,2},{-19.2,2}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
                experiment(StopTime=1000));
            end Mixbox;
          end Examples;
        end BaseClasses;

        package Control

          model ecoCon
            import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
            parameter Modelica.Units.SI.Temperature TemHig
              "the highest temeprature when the economizer is on";
            parameter Modelica.Units.SI.Temperature TemLow
              "the lowest temeprature when the economizer is on";
             parameter Real DamMin "the minimum damper postion";
            parameter Real k(min=0, unit="1") = 1 "Gain of controller";
            parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
              "Time constant of Integrator block";

            BuildingControlEmulator.Devices.Control.conPI pI(
              k=k,
              Ti=Ti,
              reverseActing=false,
              conPID(y_reset=1))
              annotation (Placement(transformation(extent={{10,2},{30,22}})));
            Modelica.Blocks.Interfaces.BooleanInput On annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
            Modelica.Blocks.Interfaces.RealInput SetPoi "Connector of setpoint input signal"
              annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
            Modelica.Blocks.Interfaces.RealInput Mea "Connector of measurement input signal"
              annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
            Modelica.Blocks.Sources.BooleanExpression integerExpression(y=(Tout <= TemHig)
                   and (Tout > TemLow))                                                 annotation (Placement(transformation(extent={{-80,30},
                      {-60,50}})));
            Modelica.Blocks.Sources.RealExpression realExpression(y=DamMin) annotation (Placement(transformation(extent={{10,-30},{30,-10}})));
            Modelica.Blocks.Math.Max max annotation (Placement(transformation(extent={{52,-10},{72,10}})));
            Modelica.Blocks.Interfaces.RealOutput y "Connector of Real output signal" annotation (Placement(transformation(extent={{100,-10},{120,10}})));
            Modelica.Blocks.Interfaces.RealInput Tout
              "Connector of measurement input signal"
              annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
            Buildings.Controls.OBC.CDL.Continuous.LimitSlewRate ramLim(raisingSlewRate=1/
                  120) "Ramp limiter for fan control signal"
              annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
            Buildings.Controls.OBC.CDL.Continuous.Limiter lim(uMax=1, uMin=0)
              annotation (Placement(transformation(extent={{68,-60},{88,-40}})));
            Buildings.Controls.OBC.CDL.Continuous.Switch swi
              annotation (Placement(transformation(extent={{0,-60},{20,-40}})));
            Modelica.Blocks.Sources.RealExpression realExpression1(y=DamMin)
              annotation (Placement(transformation(extent={{-34,-68},{-14,-48}})));
          equation
            connect(pI.SetPoi, SetPoi)
              annotation (Line(
                points={{8,12},{8,10},{-60,10},{-60,0},{-120,0}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(pI.Mea, Mea) annotation (Line(
                points={{8,6},{8,4},{-40,4},{-40,-80},{-120,-80}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(integerExpression.y, pI.On) annotation (Line(points={{-59,40},{-59,40},
                    {0,40},{0,18},{8,18}},                                                                        color={255,0,255}));
            connect(pI.y, max.u1) annotation (Line(points={{31,12},{40,12},{40,6},{50,6}}, color={0,0,127}));
            connect(max.u2, realExpression.y) annotation (Line(points={{50,-6},{40,-6},{40,-20},{31,-20}}, color={0,0,127}));
            connect(ramLim.y, lim.u)
              annotation (Line(points={{62,-50},{66,-50}}, color={0,0,127}));
            connect(swi.y, ramLim.u)
              annotation (Line(points={{22,-50},{38,-50}}, color={0,0,127}));
            connect(On, swi.u2) annotation (Line(points={{-120,80},{-20,80},{-20,-50},{-2,
                    -50}}, color={255,0,255}));
            connect(max.y, swi.u1) annotation (Line(points={{73,0},{88,0},{88,-28},{-12,
                    -28},{-12,-42},{-2,-42}}, color={0,0,127}));
            connect(realExpression1.y, swi.u3)
              annotation (Line(points={{-13,-58},{-2,-58}}, color={0,0,127}));
            connect(lim.y, y) annotation (Line(points={{90,-50},{96,-50},{96,0},{110,0}},
                  color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Rectangle(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,127,255},
                    lineThickness=0.5,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid), Text(
                    extent={{-34,26},{38,-34}},
                    lineColor={0,127,255},
                    lineThickness=1,
                    textString="Eco"),
                  Text(
                    extent={{-156,112},{144,152}},
                    textString="%name",
                    textColor={0,0,255})}),                                Diagram(coordinateSystem(preserveAspectRatio=false)));
          end ecoCon;
        end Control;

        package Examples
            extends Modelica.Icons.ExamplesPackage;
          model Mixingbox
            extends Modelica.Icons.Example;
              package Medium = Buildings.Media.Air "Medium model";
            MixingBox mixBox(
              mTotAirFloRat=1,
              PreDro(displayUnit="Pa") = 2000,
              redeclare package Medium = Medium,
              mFreAirFloRat=0.9,
              DamMin=0.3,
              k=0.01,
              Ti=6,
              TemHig=289.15,
              TemLow=273.15)
                     annotation (Placement(transformation(extent={{-16,-14},{16,18}})));
            Buildings.Fluid.Sources.Boundary_pT sin(
              redeclare package Medium = Medium,
              nPorts=1,
              p(displayUnit="Pa") = 100000 - 2000,
              T=293.15) annotation (Placement(transformation(extent={{52,-56},{32,-36}})));
            Buildings.Fluid.Sources.Boundary_pT sou(
              redeclare package Medium = Medium,
              nPorts=1,
              p(displayUnit="Pa") = 100000 + 2000,
              T=299.15)
              annotation (Placement(transformation(extent={{-58,-56},{-38,-36}})));
            Buildings.Fluid.Sources.Boundary_pT souOut(
              redeclare package Medium = Medium,
              nPorts=2,
              use_T_in=true,
              p(displayUnit="Pa") = 100000,
              T=288.15) annotation (Placement(transformation(extent={{-44,64},{-24,84}})));
            Modelica.Blocks.Sources.BooleanPulse booleanStep1(startTime=0, period=200)
              annotation (Placement(transformation(extent={{-100,52},{-80,72}})));
            Modelica.Blocks.Sources.Constant con(k=273.15 + 20)
              annotation (Placement(transformation(extent={{-96,-26},{-78,-8}})));
            Modelica.Blocks.Sources.Ramp ramp(
              height=15,
              duration=600,
              startTime=0,
              offset=273.15 + 6)
                        annotation (Placement(transformation(extent={{-100,82},{-80,102}})));
          equation
            connect(sin.ports[1], mixBox.port_Sup) annotation (Line(
                points={{32,-46},{9.6,-46},{9.6,-14.32}},
                color={0,127,255},
                thickness=1));
            connect(sou.ports[1], mixBox.port_Ret) annotation (Line(
                points={{-38,-46},{-9.28,-46},{-9.28,-14}},
                color={0,127,255},
                thickness=1));
            connect(mixBox.port_Fre, souOut.ports[1]) annotation (Line(
                points={{9.6,18},{22,18},{22,76},{-24,76}},
                color={0,127,255},
                thickness=1));
            connect(mixBox.port_Exh, souOut.ports[2]) annotation (Line(
                points={{-9.6,18},{-14,18},{-14,34},{-14,36},{-14,72},{-24,72}},
                color={0,127,255},
                thickness=1));
            connect(booleanStep1.y, mixBox.On) annotation (Line(
                points={{-79,62},{-46,62},{-46,14.8},{-19.2,14.8}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(con.y, mixBox.SetPoi) annotation (Line(
                points={{-77.1,-17},{-48,-17},{-48,2},{-19.2,2}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(ramp.y, souOut.T_in) annotation (Line(
                points={{-79,92},{-60,92},{-60,78},{-46,78}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(mixBox.Tout, souOut.T_in) annotation (Line(
                points={{-19.2,-7.6},{-60,-7.6},{-60,78},{-46,78}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=1200, __Dymola_Algorithm="Dassl"));
          end Mixingbox;
        end Examples;
      end MixingBox;

      package Terminal
        package BaseClasses
          model VAV_ele
            replaceable package MediumAir =
                Modelica.Media.Interfaces.PartialMedium                             "medium for the air";
            parameter Modelica.Units.SI.MassFlowRate mAirFloRat "mass flow rate for air";
            parameter Modelica.Units.SI.Pressure PreDroAir
              "pressure drop in the air side";
            parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal
              "rated heat flow rate for heating";

            Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage Dam(
              redeclare package Medium = MediumAir,
              m_flow_nominal=mAirFloRat,
              dpValve_nominal=PreDroAir) annotation (Placement(transformation(extent={{-12,-10},
                      {8,10}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temEnt(redeclare package
                Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{-88,-10},{-68,10}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temLea(redeclare package
                Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{30,10},{50,-10}})));
            Modelica.Fluid.Sensors.MassFlowRate masFloRat(redeclare package
                Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{60,-10},{80,10}})));
            Modelica.Fluid.Sensors.Pressure preEnt(redeclare package Medium = MediumAir)
              annotation (Placement(transformation(extent={{-16,-20},{-36,-40}})));
            Modelica.Fluid.Sensors.Pressure preLea(redeclare package Medium = MediumAir)
              annotation (Placement(transformation(extent={{30,-20},{10,-40}})));
            Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package
                Medium =
                  MediumAir)
              "Fluid connector a (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package
                Medium =
                  MediumAir)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{90,-10},{110,10}})));
            Control.conPI pI(k=0.01, Ti=60)
              annotation (Placement(transformation(extent={{40,40},{20,60}})));
            Modelica.Blocks.Math.Gain gain(k=1/mAirFloRat)
                                           annotation (Placement(transformation(
                  extent={{4,-4},{-4,4}},
                  rotation=-90,
                  origin={70,28})));
            Modelica.Blocks.Interfaces.RealInput AirFlowRatSetPoi
              "Connector of setpoint input signal"
              annotation (Placement(transformation(extent={{-120,70},{-100,90}})));
            Modelica.Blocks.Interfaces.RealInput yVal
              "Actuator position (0: closed, 1: open)"
              annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
            Modelica.Blocks.Interfaces.RealOutput TAirLea
              "Temperature of the passing fluid"
              annotation (Placement(transformation(extent={{100,-70},{120,-50}})));
            Modelica.Blocks.Interfaces.BooleanInput On annotation (Placement(transformation(extent={{-120,-90},{-100,-70}})));
            Buildings.Fluid.HeatExchangers.HeaterCooler_u hea(
              redeclare package Medium = MediumAir,
              m_flow_nominal=mAirFloRat,
              dp_nominal=0,
              Q_flow_nominal=Q_flow_nominal)
                                    annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
          equation
            connect(temEnt.port_a,port_a)  annotation (Line(
                points={{-88,0},{-88,0},{-100,0}},
                color={0,127,255},
                thickness=1));
            connect(Dam.port_b, temLea.port_a)
              annotation (Line(
                points={{8,0},{30,0}},
                color={0,127,255},
                thickness=1));
            connect(temLea.port_b,masFloRat. port_a) annotation (Line(
                points={{50,0},{60,0}},
                color={0,127,255},
                thickness=1));
            connect(masFloRat.port_b,port_b)  annotation (Line(
                points={{80,0},{100,0}},
                color={0,127,255},
                thickness=1));
            connect(preLea.port,temLea. port_a) annotation (Line(
                points={{20,-20},{20,0},{30,0}},
                color={0,127,255},
                thickness=1));
            connect(preEnt.port, Dam.port_a)
              annotation (Line(
                points={{-26,-20},{-26,0},{-12,0}},
                color={0,127,255},
                thickness=1));
            connect(masFloRat.m_flow, gain.u) annotation (Line(
                points={{70,11},{70,23.2}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(gain.y, pI.Mea) annotation (Line(
                points={{70,32.4},{70,44},{42,44}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(pI.SetPoi, AirFlowRatSetPoi) annotation (Line(
                points={{42,50},{52,50},{60,50},{60,80},{-110,80}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(pI.On, On) annotation (Line(
                points={{42,56},{52,56},{52,-80},{-110,-80}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(temEnt.port_b, hea.port_a) annotation (Line(
                points={{-68,0},{-60,0}},
                color={0,127,255},
                thickness=1));
            connect(hea.port_b, Dam.port_a) annotation (Line(
                points={{-40,0},{-12,0}},
                color={0,127,255},
                thickness=1));
            connect(yVal, hea.u) annotation (Line(
                points={{-110,40},{-68,40},{-68,6},{-62,6}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(pI.y, Dam.y) annotation (Line(
                points={{19,50},{-2,50},{-2,12}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(temLea.T, TAirLea) annotation (Line(
                points={{40,-11},{40,-62},{110,-62},{110,-60}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                    extent={{-100,100},{102,-100}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{-90,0},{90,0}},
                    color={255,255,255},
                    pattern=LinePattern.Dash),
                  Text(
                    extent={{-60,58},{68,-66}},
                    lineColor={0,0,0},
                    pattern=LinePattern.Dash,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid,
                    textString="VAV")}),                                   Diagram(
                  coordinateSystem(preserveAspectRatio=false)));
          end VAV_ele;

          model VAV
            replaceable package MediumAir =
                Modelica.Media.Interfaces.PartialMedium                             "Medium for the air";
            replaceable package MediumWat =
                Modelica.Media.Interfaces.PartialMedium                             "Medium for the water";
            parameter Modelica.Units.SI.MassFlowRate mAirFloRat "mass flow rate for air";
            parameter Modelica.Units.SI.MassFlowRate mWatFloRat "mass flow rate for air";
            parameter Modelica.Units.SI.Pressure PreDroAir
              "Pressure drop in the air side";
            parameter Modelica.Units.SI.Pressure PreDroWat
              "Pressure drop in the water side";
            parameter Modelica.Units.SI.Efficiency eps(max=1) = 0.8
              "Heat exchanger effectiveness";
            Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage Dam(
              redeclare package Medium = MediumAir,
              m_flow_nominal=mAirFloRat,
              dpValve_nominal=PreDroAir) annotation (Placement(transformation(extent={{-12,-10},
                      {8,10}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temEnt(redeclare package
                Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{-88,-10},{-68,10}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temLea(redeclare package
                Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{30,10},{50,-10}})));
            Modelica.Fluid.Sensors.MassFlowRate masFloRat(redeclare package
                Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{60,-10},{80,10}})));
            Modelica.Fluid.Sensors.Pressure preEnt(redeclare package Medium = MediumAir)
              annotation (Placement(transformation(extent={{-16,-20},{-36,-40}})));
            Modelica.Fluid.Sensors.Pressure preLea(redeclare package Medium = MediumAir)
              annotation (Placement(transformation(extent={{30,-20},{10,-40}})));
            Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package
                Medium =
                  MediumAir)
              "Fluid connector a (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package
                Medium =
                  MediumAir)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{90,-10},{110,10}})));
            Coil.BaseClasses.DryCoil heaCoil(redeclare package MediumAir = MediumAir,
                redeclare package MediumWat = MediumWat,
              mAirFloRat=mAirFloRat,
              mWatFloRat=mWatFloRat,
              PreDroWat=0,
              eps=eps,
              PreDroAir=0)
              annotation (Placement(transformation(extent={{-40,-4},{-60,16}})));
            Modelica.Fluid.Interfaces.FluidPort_a port_a_Wat(redeclare package
                Medium =
                  MediumWat)
              "Fluid connector a (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-90,90},{-70,110}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_b_Wat(redeclare package
                Medium =
                  MediumWat)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-30,90},{-10,110}})));
            Control.conPI pI(k=0.01, Ti=60)
              annotation (Placement(transformation(extent={{40,40},{20,60}})));
            Modelica.Blocks.Math.Gain gain(k=1/mAirFloRat)
                                           annotation (Placement(transformation(
                  extent={{4,-4},{-4,4}},
                  rotation=-90,
                  origin={70,28})));
            Modelica.Blocks.Interfaces.RealInput AirFlowRatSetPoi
              "Connector of setpoint input signal"
              annotation (Placement(transformation(extent={{-120,70},{-100,90}})));
            Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage ReheaVal(
              redeclare package Medium = MediumWat,
              m_flow_nominal=mWatFloRat,
              dpValve_nominal=PreDroWat) annotation (Placement(transformation(
                  extent={{10,10},{-10,-10}},
                  rotation=-90,
                  origin={-20,50})));
            Modelica.Blocks.Interfaces.RealInput yVal
              "Actuator position (0: closed, 1: open)"
              annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
            Modelica.Blocks.Interfaces.RealOutput TAirLea
              "Temperature of the passing fluid"
              annotation (Placement(transformation(extent={{100,-70},{120,-50}})));
            Modelica.Blocks.Interfaces.BooleanInput On annotation (Placement(transformation(extent={{-120,-90},{-100,-70}})));
            Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
              annotation (Placement(transformation(extent={{-88,-80},{-68,-60}})));
          equation
            connect(temEnt.port_a,port_a)  annotation (Line(
                points={{-88,0},{-88,0},{-100,0}},
                color={0,127,255},
                thickness=1));
            connect(Dam.port_b, temLea.port_a)
              annotation (Line(
                points={{8,0},{30,0}},
                color={0,127,255},
                thickness=1));
            connect(temLea.port_b,masFloRat. port_a) annotation (Line(
                points={{50,0},{60,0}},
                color={0,127,255},
                thickness=1));
            connect(masFloRat.port_b,port_b)  annotation (Line(
                points={{80,0},{100,0}},
                color={0,127,255},
                thickness=1));
            connect(preLea.port,temLea. port_a) annotation (Line(
                points={{20,-20},{20,0},{30,0}},
                color={0,127,255},
                thickness=1));
            connect(preEnt.port, Dam.port_a)
              annotation (Line(
                points={{-26,-20},{-26,0},{-12,0}},
                color={0,127,255},
                thickness=1));
            connect(masFloRat.m_flow, gain.u) annotation (Line(
                points={{70,11},{70,23.2}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(gain.y, pI.Mea) annotation (Line(
                points={{70,32.4},{70,44},{42,44}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(pI.SetPoi, AirFlowRatSetPoi) annotation (Line(
                points={{42,50},{52,50},{60,50},{60,80},{-110,80}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(ReheaVal.port_b, port_b_Wat)
              annotation (Line(
                points={{-20,60},{-20,100}},
                color={255,0,0},
                thickness=1));
            connect(heaCoil.port_a_Air, temEnt.port_b)
              annotation (Line(points={{-60,0},{-64,0},{-68,0}}, color={0,127,255}));
            connect(heaCoil.port_b_Air, Dam.port_a)
              annotation (Line(points={{-40,0},{-26,0},{-12,0}},
                                                         color={0,127,255}));
            connect(ReheaVal.port_a, heaCoil.port_b_Wat) annotation (Line(
                points={{-20,40},{-22,40},{-22,28},{-60,28},{-60,12}},
                color={255,0,0},
                thickness=1));
            connect(heaCoil.port_a_Wat, port_a_Wat) annotation (Line(
                points={{-40,12},{-40,36},{-80,36},{-80,100}},
                color={255,0,0},
                thickness=1));
            connect(booleanExpression.y, pI.On) annotation (Line(
                points={{-67,-70},{54,-70},{54,56},{42,56}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(pI.y, Dam.y) annotation (Line(
                points={{19,50},{-2,50},{-2,12}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(ReheaVal.y, yVal) annotation (Line(
                points={{-32,50},{-40,50},{-40,40},{-110,40}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(temLea.T, TAirLea) annotation (Line(
                points={{40,-11},{40,-60},{110,-60}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                    extent={{-100,100},{102,-100}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{-90,0},{90,0}},
                    color={255,255,255},
                    pattern=LinePattern.Dash),
                  Text(
                    extent={{-60,58},{68,-66}},
                    lineColor={0,0,0},
                    pattern=LinePattern.Dash,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid,
                    textString="VAV")}),                                   Diagram(
                  coordinateSystem(preserveAspectRatio=false)));
          end VAV;

          model VAV_advance_temp_sensor
              parameter String zonNam "Zone designation, required if KPIs is AirZoneTemperature,
    RadiativeZoneTemperature, OperativeZoneTemperature, RelativeHumidity,
    or CO2Concentration";
            replaceable package MediumAir =
                Modelica.Media.Interfaces.PartialMedium "Medium for the air";
            replaceable package MediumWat =
                Modelica.Media.Interfaces.PartialMedium "Medium for the water";
            parameter Modelica.Units.SI.MassFlowRate mAirFloRat "mass flow rate for air";
            parameter Modelica.Units.SI.MassFlowRate mWatFloRat "mass flow rate for air";
            parameter Modelica.Units.SI.Pressure PreDroAir
              "Pressure drop in the air side";
            parameter Modelica.Units.SI.Pressure PreDroWat
              "Pressure drop in the water side";
            parameter Modelica.Units.SI.Efficiency eps(max=1) = 0.8
              "Heat exchanger effectiveness";
            Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage Dam(
              redeclare package Medium = MediumAir,
              m_flow_nominal=mAirFloRat,
              dpValve_nominal=PreDroAir,
              riseTime=15,
              y_start=0.3)               annotation (Placement(transformation(extent={{-12,-10},
                      {8,10}})));
            Modelica.Fluid.Sensors.TemperatureTwoPort temEnt(redeclare package
                Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{-88,-10},{-68,10}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort temLea(redeclare package
                Medium =
                  MediumAir,
              m_flow_nominal=mAirFloRat,
              tau=1,
              transferHeat=true)
              annotation (Placement(transformation(extent={{26,10},{46,-10}})));
            Modelica.Fluid.Sensors.MassFlowRate masFloRat(redeclare package
                Medium =
                  MediumAir)
              annotation (Placement(transformation(extent={{56,-10},{76,10}})));
            Modelica.Fluid.Sensors.Pressure preEnt(redeclare package Medium = MediumAir)
              annotation (Placement(transformation(extent={{-16,-20},{-36,-40}})));
            Modelica.Fluid.Sensors.Pressure preLea(redeclare package Medium = MediumAir)
              annotation (Placement(transformation(extent={{30,-20},{10,-40}})));
            Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package
                Medium =
                  MediumAir)
              "Fluid connector a (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package
                Medium =
                  MediumAir)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{90,-10},{110,10}})));
            Coil.BaseClasses.DryCoil heaCoil(redeclare package MediumAir = MediumAir,
                redeclare package MediumWat = MediumWat,
              mAirFloRat=mAirFloRat,
              mWatFloRat=mWatFloRat,
              PreDroWat=0,
              eps=eps,
              PreDroAir=0)
              annotation (Placement(transformation(extent={{-40,-4},{-60,16}})));
            Modelica.Fluid.Interfaces.FluidPort_a port_a_Wat(redeclare package
                Medium =
                  MediumWat)
              "Fluid connector a (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-90,90},{-70,110}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_b_Wat(redeclare package
                Medium =
                  MediumWat)
              "Fluid connector b (positive design flow direction is from port_a to port_b)"
              annotation (Placement(transformation(extent={{-30,90},{-10,110}})));
            Control.conPI pI(
              yMin=0.3,
              k=0.02,
              Ti=120)
              annotation (Placement(transformation(extent={{10,70},{30,90}})));
            Modelica.Blocks.Math.Gain gain(k=1/mAirFloRat/1.25)
                                           annotation (Placement(transformation(
                  extent={{4,-4},{-4,4}},
                  rotation=-90,
                  origin={66,24})));
            Modelica.Blocks.Interfaces.RealInput AirFlowRatSetPoi
              "Connector of setpoint input signal"
              annotation (Placement(transformation(extent={{-120,70},{-100,90}})));
            Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage ReheaVal(
              redeclare package Medium = MediumWat,
              m_flow_nominal=mWatFloRat,
              dpValve_nominal=PreDroWat,
              y_start=0.01)              annotation (Placement(transformation(
                  extent={{10,10},{-10,-10}},
                  rotation=-90,
                  origin={-20,44})));
            Modelica.Blocks.Interfaces.RealInput yVal
              "Actuator position (0: closed, 1: open)"
              annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
            Modelica.Blocks.Interfaces.RealOutput TAirLea
              "Temperature of the passing fluid"
              annotation (Placement(transformation(extent={{100,-70},{120,-50}})));
            Modelica.Blocks.Interfaces.BooleanInput On annotation (Placement(transformation(extent={{-120,-90},{-100,-70}})));
            Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
              annotation (Placement(transformation(extent={{-60,76},{-40,96}})));
            ReadOverwrite.WriteZoneLoc oveZonLoc(zonNam=zonNam)
              annotation (Placement(transformation(extent={{-68,44},{-48,64}})));

          equation
            connect(temEnt.port_a,port_a)  annotation (Line(
                points={{-88,0},{-88,0},{-100,0}},
                color={0,140,72},
                thickness=0.5));
            connect(Dam.port_b, temLea.port_a)
              annotation (Line(
                points={{8,0},{26,0}},
                color={0,140,72},
                thickness=0.5));
            connect(temLea.port_b,masFloRat. port_a) annotation (Line(
                points={{46,0},{56,0}},
                color={0,140,72},
                thickness=0.5));
            connect(preLea.port,temLea. port_a) annotation (Line(
                points={{20,-20},{20,0},{26,0}},
                color={0,140,72},
                thickness=0.5));
            connect(preEnt.port, Dam.port_a)
              annotation (Line(
                points={{-26,-20},{-26,0},{-12,0}},
                color={0,140,72},
                thickness=0.5));
            connect(masFloRat.m_flow, gain.u) annotation (Line(
                points={{66,11},{66,19.2}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(gain.y, pI.Mea) annotation (Line(
                points={{66,28.4},{66,52},{0,52},{0,74},{8,74}},
                color={0,0,127}));
            connect(pI.SetPoi, AirFlowRatSetPoi) annotation (Line(
                points={{8,80},{-110,80}},
                color={0,0,127}));
            connect(ReheaVal.port_b, port_b_Wat)
              annotation (Line(
                points={{-20,54},{-20,100}},
                color={255,0,0},
                thickness=1));
            connect(heaCoil.port_a_Air, temEnt.port_b)
              annotation (Line(points={{-60,0},{-64,0},{-68,0}}, color={0,140,72},
                thickness=0.5));
            connect(heaCoil.port_b_Air, Dam.port_a)
              annotation (Line(points={{-40,0},{-26,0},{-12,0}},
                                                         color={0,140,72},
                thickness=0.5));
            connect(ReheaVal.port_a, heaCoil.port_b_Wat) annotation (Line(
                points={{-20,34},{-22,34},{-22,28},{-60,28},{-60,12}},
                color={255,0,0},
                thickness=1));
            connect(heaCoil.port_a_Wat, port_a_Wat) annotation (Line(
                points={{-40,12},{-40,36},{-80,36},{-80,100}},
                color={255,0,0},
                thickness=1));
            connect(booleanExpression.y, pI.On) annotation (Line(
                points={{-39,86},{8,86}},
                color={255,0,255}));
            connect(temLea.T, TAirLea) annotation (Line(
                points={{36,-11},{36,-60},{110,-60}},
                color={0,0,127}));
            connect(masFloRat.port_b, port_b) annotation (Line(
                points={{76,0},{88,0},{88,0},{100,0}},
                color={0,140,72},
                thickness=0.5));
            connect(oveZonLoc.yReaHea_out, ReheaVal.y) annotation (Line(points={{-47,50},{
                    -40,50},{-40,44},{-32,44}}, color={0,0,127}));
            connect(yVal, oveZonLoc.yReaHea_in) annotation (Line(points={{-110,40},{-90,40},
                    {-90,50},{-70,50}}, color={0,0,127}));
            connect(pI.y, oveZonLoc.yDam_in) annotation (Line(points={{31,80},{40,80},{40,
                    68},{-78,68},{-78,58},{-70,58}}, color={0,0,127}));
            connect(oveZonLoc.yDam_out, Dam.y)
              annotation (Line(points={{-47,58},{-2,58},{-2,12}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                    extent={{-100,100},{102,-100}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{-90,0},{90,0}},
                    color={255,255,255},
                    pattern=LinePattern.Dash),
                  Text(
                    extent={{-60,58},{68,-66}},
                    lineColor={0,0,0},
                    pattern=LinePattern.Dash,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid,
                    textString="VAV"),
                  Text(
                    extent={{-144,118},{156,158}},
                    textString="%name",
                    textColor={0,0,255})}),                                Diagram(
                  coordinateSystem(preserveAspectRatio=false)));
          end VAV_advance_temp_sensor;

          package Examples
                  extends Modelica.Icons.ExamplesPackage;
            model VAV_ele
              import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
              extends Modelica.Icons.Example;
              package MediumAir = Buildings.Media.Air "Medium model";

              parameter Modelica.Units.SI.MassFlowRate mAirFloRat=3
                "mass flow rate for air";

              parameter Modelica.Units.SI.Pressure PreDroAir=100
                "Pressure drop in the air side";

              parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal=mAirFloRat*1000*10
                "rated heat flow rate for heating";

              Buildings.Fluid.Sources.Boundary_pT souAir(
                nPorts=1,
                redeclare package Medium = MediumAir,
                p(displayUnit="Pa") = 100000 + PreDroAir*2,
                T=286.03) annotation (Placement(transformation(extent={{80,-70},{60,-50}})));
              Buildings.Fluid.Sources.Boundary_pT sinAir(
                nPorts=1,
                p(displayUnit="Pa") = 100000,
                redeclare package Medium = MediumAir,
                T=278.15) annotation (Placement(transformation(extent={{80,50},{60,70}})));
              BuildingControlEmulator.Devices.AirSide.Terminal.BaseClasses.VAV_ele
                                                                               vAV_ele(
                                                                                   redeclare
                  package MediumAir =                                                                    MediumAir,
                mAirFloRat=mAirFloRat,
                PreDroAir=PreDroAir,
                Q_flow_nominal=Q_flow_nominal,
                pI(k=1, Ti=60))
                annotation (Placement(transformation(extent={{-14,-10},{10,12}})));
              Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
                annotation (Placement(transformation(extent={{-80,-46},{-60,-26}})));
              Modelica.Blocks.Sources.Ramp ramp(duration=86400, startTime=0)
                annotation (Placement(transformation(extent={{-80,22},{-60,42}})));
              Modelica.Blocks.Sources.Ramp ramp1(duration=86400)
                annotation (Placement(transformation(extent={{-80,-18},{-60,2}})));
            equation
              connect(vAV_ele.port_a, souAir.ports[1]) annotation (Line(points={{-14,1},{-26,1},{-26,-6},{-26,-60},{60,-60}}, color={0,127,255}));
              connect(vAV_ele.port_b, sinAir.ports[1]) annotation (Line(points={{10,1},{40,1},{40,60},{60,60}}, color={0,127,255}));
              connect(booleanExpression.y, vAV_ele.On) annotation (Line(points={{-59,-36},{-30,-36},{-30,-7.8},{-15.2,-7.8}}, color={255,0,255}));
              connect(ramp.y, vAV_ele.AirFlowRatSetPoi) annotation (Line(points={{-59,32},{-44,32},{-28,32},{-28,9.8},{-15.2,9.8}}, color={0,0,127}));
              connect(vAV_ele.yVal, ramp1.y) annotation (Line(points={{-15.2,5.4},{-52,5.4},{-52,-8},{-59,-8}}, color={0,0,127}));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
                experiment(StopTime=86400));
            end VAV_ele;

            model VAV
              import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
              extends Modelica.Icons.Example;
              package MediumWat = Buildings.Media.Water "Medium model";
              package MediumAir = Buildings.Media.Air "Medium model";

              parameter Modelica.Units.SI.MassFlowRate mAirFloRat=3
                "mass flow rate for air";
              parameter Modelica.Units.SI.MassFlowRate mWatFloRat=mAirFloRat*0.3*(308.15 -
                  288.15)/4.2/(333.15 - 323.15) "mass flow rate for air";
              parameter Modelica.Units.SI.Pressure PreDroAir=100
                "Pressure drop in the air side";
              parameter Modelica.Units.SI.Pressure PreDroWat=1000
                "Pressure drop in the water side";
              parameter Modelica.Units.SI.Efficiency eps(max=1) = 0.8
                "Heat exchanger effectiveness";

              Buildings.Fluid.Sources.Boundary_pT souWat(
                nPorts=1,
                redeclare package Medium = MediumWat,
                p(displayUnit="Pa") = 100000 + PreDroWat,
                T=353.15)
                annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
              Buildings.Fluid.Sources.Boundary_pT sinWat(
                nPorts=1,
                p(displayUnit="Pa") = 100000,
                redeclare package Medium = MediumWat,
                T=278.15) annotation (Placement(transformation(extent={{-80,50},{-60,70}})));
              Buildings.Fluid.Sources.Boundary_pT souAir(
                nPorts=1,
                redeclare package Medium = MediumAir,
                p(displayUnit="Pa") = 100000 + PreDroAir*2,
                T=286.03) annotation (Placement(transformation(extent={{80,-70},{60,-50}})));
              Buildings.Fluid.Sources.Boundary_pT sinAir(
                nPorts=1,
                p(displayUnit="Pa") = 100000,
                redeclare package Medium = MediumAir,
                T=278.15) annotation (Placement(transformation(extent={{80,50},{60,70}})));
              BuildingControlEmulator.Devices.AirSide.Terminal.BaseClasses.VAV vAV(redeclare
                  package MediumAir =                                                                    MediumAir, redeclare
                  package MediumWat = MediumWat,
                mAirFloRat=mAirFloRat,
                mWatFloRat=mWatFloRat,
                PreDroAir=PreDroAir,
                PreDroWat=PreDroWat,
                eps=eps,
                pI(k=1, Ti=60))
                annotation (Placement(transformation(extent={{-14,-10},{10,12}})));
              Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
                annotation (Placement(transformation(extent={{-80,-46},{-60,-26}})));
              Modelica.Blocks.Sources.Ramp ramp(duration=86400, startTime=0)
                annotation (Placement(transformation(extent={{-80,22},{-60,42}})));
              Modelica.Blocks.Sources.Ramp ramp1(duration=86400)
                annotation (Placement(transformation(extent={{-80,-18},{-60,2}})));
            equation
              connect(vAV.port_a, souAir.ports[1])
                annotation (Line(points={{-14,1},{-26,1},{-26,-6},{-26,-60},{60,-60}}, color={0,127,255}));
              connect(vAV.port_b,sinAir. ports[1]) annotation (Line(points={{10,1},{40,1},{40,60},{60,60}}, color={0,127,255}));
              connect(vAV.port_b_Wat, sinWat.ports[1])
                annotation (Line(
                  points={{-4.4,12},{-4.4,60},{-60,60}},
                  color={255,0,0},
                  thickness=1));
              connect(vAV.port_a_Wat, souWat.ports[1]) annotation (Line(
                  points={{-11.6,12},{-12,12},{-12,20},{-12,22},{-42,22},{-42,-60},{-60,-60}},
                  color={255,0,0},
                  thickness=1));
              connect(booleanExpression.y, vAV.On)
                annotation (Line(points={{-59,-36},{-30,-36},{-30,-7.8},{-15.2,-7.8}}, color={255,0,255}));
              connect(ramp.y, vAV.AirFlowRatSetPoi)
                annotation (Line(points={{-59,32},{-44,32},{-28,32},{-28,9.8},{-15.2,9.8}}, color={0,0,127}));
              connect(vAV.yVal, ramp1.y)
                annotation (Line(points={{-15.2,5.4},{-52,5.4},{-52,-8},{-59,-8}}, color={0,0,127}));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
                experiment(StopTime=86400));
            end VAV;
          end Examples;
        end BaseClasses;

        package Controls

          model ZonCon
            parameter Real MinFlowRateSetPoi "Minimum flow rate ratio";
            parameter Real HeatingFlowRateSetPoi "constant flow rate ratio during heating mode";
            Buildings.Controls.Continuous.LimPID cooCon(
              controllerType=Modelica.Blocks.Types.SimpleController.PI,
              k=0.1,
              Ti=60,
              yMin=MinFlowRateSetPoi,
              reverseActing=false)
                     annotation (Placement(transformation(extent={{-10,50},{10,70}})));
            Buildings.Controls.Continuous.LimPID heaCon(
              controllerType=Modelica.Blocks.Types.SimpleController.PI,
              Ti=60,
              k=0.01,
              reverseActing=true)
                     annotation (Placement(transformation(extent={{50,-70},{70,
                      -50}})));
            Modelica.Blocks.Interfaces.RealInput T
              "Connector of measurement input signal"
              annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
            Modelica.Blocks.Interfaces.RealInput TCooSetPoi
              "Connector of setpoint input signal"
              annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
            Modelica.Blocks.Interfaces.RealInput THeaSetPoi
              "Connector of setpoint input signal"
              annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
            Modelica.Blocks.Interfaces.RealOutput yAirFlowSetPoi
              "Connector of actuator output signal"
              annotation (Placement(transformation(extent={{100,-30},{120,-10}}),
                  iconTransformation(extent={{100,-30},{120,-10}})));
            Modelica.Blocks.Interfaces.RealOutput yValPos
              "Connector of actuator output signal"
              annotation (Placement(transformation(extent={{100,-70},{120,-50}}),
                  iconTransformation(extent={{100,-70},{120,-50}})));
            Modelica.Blocks.Logical.Switch swi
              "Switch between external signal and direct feedthrough signal"
              annotation (Placement(transformation(extent={{50,10},{70,30}})));
            Modelica.Blocks.Sources.Constant const(k=HeatingFlowRateSetPoi)
              annotation (Placement(transformation(extent={{0,-30},{20,-10}})));
            Modelica.Blocks.Logical.Hysteresis hysteresis(uLow=0, uHigh=0.5)
              annotation (Placement(transformation(extent={{-26,10},{-6,30}})));
            Modelica.Blocks.Math.Add add(k2=-1)
              annotation (Placement(transformation(extent={{-56,10},{-36,30}})));
            Modelica.Blocks.Interfaces.RealOutput yCoo
              "Connector of actuator output signal" annotation (Placement(
                  transformation(extent={{100,70},{120,90}})));
            Modelica.Blocks.Interfaces.RealOutput yHea
              "Connector of actuator output signal" annotation (Placement(
                  transformation(extent={{100,30},{120,50}})));
          equation
            connect(cooCon.y, swi.u1) annotation (Line(points={{11,60},{34,60},
                    {34,28},{48,28}},
                          color={0,0,127}));
            connect(const.y, swi.u3) annotation (Line(
                points={{21,-20},{34,-20},{34,12},{48,12}},
                color={0,0,127}));
            connect(add.y, hysteresis.u) annotation (Line(
                points={{-35,20},{-28,20}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(hysteresis.y, swi.u2) annotation (Line(
                points={{-5,20},{48,20}},
                color={255,0,255}));
            connect(TCooSetPoi, cooCon.u_s)
              annotation (Line(points={{-120,60},{-12,60}}, color={0,0,127}));
            connect(T, add.u1) annotation (Line(points={{-120,0},{-80,0},{-80,
                    26},{-58,26}}, color={0,0,127}));
            connect(T, cooCon.u_m) annotation (Line(points={{-120,0},{0,0},{0,
                    48}}, color={0,0,127}));
            connect(T, heaCon.u_m) annotation (Line(points={{-120,0},{-40,0},{
                    -40,-80},{60,-80},{60,-72}}, color={0,0,127}));
            connect(THeaSetPoi, heaCon.u_s)
              annotation (Line(points={{-120,-60},{48,-60}}, color={0,0,127}));
            connect(THeaSetPoi, add.u2) annotation (Line(points={{-120,-60},{
                    -72,-60},{-72,14},{-58,14}}, color={0,0,127}));
            connect(heaCon.y, yValPos)
              annotation (Line(points={{71,-60},{110,-60}}, color={0,0,127}));
            connect(swi.y, yAirFlowSetPoi) annotation (Line(points={{71,20},{84,
                    20},{84,-20},{110,-20}},
                                           color={0,0,127}));
            connect(cooCon.y, yCoo) annotation (Line(points={{11,60},{34,60},{
                    34,80},{110,80}}, color={0,0,127}));
            connect(heaCon.y, yHea) annotation (Line(points={{71,-60},{80,-60},
                    {80,40},{110,40}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Rectangle(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    extent={{-154,112},{146,152}},
                    textString="%name",
                    textColor={0,0,255})}),           Diagram(coordinateSystem(
                    preserveAspectRatio=false)));
          end ZonCon;

          package Examples
              extends Modelica.Icons.ExamplesPackage;
            model ZonCon
              import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
            extends Modelica.Icons.Example;
              BuildingControlEmulator.Devices.AirSide.Terminal.Controls.ZonCon
                                                                       zonCon(
                  MinFlowRateSetPoi=0.3, HeatingFlowRateSetPoi=0.5)
                annotation (Placement(transformation(extent={{-10,-10},{12,12}})));
              Modelica.Blocks.Sources.Constant TCooSetPoi(k=273.15 + 22)
                annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
              Modelica.Blocks.Sources.Constant THeaSetPoi(k=273.15 + 20)
                annotation (Placement(transformation(extent={{-82,-40},{-62,-20}})));
              Modelica.Blocks.Sources.Sine TZon(
                offset=273.15 + 21,
                amplitude=2,
                f=1/86400)
                annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
            equation
              connect(TCooSetPoi.y, zonCon.TCooSetPoi) annotation (Line(
                  points={{-59,30},{-30,30},{-30,7.6},{-12.2,7.6}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(THeaSetPoi.y, zonCon.THeaSetPoi) annotation (Line(
                  points={{-61,-30},{-61,-30},{-30,-30},{-30,-5.6},{-12.2,-5.6}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              connect(TZon.y, zonCon.T) annotation (Line(
                  points={{-59,0},{-12.2,0},{-12.2,1}},
                  color={0,0,127},
                  pattern=LinePattern.Dash));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                    coordinateSystem(preserveAspectRatio=false)),
                experiment(StopTime=86400, __Dymola_NumberOfIntervals=1440));
            end ZonCon;
          end Examples;
        end Controls;
      end Terminal;
    end AirSide;

    package Control
      model conPI "\"PI Controller\""

        parameter Real yMin(min=0, max=1, unit="1") = 0
          "Lowest y output";
        parameter Real k(min=0, unit="1") = 1 "Gain of controller";
        parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
          "Time constant of Integrator block";
        parameter Boolean reverseActing=true
          "Set to true for reverse acting, or false for direct acting control action";
        Modelica.Blocks.Interfaces.BooleanInput On
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Interfaces.RealOutput y "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Buildings.Controls.OBC.CDL.Continuous.PIDWithReset
                                         conPID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          yMin=yMin,
          xi_start=0,
          k=k,
          Ti=Ti,
          reverseActing=reverseActing,
          y_reset=yMin)
          annotation (Placement(transformation(extent={{-8,-30},{12,-10}})));
        Modelica.Blocks.Interfaces.RealInput SetPoi
          "Connector of setpoint input signal"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput Mea
          "Connector of measurement input signal"
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Buildings.Controls.OBC.CDL.Continuous.Switch swi
          annotation (Placement(transformation(extent={{40,10},{60,-10}})));

        Buildings.Controls.OBC.CDL.Continuous.Sources.Constant zerSpe(k=0)
          "Zero fan speed when it becomes OFF"
          annotation (Placement(transformation(extent={{-10,26},{10,46}})));
      equation
        connect(conPID.u_s, SetPoi) annotation (Line(
            points={{-10,-20},{-66,-20},{-66,0},{-120,0}},
            color={0,0,127}));
        connect(swi.y, y) annotation (Line(
            points={{62,0},{110,0}},
            color={0,0,127}));
        connect(Mea, conPID.u_m) annotation (Line(
            points={{-120,-60},{-60,-60},{2,-60},{2,-32}},
            color={0,0,127}));
        connect(On, swi.u2) annotation (Line(points={{-120,60},{-40,60},{-40,0},{38,0}},
              color={255,0,255}));
        connect(conPID.y, swi.u1) annotation (Line(points={{14,-20},{20,-20},{20,-8},{
                38,-8}}, color={0,0,127}));
        connect(zerSpe.y, swi.u3)
          annotation (Line(points={{12,36},{30,36},{30,8},{38,8}}, color={0,0,127}));
        connect(On, conPID.trigger) annotation (Line(points={{-120,60},{-60,60},{-60,-40},
                {-4,-40},{-4,-32}}, color={255,0,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,127,255},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-66,50},{62,-48}},
                lineColor={0,127,255},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="PI"),
              Text(
                extent={{-152,110},{148,150}},
                textString="%name",
                textColor={0,0,255})}),        Diagram(coordinateSystem(
                preserveAspectRatio=false), graphics={Line(points={{32,-16}}, color={28,
                    108,200})}));
      end conPI;

      model Constant "\"Controller for constant speed fans or pumps\""
        Modelica.Blocks.Interfaces.BooleanInput On
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Math.BooleanToReal booleanToReal
          annotation (Placement(transformation(extent={{-18,-10},{2,10}})));
        Modelica.Blocks.Interfaces.RealOutput y "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        connect(On, booleanToReal.u) annotation (Line(
            points={{-120,0},{-66,0},{-20,0}},
            color={255,0,255}));
        connect(booleanToReal.y, y) annotation (Line(
            points={{3,0},{60,0},{110,0}},
            color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,127,255},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-66,50},{62,-48}},
                lineColor={0,127,255},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="ConstantSpeed"),
              Text(
                extent={{-154,110},{146,150}},
                textString="%name",
                textColor={0,0,255})}),        Diagram(coordinateSystem(
                preserveAspectRatio=false), graphics={
              Text(
                extent={{-144,112},{156,152}},
                textString="%name",
                textColor={0,0,255})}));
      end Constant;

      block LimPID
        "P, PI, PD, and PID controller with limited output, anti-windup compensation and setpoint weighting"

        extends Modelica.Blocks.Interfaces.SVcontrol;
        output Real controlError = u_s - u_m
          "Control error (set point - measurement)";

        parameter Modelica.Blocks.Types.SimpleController controllerType=
               Modelica.Blocks.Types.SimpleController.PID "Type of controller";
        parameter Real k(min=0, unit="1") = 1 "Gain of controller";
        parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
          "Time constant of Integrator block" annotation (Dialog(enable=
                controllerType == Modelica.Blocks.Types.SimpleController.PI or
                controllerType == Modelica.Blocks.Types.SimpleController.PID));
        parameter Modelica.Units.SI.Time Td(min=0) = 0.1
          "Time constant of Derivative block" annotation (Dialog(enable=
                controllerType == Modelica.Blocks.Types.SimpleController.PD or
                controllerType == Modelica.Blocks.Types.SimpleController.PID));
        parameter Real yMax(start=1)=1 "Upper limit of output";
        parameter Real yMin=0 "Lower limit of output";
        parameter Real wp(min=0) = 1 "Set-point weight for Proportional block (0..1)";
        parameter Real wd(min=0) = 0 "Set-point weight for Derivative block (0..1)"
             annotation(Dialog(enable=controllerType==.Modelica.Blocks.Types.SimpleController.PD or
                                      controllerType==.Modelica.Blocks.Types.SimpleController.PID));
        parameter Real Ni(min=100*Modelica.Constants.eps) = 0.9
          "Ni*Ti is time constant of anti-windup compensation"
           annotation(Dialog(enable=controllerType==.Modelica.Blocks.Types.SimpleController.PI or
                                    controllerType==.Modelica.Blocks.Types.SimpleController.PID));
        parameter Real Nd(min=100*Modelica.Constants.eps) = 10
          "The higher Nd, the more ideal the derivative block"
             annotation(Dialog(enable=controllerType==.Modelica.Blocks.Types.SimpleController.PD or
                                      controllerType==.Modelica.Blocks.Types.SimpleController.PID));
        parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.InitialState
          "Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)"
          annotation (Evaluate=true, Dialog(group="Initialization"));
            // Removed as the Limiter block no longer uses this parameter.
            // parameter Boolean limitsAtInit = true
            //  "= false, if limits are ignored during initialization"
            // annotation(Evaluate=true, Dialog(group="Initialization"));
        parameter Real xi_start=0
          "Initial or guess value value for integrator output (= integrator state)"
          annotation (Dialog(group="Initialization",
                      enable=controllerType==.Modelica.Blocks.Types.SimpleController.PI or
                             controllerType==.Modelica.Blocks.Types.SimpleController.PID));
        parameter Real xd_start=0
          "Initial or guess value for state of derivative block"
          annotation (Dialog(group="Initialization",
                               enable=controllerType==.Modelica.Blocks.Types.SimpleController.PD or
                                      controllerType==.Modelica.Blocks.Types.SimpleController.PID));
        parameter Real y_start=0 "Initial value of output"
          annotation(Dialog(enable=initType == Modelica.Blocks.Types.Init.InitialOutput,    group=
                "Initialization"));
        parameter Boolean strict=true "= true, if strict limits with noEvent(..)"
          annotation (Evaluate=true, choices(checkBox=true), Dialog(tab="Advanced"));

        parameter Boolean reverseAction = false
          "Set to true for throttling the water flow rate through a cooling coil controller";

        parameter Buildings.Types.Reset reset = Buildings.Types.Reset.Disabled
          "Type of controller output reset"
          annotation(Evaluate=true, Dialog(group="Integrator reset"));

        parameter Real y_reset=xi_start
          "Value to which the controller output is reset if the boolean trigger has a rising edge, used if reset == Buildings.Types.Reset.Parameter"
          annotation(Dialog(enable=reset == Buildings.Types.Reset.Parameter,
                            group="Integrator reset"));

        Modelica.Blocks.Interfaces.BooleanInput trigger if
             reset <> Buildings.Types.Reset.Disabled
          "Resets the controller output when trigger becomes true"
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-80,-120})));

        Modelica.Blocks.Interfaces.RealInput y_reset_in if
             reset == Buildings.Types.Reset.Input
          "Input signal for state to which integrator is reset, enabled if reset = Buildings.Types.Reset.Input"
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));

        Modelica.Blocks.Math.Add addP(k1=revAct*wp, k2=-revAct) "Adder for P gain"
         annotation (Placement(
              transformation(extent={{-80,40},{-60,60}})));
        Modelica.Blocks.Math.Add addD(k1=revAct*wd, k2=-revAct) if with_D
          "Adder for D gain"
          annotation (Placement(
              transformation(extent={{-80,-10},{-60,10}})));
        Modelica.Blocks.Math.Gain P(k=1) "Proportional term"
          annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
        Buildings.Utilities.Math.IntegratorWithReset I(
          final reset=if reset == Buildings.Types.Reset.Disabled then reset else Buildings.Types.Reset.Input,
          final y_reset=y_reset,
          final k=unitTime/Ti,
          final y_start=xi_start,
          final initType=if initType == Modelica.Blocks.Types.Init.SteadyState then
              Modelica.Blocks.Types.Init.SteadyState else if initType == Modelica.Blocks.Types.Init.InitialState
               or initType == Modelica.Blocks.Types.Init.InitialState then Modelica.Blocks.Types.Init.InitialState
               else Modelica.Blocks.Types.Init.NoInit) if with_I "Integral term"
          annotation (Placement(transformation(extent={{-40,-60},{-20,-40}})));

        Modelica.Blocks.Continuous.Derivative D(
          final k=Td/unitTime,
          final T=max([Td/Nd,1.e-14]),
          final x_start=xd_start,
          final initType=if initType == Modelica.Blocks.Types.Init.SteadyState or
              initType == Modelica.Blocks.Types.Init.InitialOutput then Modelica.Blocks.Types.Init.SteadyState
               else if initType == Modelica.Blocks.Types.Init.InitialState then
              Modelica.Blocks.Types.Init.InitialState else Modelica.Blocks.Types.Init.NoInit) if
             with_D "Derivative term"
          annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));

        Modelica.Blocks.Math.Add3 addPID(
          final k1=1,
          final k2=1,
          final k3=1) "Adder for the gains"
          annotation (Placement(transformation(extent={{0,-10},{20,10}})));

        Modelica.Blocks.Math.Gain gainPID(final k=k) "Multiplier for control gain"
         annotation (Placement(transformation(
                extent={{30,-10},{50,10}})));

        Modelica.Blocks.Nonlinear.Limiter limiter(
          final uMax=yMax,
          final uMin=yMin,
          final strict=strict) "Output limiter"
          annotation (Placement(transformation(extent={{70,-10},{90,10}})));

      protected
        constant Modelica.Units.SI.Time unitTime=1 annotation (HideResult=true);

        final parameter Real revAct = if reverseAction then -1 else 1
          "Switch for sign for reverse action";

        parameter Boolean with_I = controllerType==Modelica.Blocks.Types.SimpleController.PI or
                                   controllerType==Modelica.Blocks.Types.SimpleController.PID
          "Boolean flag to enable integral action"
          annotation(Evaluate=true, HideResult=true);
        parameter Boolean with_D = controllerType==Modelica.Blocks.Types.SimpleController.PD or
                                   controllerType==Modelica.Blocks.Types.SimpleController.PID
          "Boolean flag to enable derivative action"
          annotation(Evaluate=true, HideResult=true);

        Modelica.Blocks.Sources.Constant Dzero(final k=0) if not with_D
          "Zero input signal"
          annotation(Evaluate=true, HideResult=true,
                     Placement(transformation(extent={{-30,20},{-20,30}})));

        Modelica.Blocks.Sources.Constant Izero(final k=0) if not with_I
          "Zero input signal"
          annotation(Evaluate=true, HideResult=true,
                     Placement(transformation(extent={{10,-55},{0,-45}})));

        Modelica.Blocks.Interfaces.RealInput y_reset_internal
         "Internal connector for controller output reset"
         annotation(Evaluate=true);

        Modelica.Blocks.Math.Add3 addI(
          final k1=revAct,
          final k2=-revAct) if with_I
          "Adder for I gain"
             annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));

        Modelica.Blocks.Math.Add addSat(
          final k1=+1,
          final k2=-1) if with_I
          "Adder for integrator feedback"
          annotation (Placement(
              transformation(
              origin={80,-50},
              extent={{-10,-10},{10,10}},
              rotation=270)));

        Modelica.Blocks.Math.Gain gainTrack(k=1/(k*Ni)) if with_I
          "Gain for anti-windup compensation"
          annotation (
            Placement(transformation(extent={{58,-80},{38,-60}})));

        Modelica.Blocks.Sources.RealExpression intRes(
          final y=y_reset_internal/k - addPID.u1 - addPID.u2) if
             reset <> Buildings.Types.Reset.Disabled
          "Signal source for integrator reset"
          annotation (Placement(transformation(extent={{-80,-90},{-60,-70}})));

      initial equation
        if initType == Modelica.Blocks.Types.Init.InitialOutput then
           gainPID.y = y_start;
        end if;

      equation
        assert(yMax >= yMin, "LimPID: Limits must be consistent. However, yMax (=" + String(yMax) +
                             ") < yMin (=" + String(yMin) + ")");
        if initType == Modelica.Blocks.Types.Init.InitialOutput and (y_start < yMin
             or y_start > yMax) then
            Modelica.Utilities.Streams.error("LimPID: Start value y_start (=" + String(y_start) +
               ") is outside of the limits of yMin (=" + String(yMin) +") and yMax (=" + String(yMax) + ")");
        end if;

        // Equations for conditional connectors
        connect(y_reset_in, y_reset_internal);

        if reset <> Buildings.Types.Reset.Input then
          y_reset_internal = y_reset;
        end if;

        connect(u_s, addP.u1) annotation (Line(points={{-120,0},{-96,0},{-96,56},{
                -82,56}}, color={0,0,127}));
        connect(u_s, addD.u1) annotation (Line(points={{-120,0},{-96,0},{-96,6},{
                -82,6}}, color={0,0,127}));
        connect(u_s, addI.u1) annotation (Line(points={{-120,0},{-96,0},{-96,-42},{
                -82,-42}}, color={0,0,127}));
        connect(addP.y, P.u) annotation (Line(points={{-59,50},{-42,50}}, color={0,
                0,127}));
        connect(addD.y, D.u)
          annotation (Line(points={{-59,0},{-42,0}}, color={0,0,127}));
        connect(addI.y, I.u) annotation (Line(points={{-59,-50},{-42,-50}}, color={
                0,0,127}));
        connect(P.y, addPID.u1) annotation (Line(points={{-19,50},{-10,50},{-10,8},
                {-2,8}}, color={0,0,127}));
        connect(D.y, addPID.u2)
          annotation (Line(points={{-19,0},{-2,0}}, color={0,0,127}));
        connect(I.y, addPID.u3) annotation (Line(points={{-19,-50},{-10,-50},{-10,
                -8},{-2,-8}}, color={0,0,127}));
        connect(addPID.y, gainPID.u)
          annotation (Line(points={{21,0},{28,0}}, color={0,0,127}));
        connect(gainPID.y, addSat.u2) annotation (Line(points={{51,0},{60,0},{60,
                -20},{74,-20},{74,-38}}, color={0,0,127}));
        connect(gainPID.y, limiter.u)
          annotation (Line(points={{51,0},{68,0}}, color={0,0,127}));
        connect(limiter.y, addSat.u1) annotation (Line(points={{91,0},{94,0},{94,
                -20},{86,-20},{86,-38}}, color={0,0,127}));
        connect(limiter.y, y)
          annotation (Line(points={{91,0},{110,0}}, color={0,0,127}));
        connect(addSat.y, gainTrack.u) annotation (Line(points={{80,-61},{80,-70},{60,
                -70}},    color={0,0,127}));
        connect(gainTrack.y, addI.u3) annotation (Line(points={{37,-70},{-88,-70},{-88,
                -58},{-82,-58}},     color={0,0,127}));
        connect(u_m, addP.u2) annotation (Line(
            points={{0,-120},{0,-92},{-92,-92},{-92,44},{-82,44}},
            color={0,0,127},
            thickness=0.5));
        connect(u_m, addD.u2) annotation (Line(
            points={{0,-120},{0,-92},{-92,-92},{-92,-6},{-82,-6}},
            color={0,0,127},
            thickness=0.5));
        connect(u_m, addI.u2) annotation (Line(
            points={{0,-120},{0,-92},{-92,-92},{-92,-50},{-82,-50}},
            color={0,0,127},
            thickness=0.5));
        connect(Dzero.y, addPID.u2) annotation (Line(points={{-19.5,25},{-14,25},{
                -14,0},{-2,0}}, color={0,0,127}));
        connect(Izero.y, addPID.u3) annotation (Line(points={{-0.5,-50},{-10,-50},{
                -10,-8},{-2,-8}}, color={0,0,127}));
        connect(trigger, I.trigger) annotation (Line(points={{-80,-120},{-80,-88},{-30,
                -88},{-30,-62}}, color={255,0,255}));
        connect(intRes.y, I.y_reset_in) annotation (Line(points={{-59,-80},{-50,-80},{
                -50,-58},{-42,-58}}, color={0,0,127}));
         annotation (
      defaultComponentName="conPID",
      Documentation(info="<html>
<p>
This model is similar to
<a href=\"modelica://Modelica.Blocks.Continuous.LimPID\">Modelica.Blocks.Continuous.LimPID</a>,
except for the following changes:
</p>

<ol>
<li>
<p>
It can be configured to have a reverse action.
</p>
<p>If the parameter <code>reverseAction=false</code> (the default), then
<code>u_m &lt; u_s</code> increases the controller output,
otherwise the controller output is decreased. Thus,
</p>
<ul>
  <li>for a heating coil with a two-way valve, set <code>reverseAction = false</code>, </li>
  <li>for a cooling coils with a two-way valve, set <code>reverseAction = true</code>. </li>
</ul>
</li>

<li>
<p>
It can be configured to enable an input port that allows resetting the controller
output. The controller output can be reset as follows:
</p>
<ul>
  <li>
  If <code>reset = Buildings.Types.Reset.Disabled</code>, which is the default,
  then the controller output is never reset.
  </li>
  <li>
  If <code>reset = Buildings.Types.Reset.Parameter</code>, then a boolean
  input signal <code>trigger</code> is enabled. Whenever the value of
  this input changes from <code>false</code> to <code>true</code>,
  the controller output is reset by setting <code>y</code>
  to the value of the parameter <code>y_reset</code>.
  </li>
  <li>
  If <code>reset = Buildings.Types.Reset.Input</code>, then a boolean
  input signal <code>trigger</code> is enabled. Whenever the value of
  this input changes from <code>false</code> to <code>true</code>,
  the controller output is reset by setting <code>y</code>
  to the value of the input signal <code>y_reset_in</code>.
  </li>
</ul>
<p>
Note that this controller implements an integrator anti-windup. Therefore,
for most applications, keeping the default setting of
<code>reset = Buildings.Types.Reset.Disabled</code> is sufficient.
Examples where it may be beneficial to reset the controller output are situations
where the equipment control input should continuously increase as the equipment is
switched on, such as as a light dimmer that may slowly increase the luminance, or
a variable speed drive of a motor that should continuously increase the speed.
</p>
</li>

<li>
The parameter <code>limitsAtInit</code> has been removed.
</li>

<li>
Some parameters assignments in the instances have been made final.
</li>

</ol>
</html>",
      revisions="<html>
<ul>
<li>
September 29, 2016, by Michael Wetter:<br/>
Refactored model.
</li>
<li>
August 25, 2016, by Michael Wetter:<br/>
Removed parameter <code>limitsAtInit</code> because it was only propagated to
the instance <code>limiter</code>, but this block no longer makes use of this parameter.
This is a non-backward compatible change.<br/>
Revised implemenentation, added comments, made some parameter in the instances final.
</li>
<li>July 18, 2016, by Philipp Mehrfeld:<br/>
Added integrator reset.
This is for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/494\">issue 494</a>.
</li>
<li>
March 15, 2016, by Michael Wetter:<br/>
Changed the default value to <code>strict=true</code> in order to avoid events
when the controller saturates.
This is for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/433\">issue 433</a>.
</li>
<li>
February 24, 2010, by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"),       Icon(graphics={
              Rectangle(
                extent={{-6,-20},{66,-66}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                visible=(controllerType == Modelica.Blocks.Types.SimpleController.P),
                extent={{-32,-22},{68,-62}},
                lineColor={0,0,0},
                textString="P",
                fillPattern=FillPattern.Solid,
                fillColor={175,175,175}),
              Text(
                visible=(controllerType == Modelica.Blocks.Types.SimpleController.PI),
                extent={{-28,-22},{72,-62}},
                lineColor={0,0,0},
                textString="PI",
                fillPattern=FillPattern.Solid,
                fillColor={175,175,175}),
              Text(
                visible=(controllerType == Modelica.Blocks.Types.SimpleController.PD),
                extent={{-16,-22},{88,-62}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Solid,
                fillColor={175,175,175},
                textString="P D"),
              Text(
                visible=(controllerType == Modelica.Blocks.Types.SimpleController.PID),
                extent={{-14,-22},{86,-62}},
                lineColor={0,0,0},
                textString="PID",
                fillPattern=FillPattern.Solid,
                fillColor={175,175,175}),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
              Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
              Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
              Polygon(
                points={{90,-80},{68,-72},{68,-88},{90,-80}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(
                visible=strict,
                points={{30,60},{81,60}},
                color={255,0,0},
                smooth=Smooth.None)}));
      end LimPID;

      model conPIWithOve "\"PI Controller with overwrite\""

        parameter Real k(min=0, unit="1") = 1 "Gain of controller";
        parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
          "Time constant of Integrator block";

        Modelica.Blocks.Interfaces.BooleanInput On
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Math.BooleanToReal booleanToReal
          annotation (Placement(transformation(extent={{-72,50},{-52,70}})));
        Modelica.Blocks.Interfaces.RealOutput y "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        LimPID                           conPID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          xi_start=0,
          k=k,
          Ti=Ti,
          reset=Buildings.Types.Reset.Input)
          annotation (Placement(transformation(extent={{-8,-30},{12,-10}})));
        Modelica.Blocks.Interfaces.RealInput SetPoi
          "Connector of setpoint input signal"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput Mea
          "Connector of measurement input signal"
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{34,-10},{54,10}})));
        Modelica.Blocks.Sources.Constant const(k=0)
          annotation (Placement(transformation(extent={{-60,-90},{-40,-70}})));
        Buildings.Utilities.IO.SignalExchange.Overwrite oveSetPoi
          annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
        Buildings.Utilities.IO.SignalExchange.Overwrite oveActuation
          annotation (Placement(transformation(extent={{72,-10},{92,10}})));
      equation
        connect(On, booleanToReal.u) annotation (Line(
            points={{-120,60},{-90,60},{-74,60}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(conPID.y, product.u2) annotation (Line(
            points={{13,-20},{20,-20},{20,-6},{32,-6}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(booleanToReal.y, product.u1) annotation (Line(
            points={{-51,60},{20,60},{20,6},{32,6}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(conPID.trigger, booleanToReal.u) annotation (Line(
            points={{-6,-32},{-6,-48},{-90,-48},{-90,60},{-74,60}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(const.y, conPID.y_reset_in) annotation (Line(
            points={{-39,-80},{-28,-80},{-28,-28},{-10,-28}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(Mea, conPID.u_m) annotation (Line(
            points={{-120,-60},{-60,-60},{2,-60},{2,-32}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(oveSetPoi.u, SetPoi) annotation (Line(
            points={{-62,0},{-120,0}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(oveSetPoi.y, conPID.u_s) annotation (Line(
            points={{-39,0},{-20,0},{-20,-20},{-10,-20}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(product.y, oveActuation.u)
          annotation (Line(points={{55,0},{70,0}}, color={0,0,127}));
        connect(oveActuation.y, y)
          annotation (Line(points={{93,0},{110,0}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,127,255},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-66,50},{62,-48}},
                lineColor={0,127,255},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="PI")}),            Diagram(coordinateSystem(
                preserveAspectRatio=false)));
      end conPIWithOve;

      package Examples
          extends Modelica.Icons.ExamplesPackage;
        model conPI "This example models the PI controller"
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
            package MediumW = Buildings.Media.Water "Medium for chilled water";
          BuildingControlEmulator.Devices.Control.conPI conPI(
            conPID(reverseAction=true),
            Ti=60,
            k=10) annotation (Placement(transformation(extent={{-62,40},{-42,60}})));
          Modelica.Blocks.Sources.Constant const(k=273.15 + 15)
            annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
          Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
            annotation (Placement(transformation(extent={{-100,78},{-80,98}})));
          Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
            redeclare package Medium = MediumW,
            m_flow_nominal=1,
            dpValve_nominal=1000)
            annotation (Placement(transformation(extent={{-32,-30},{-12,-10}})));
          Buildings.Fluid.Sources.Boundary_pT Sou(
            nPorts=1,
            redeclare package Medium = MediumW,
            p(displayUnit="Pa") = 101325 + 2000,
            T=278.15) "Sou for CHW" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-70,-20})));
          Buildings.Fluid.Sources.Boundary_pT sin(
            redeclare package Medium = MediumW,
            p(displayUnit="Pa") = 101325 + 1000,
            nPorts=1) "Sink for CHW" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={78,-20})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol(
            energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
            nPorts=2,
            T_start=273.15+10,
            redeclare package Medium = MediumW,
            m_flow_nominal=1,
            V=1)  annotation (Placement(transformation(extent={{16,-6},{36,14}})));
          Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow
            annotation (Placement(transformation(extent={{-10,20},{10,40}})));
          Modelica.Blocks.Sources.Ramp ramp(                  duration=86400/2,
            height=-0.5*10*4200,
            offset=1*10*4200)
            annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senT(redeclare package
              Medium =
                MediumW, m_flow_nominal=1)
            annotation (Placement(transformation(extent={{40,-30},{60,-10}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=vol.T)
            annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
        equation
          connect(const.y, conPI.SetPoi) annotation (Line(
              points={{-79,30},{-76,30},{-76,50},{-64,50}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(booleanExpression.y, conPI.On) annotation (Line(
              points={{-79,88},{-76,88},{-76,56},{-64,56}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(conPI.y, val.y) annotation (Line(
              points={{-41,50},{-22,50},{-22,-8}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(Sou.ports[1], val.port_a) annotation (Line(
              points={{-60,-20},{-46,-20},{-32,-20}},
              color={0,127,255},
              thickness=1));
          connect(val.port_b, vol.ports[1]) annotation (Line(
              points={{-12,-20},{24,-20},{24,-6}},
              color={0,127,255},
              thickness=1));
          connect(prescribedHeatFlow.port, vol.heatPort) annotation (Line(
              points={{10,30},{18,30},{18,20},{2,20},{2,4},{16,4}},
              color={191,0,0},
              pattern=LinePattern.Dash));
          connect(ramp.y, prescribedHeatFlow.Q_flow) annotation (Line(
              points={{-59,-50},{-50,-50},{-50,30},{-10,30}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(senT.port_b, sin.ports[1]) annotation (Line(
              points={{60,-20},{68,-20}},
              color={0,127,255},
              thickness=1));
          connect(senT.port_a, vol.ports[2]) annotation (Line(
              points={{40,-20},{28,-20},{28,-6}},
              color={0,127,255},
              thickness=1));
          connect(realExpression.y, conPI.Mea) annotation (Line(
              points={{-79,0},{-70,0},{-70,44},{-64,44}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400, __Dymola_NumberOfIntervals=4000));
        end conPI;
      end Examples;
    end Control;

    package FlowMover "\"Component used for modelling fans and pumps\""
      model VariableSpeedMover
        "the component contains both the variable speed fan/pump and the controller"
        import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
        extends BaseClasses.FlowMover(withoutMotor(VarSpeFloMov(riseTime=240)));
        parameter Real k(min=0, unit="1") = 1 "Gain of controller";
        parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
          "Time constant of Integrator block";

        BuildingControlEmulator.Devices.Control.conPI variableSpeed
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Modelica.Blocks.Interfaces.RealInput SetPoi
          "Connector of setpoint input signal"
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealInput Mea
          "Connector of measurement input signal"
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
      equation
        connect(withoutMotor.port_a, temEnt.port_b) annotation (Line(
            points={{-18,0},{-60,0}},
            color={0,127,255},
            thickness=1));
        connect(temEnt.port_a, port_a) annotation (Line(
            points={{-80,0},{-100,0}},
            color={0,127,255},
            thickness=1));
        connect(withoutMotor.port_b, temLea.port_a) annotation (Line(
            points={{2,0},{30,0}},
            color={0,127,255},
            thickness=1));
        connect(temLea.port_b, masFloRat.port_a) annotation (Line(
            points={{50,0},{60,0}},
            color={0,127,255},
            thickness=1));
        connect(masFloRat.port_b, port_b) annotation (Line(
            points={{80,0},{100,0}},
            color={0,127,255},
            thickness=1));
        connect(preEnt.port, temEnt.port_b) annotation (Line(
            points={{-42,-20},{-42,0},{-60,0}},
            color={0,127,255},
            thickness=1));
        connect(preLea.port, temLea.port_a) annotation (Line(
            points={{20,-20},{20,0},{30,0}},
            color={0,127,255},
            thickness=1));
        connect(withoutMotor.P, P) annotation (Line(
            points={{3,6},{12,6},{20,6},{20,40},{110,40}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(variableSpeed.y, withoutMotor.u) annotation (Line(
            points={{-39,50},{-30,50},{-30,6},{-19,6}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(On, variableSpeed.On) annotation (Line(
            points={{-120,60},{-68,60},{-68,56},{-62,56}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(variableSpeed.SetPoi, SetPoi) annotation (Line(
            points={{-62,50},{-72,50},{-78,50},{-78,20},{-120,20}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(variableSpeed.Mea, Mea) annotation (Line(
            points={{-62,44},{-66,44},{-66,16},{-56,16},{-56,-60},{-120,-60}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        annotation (Icon(graphics={
              Polygon(points={{-40,60},{-40,-60},{60,0},{-40,60}}, lineColor={28,108,
                    200}),
              Ellipse(
                extent={{-66,74},{60,-74}},
                lineColor={28,108,200},
                lineThickness=0.5),
              Text(
                extent={{-30,24},{28,-28}},
                lineColor={28,108,200},
                textString="V")}));
      end VariableSpeedMover;

      model VAVSupplyFan
        "the component contains both the variable speed fan/pump and the controller"
        extends BaseClasses.FlowMover;
        parameter Real k(min=0, unit="1") = 1 "Gain of controller";
        parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
          "Time constant of Integrator block";
        parameter Modelica.Units.SI.Time waitTime(min=0) = 0
          "Wait time before transition fires";
        parameter Real SpeRat
            "Speed ratio";
        parameter Integer numTemp(min=1) = 1
            "The size of the temeprature vector";
        Control.VAVDualFanControl variableSpeed(k=k, Ti=Ti,
          waitTime=waitTime)
          annotation (Placement(transformation(extent={{-60,44},{-40,64}})));
        Modelica.Blocks.Interfaces.RealInput PreSetPoi
          "Connector of setpoint input signal"
          annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
        Modelica.Blocks.Interfaces.RealInput PreMea
          "Connector of measurement input signal"
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealOutput yRet "Output signal connector"
          annotation (Placement(transformation(extent={{100,-92},{120,-72}})));
        Control.TempCheck tempCheck(numTemp=numTemp)
          annotation (Placement(transformation(extent={{-92,-50},{-72,-30}})));
        Modelica.Blocks.Interfaces.RealInput Temp[numTemp]
          "Connector of setpoint input signal"
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Interfaces.RealInput CooTempSetPoi[numTemp]
          "Connector of setpoint input signal"
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
        Modelica.Blocks.Interfaces.RealInput HeaTempSetPoi[numTemp]
          "Connector of setpoint input signal"
          annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
        Buildings.Utilities.IO.SignalExchange.Overwrite oveSpeSupFan(
            description="AHU supply fan speed control signal", u(
            min=0,
            max=1,
            unit="1"))
          annotation (Placement(transformation(extent={{-26,44},{-6,64}})));
        Modelica.Blocks.Math.Gain gain(k=SpeRat)
          annotation (Placement(transformation(extent={{16,50},{24,58}})));
      equation
        connect(withoutMotor.port_a, temEnt.port_b) annotation (Line(
            points={{-18,0},{-60,0}},
            color={0,140,72},
            thickness=0.5));
        connect(temEnt.port_a, port_a) annotation (Line(
            points={{-80,0},{-100,0}},
            color={0,140,72},
            thickness=0.5));
        connect(withoutMotor.port_b, temLea.port_a) annotation (Line(
            points={{2,0},{30,0}},
            color={0,140,72},
            thickness=0.5));
        connect(temLea.port_b, masFloRat.port_a) annotation (Line(
            points={{50,0},{60,0}},
            color={0,140,72},
            thickness=0.5));
        connect(masFloRat.port_b, port_b) annotation (Line(
            points={{80,0},{100,0}},
            color={0,140,72},
            thickness=0.5));
        connect(preEnt.port, temEnt.port_b) annotation (Line(
            points={{-42,-20},{-42,0},{-60,0}},
            color={0,140,72},
            thickness=0.5));
        connect(preLea.port, temLea.port_a) annotation (Line(
            points={{20,-20},{20,0},{30,0}},
            color={0,140,72},
            thickness=0.5));
        connect(withoutMotor.P, P) annotation (Line(
            points={{3,6},{12,6},{20,6},{20,40},{110,40}},
            color={0,0,127}));
        connect(On, variableSpeed.On) annotation (Line(
            points={{-120,60},{-62,60}},
            color={255,0,255}));
        connect(variableSpeed.SetPoi, PreSetPoi) annotation (Line(
            points={{-62,56},{-80,56},{-80,20},{-120,20}},
            color={0,0,127}));
        connect(variableSpeed.Mea, PreMea) annotation (Line(
            points={{-62,52},{-66,52},{-66,16},{-56,16},{-56,-100},{-120,-100}},
            color={0,0,127}));
        connect(tempCheck.Temp, Temp) annotation (Line(
            points={{-94,-40},{-100,-40},{-100,-60},{-120,-60}},
            color={0,0,127}));
        connect(tempCheck.On, variableSpeed.CyclingOn) annotation (Line(
            points={{-71,-40},{-68,-40},{-68,48},{-62,48}},
            color={255,0,255}));
        connect(tempCheck.CooSetPoi, CooTempSetPoi) annotation (Line(
            points={{-94,-34},{-98,-34},{-98,-20},{-120,-20}},
            color={0,0,127}));
        connect(tempCheck.HeaSetPoi, HeaTempSetPoi) annotation (Line(
            points={{-94,-46},{-98,-46},{-98,-60},{-60,-60},{-60,34},{-88,34},{-88,
                100},{-120,100}},
            color={0,0,127}));
        connect(variableSpeed.ySup, oveSpeSupFan.u) annotation (Line(points={{-39,54},
                {-28,54}},                                 color={0,0,127}));
        connect(oveSpeSupFan.y, withoutMotor.u) annotation (Line(points={{-5,54},
                {2,54},{2,26},{-30,26},{-30,6},{-19,6}},     color={0,0,127}));
        connect(oveSpeSupFan.y, gain.u)
          annotation (Line(points={{-5,54},{15.2,54}}, color={0,0,127}));
        connect(gain.y, yRet) annotation (Line(points={{24.4,54},{32,54},{32,
                -82},{110,-82}}, color={0,0,127}));
        annotation (Icon(graphics={
              Polygon(points={{-40,60},{-40,-60},{60,0},{-40,60}}, lineColor={28,108,
                    200}),
              Ellipse(
                extent={{-66,74},{60,-74}},
                lineColor={28,108,200},
                lineThickness=0.5),
              Text(
                extent={{-30,24},{28,-28}},
                lineColor={28,108,200},
                textString="V"),
              Text(
                extent={{-152,106},{148,146}},
                textString="%name",
                textColor={0,0,255})}));
      end VAVSupplyFan;

      package BaseClasses "\"Base classes for modelling fans or pumps\""
        model WithoutMotor
          "Model for fans or pumps where motors are not explicitly modelled"
          replaceable package Medium = Modelica.Media.Interfaces.PartialMedium "Medium for the fluid";
          parameter Real HydEff[:] "Hydraulic efficiency";
          parameter Real MotEff[:] "Motor efficiency";
          parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]
            "Volume flow rate curve";
          parameter Modelica.Units.SI.Pressure PreCur[:] "Pressure curve";
          parameter Modelica.Units.SI.Time TimCon "Time constant for the fluid";
          Buildings.Fluid.Movers.SpeedControlled_y VarSpeFloMov(
            redeclare package Medium = Medium,
            per(
              pressure(V_flow=VolFloCur, dp=PreCur),
              hydraulicEfficiency(eta=HydEff, V_flow=VolFloCur),
              motorEfficiency(eta=MotEff, V_flow=VolFloCur)),
            tau=TimCon,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            use_inputFilter=false)
                        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium = Medium)
            "Fluid connector a (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium = Medium)
            "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{90,-10},{110,10}})));

          Modelica.Blocks.Interfaces.RealInput u "control signal"
            annotation (Placement(transformation(extent={{-120,50},{-100,70}})));
          Modelica.Blocks.Interfaces.RealOutput P "Electrical power consumed"
            annotation (Placement(transformation(extent={{100,50},{120,70}})));
          Modelica.Blocks.Interfaces.RealOutput Rat
            "Actual normalised pump speed that is used for computations"
            annotation (Placement(transformation(extent={{100,-70},{120,-50}})));
        equation
          connect(VarSpeFloMov.port_a, port_a)
            annotation (Line(
              points={{-10,0},{-10,0},{-100,0}},
              color={0,140,72},
              thickness=0.5));
          connect(VarSpeFloMov.port_b, port_b)
            annotation (Line(
              points={{10,0},{56,0},{100,0}},
              color={0,140,72},
              thickness=0.5));
          connect(VarSpeFloMov.P, P) annotation (Line(
              points={{11,9},{40,9},{40,60},{110,60}},
              color={0,0,127}));
          connect(VarSpeFloMov.y_actual, Rat) annotation (Line(
              points={{11,7},{40,7},{40,-60},{110,-60}},
              color={0,0,127}));
          connect(u, VarSpeFloMov.y) annotation (Line(points={{-110,60},{0,60},
                  {0,12}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Polygon(points={{-40,60},{-40,-60},{60,0},{-40,60}}, lineColor={28,108,
                      200}),
                Ellipse(
                  extent={{-66,74},{60,-74}},
                  lineColor={28,108,200},
                  lineThickness=0.5),
                Text(
                  extent={{-30,24},{28,-28}},
                  lineColor={28,108,200},
                  textString="NoMotor"),
                Text(
                  extent={{-150,108},{150,148}},
                  textString="%name",
                  textColor={0,0,255})}),                                Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end WithoutMotor;

        partial model FlowMover
          replaceable package Medium = Modelica.Media.Interfaces.PartialMedium "Medium for the fluid";
          parameter Real HydEff[:] "Hydraulic efficiency";
          parameter Real MotEff[:] "Motor efficiency";
          parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]
            "Volume flow rate curve";
          parameter Modelica.Units.SI.Pressure PreCur[:] "Pressure curve";
          parameter Modelica.Units.SI.Time TimCon "Time constant for the fluid";
          WithoutMotor             withoutMotor(
            redeclare package Medium = Medium,
            HydEff=HydEff,
            MotEff=MotEff,
            VolFloCur=VolFloCur,
            PreCur=PreCur,
            TimCon=TimCon)
            annotation (Placement(transformation(extent={{-18,-10},{2,10}})));
          Modelica.Fluid.Sensors.TemperatureTwoPort temEnt(redeclare package
              Medium =
                Medium)
            annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
          Modelica.Fluid.Sensors.TemperatureTwoPort temLea(redeclare package
              Medium =
                Medium)
            annotation (Placement(transformation(extent={{30,-10},{50,10}})));
          Modelica.Fluid.Sensors.MassFlowRate masFloRat(redeclare package
              Medium =
                Medium)
            annotation (Placement(transformation(extent={{60,-10},{80,10}})));
          Modelica.Fluid.Sensors.Pressure preEnt(redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{-32,-20},{-52,-40}})));
          Modelica.Fluid.Sensors.Pressure preLea(redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{30,-20},{10,-40}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium = Medium)
            "Fluid connector a (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium = Medium)
            "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{90,-10},{110,10}})));
          Modelica.Blocks.Interfaces.RealOutput P "Electrical power consumed"
            annotation (Placement(transformation(extent={{100,30},{120,50}})));
          Modelica.Blocks.Interfaces.BooleanInput On "On-off signal" annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
          Modelica.Blocks.Interfaces.RealOutput Rat
            "Actual normalised pump speed that is used for computations"
            annotation (Placement(transformation(extent={{100,-70},{120,-50}})));
        equation
          connect(withoutMotor.port_a, temEnt.port_b) annotation (Line(
              points={{-18,0},{-60,0}},
              color={0,127,255},
              thickness=1));
          connect(temEnt.port_a, port_a) annotation (Line(
              points={{-80,0},{-100,0}},
              color={0,127,255},
              thickness=1));
          connect(withoutMotor.port_b, temLea.port_a) annotation (Line(
              points={{2,0},{30,0}},
              color={0,127,255},
              thickness=1));
          connect(temLea.port_b, masFloRat.port_a) annotation (Line(
              points={{50,0},{60,0}},
              color={0,127,255},
              thickness=1));
          connect(masFloRat.port_b, port_b) annotation (Line(
              points={{80,0},{100,0}},
              color={0,127,255},
              thickness=1));
          connect(preEnt.port, temEnt.port_b) annotation (Line(
              points={{-42,-20},{-42,0},{-60,0}},
              color={0,127,255},
              thickness=1));
          connect(preLea.port, temLea.port_a) annotation (Line(
              points={{20,-20},{20,0},{30,0}},
              color={0,127,255},
              thickness=1));
          connect(withoutMotor.P, P) annotation (Line(
              points={{3,6},{12,6},{20,6},{20,40},{110,40}},
              color={0,0,127}));
          connect(withoutMotor.Rat, Rat) annotation (Line(
              points={{3,-6},{12,-6},{12,-60},{110,-60}},
              color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Polygon(points={{-40,60},{-40,-60},{60,0},{-40,60}}, lineColor={28,108,
                      200}),
                Ellipse(
                  extent={{-66,74},{60,-74}},
                  lineColor={28,108,200})}), Diagram(coordinateSystem(
                  preserveAspectRatio=false)));
        end FlowMover;

        package Examples "\"Examples to test the modules in the base classes\""
          extends Modelica.Icons.ExamplesPackage;

          model VariableSpeed "This example models the fluild loop with a variable speed fan/pump"
            extends Modelica.Icons.Example;
            package Medium = Buildings.Media.Water "Medium model";
            Buildings.Obsolete.Fluid.Sources.FixedBoundary sin(
              redeclare package Medium = Medium,
              nPorts=2,
              p=100000,
              T=293.15) annotation (Placement(transformation(extent={{-96,8},{-76,28}})));
            BuildingControlEmulator.Devices.FlowMover.BaseClasses.WithoutMotor Pum(
              redeclare package Medium = Medium,
              TimCon=10,
              HydEff={0.7,0.7,0.7,0.7,0.7},
              MotEff={0.7,0.7,0.7,0.7,0.7},
              PreCur(displayUnit="Pa") = {300,250,200,150,100},
              VolFloCur={0.3,0.5,0.7,0.9,1.5}) annotation (Placement(
                  transformation(extent={{-40,10},{-20,30}})));
            Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
              redeclare package Medium = Medium,
              dpValve_nominal=50,
              m_flow_nominal=1*1000)
              annotation (Placement(transformation(extent={{30,10},{50,30}})));
            Buildings.Fluid.FixedResistances.PressureDrop res(
              m_flow_nominal=1*1000,
              dp_nominal=50,
              redeclare package Medium = Medium) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={70,-20})));
            Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare
                package Medium =
                  Medium) annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=90,
                  origin={0,-32})));
            Buildings.Controls.Continuous.LimPID conPID(
              controllerType=Modelica.Blocks.Types.SimpleController.PI,
              k=1,
              Ti=60,
              xi_start=0)
              annotation (Placement(transformation(extent={{34,-26},{46,-14}})));
            Modelica.Blocks.Sources.Constant con(k=50)
              annotation (Placement(transformation(extent={{14,-26},{26,-14}})));
            Modelica.Blocks.Sources.Ramp ramp(
              duration=60,
              startTime=50,
              height=-0.5,
              offset=1) annotation (Placement(transformation(extent={{-16,60},{4,80}})));
          equation
            connect(sin.ports[1], Pum.port_a) annotation (Line(
                points={{-76,20},{-76,20},{-40,20}},
                color={0,127,255},
                thickness=1));
            connect(Pum.port_b, val.port_a) annotation (Line(
                points={{-20,20},{30,20}},
                color={0,127,255},
                thickness=1));
            connect(val.port_b, res.port_a) annotation (Line(
                points={{50,20},{70,20},{70,-10}},
                color={0,127,255},
                thickness=1));
            connect(res.port_b, sin.ports[2]) annotation (Line(
                points={{70,-30},{70,-30},{70,-60},{-74,-60},{-74,16},{-76,16}},
                color={0,127,255},
                thickness=1));

            connect(senRelPre.p_rel, conPID.u_m) annotation (Line(
                points={{9,-32},{40,-32},{40,-27.2}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(con.y, conPID.u_s) annotation (Line(
                points={{26.6,-20},{28,-20},{32.8,-20}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(conPID.y, Pum.u) annotation (Line(
                points={{46.6,-20},{50,-20},{50,-48},{-50,-48},{-50,26},{-41,26}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(ramp.y, val.y) annotation (Line(
                points={{5,70},{22,70},{40,70},{40,32}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(senRelPre.port_a, val.port_a) annotation (Line(
                points={{0,-22},{0,20},{30,20}},
                color={0,127,255},
                thickness=1));
            connect(senRelPre.port_b, res.port_a) annotation (Line(
                points={{0,-42},{0,-52},{60,-52},{60,20},{70,20},{70,-10}},
                color={0,127,255},
                thickness=1));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=100),
              Documentation(info="<html>
<p>This example models the fluild loop with a variable speed fan/pump</p>
</html>"));
          end VariableSpeed;

          model ConstantSpeed "This example models the fluild loop with a constant speed fan/pump"
            extends Modelica.Icons.Example;
            package Medium = Buildings.Media.Water "Medium model";
            Buildings.Obsolete.Fluid.Sources.FixedBoundary sin(
              redeclare package Medium = Medium,
              nPorts=2,
              p=100000,
              T=293.15) annotation (Placement(transformation(extent={{-102,8},{-82,28}})));
            BuildingControlEmulator.Devices.FlowMover.BaseClasses.WithoutMotor PumSec(
              redeclare package Medium = Medium,
              TimCon=10,
              HydEff={0.7,0.7,0.7,0.7,0.7},
              MotEff={0.7,0.7,0.7,0.7,0.7},
              PreCur(displayUnit="Pa") = {300,250,200,150,100},
              VolFloCur={0.3,0.5,0.7,0.9,1.5})
              annotation (Placement(transformation(extent={{-18,10},{2,30}})));
            Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
              redeclare package Medium = Medium,
              dpValve_nominal=50,
              m_flow_nominal=1*1000)
              annotation (Placement(transformation(extent={{40,10},{60,30}})));
            Buildings.Fluid.FixedResistances.PressureDrop res(
              m_flow_nominal=1*1000,
              dp_nominal=50,
              redeclare package Medium = Medium) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={88,-20})));
            Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare
                package Medium =
                  Medium) annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=90,
                  origin={12,-32})));
            Buildings.Controls.Continuous.LimPID conPID(
              controllerType=Modelica.Blocks.Types.SimpleController.PI,
              k=1,
              Ti=60,
              xi_start=0)
              annotation (Placement(transformation(extent={{42,-26},{54,-14}})));
            Modelica.Blocks.Sources.Constant con(k=50)
              annotation (Placement(transformation(extent={{24,-26},{36,-14}})));
            Modelica.Blocks.Sources.Ramp ramp(
              duration=60,
              startTime=50,
              height=-0.5,
              offset=1) annotation (Placement(transformation(extent={{-16,60},{4,80}})));
            BuildingControlEmulator.Devices.FlowMover.BaseClasses.WithoutMotor PumPri(
              redeclare package Medium = Medium,
              TimCon=10,
              HydEff={0.7,0.7,0.7,0.7,0.7},
              MotEff={0.7,0.7,0.7,0.7,0.7},
              PreCur(displayUnit="Pa") = {300,250,200,150,100},
              VolFloCur={0.3,0.5,0.7,0.9,1.5}) annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=-90,
                  origin={-80,-56})));
            Modelica.Fluid.Sensors.MassFlowRate massFlowRate(redeclare package
                Medium =
                  Medium) annotation (Placement(transformation(
                  extent={{-8,-8},{8,8}},
                  rotation=-90,
                  origin={-50,-34})));
            Modelica.Blocks.Sources.Step step(
              startTime=30,
              height=1,
              offset=0)
              annotation (Placement(transformation(extent={{-6,-74},{-26,-54}})));
            Buildings.Fluid.FixedResistances.PressureDrop res1(
              m_flow_nominal=1*1000,
              redeclare package Medium = Medium,
              dp_nominal=50)                     annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={-80,-22})));
            Buildings.Fluid.FixedResistances.Junction jun(
              redeclare package Medium = Medium,
              m_flow_nominal={500,500,1000},
              dp_nominal={12.5,12.5,25},
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
              annotation (Placement(transformation(extent={{-60,10},{-40,30}})));
            Buildings.Fluid.FixedResistances.Junction jun1(
              redeclare package Medium = Medium,
              m_flow_nominal={500,500,1000},
              dp_nominal={12.5,12.5,25},
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
              annotation (Placement(transformation(extent={{-40,-70},{-60,-90}})));
            inner Modelica.Fluid.System system
              annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
          equation
            connect(PumSec.port_b, val.port_a) annotation (Line(
                points={{2,20},{40,20}},
                color={0,127,255},
                thickness=1));
            connect(val.port_b,res. port_a) annotation (Line(
                points={{60,20},{88,20},{88,-10}},
                color={0,127,255},
                thickness=1));
            connect(senRelPre.p_rel,conPID. u_m) annotation (Line(
                points={{21,-32},{48,-32},{48,-27.2}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(con.y,conPID. u_s) annotation (Line(
                points={{36.6,-20},{40.8,-20}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(conPID.y, PumSec.u) annotation (Line(
                points={{54.6,-20},{70,-20},{70,-48},{-30,-48},{-30,26},{-19,26}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(ramp.y,val. y) annotation (Line(
                points={{5,70},{22,70},{50,70},{50,32}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(senRelPre.port_a, val.port_a) annotation (Line(
                points={{12,-22},{12,20},{40,20}},
                color={0,127,255},
                thickness=1));
            connect(senRelPre.port_b, res.port_a) annotation (Line(
                points={{12,-42},{12,-62},{74,-62},{74,20},{88,20},{88,-10}},
                color={0,127,255},
                thickness=1));
            connect(step.y, PumPri.u) annotation (Line(
                points={{-27,-64},{-56,-64},{-56,-72},{-74,-72},{-74,-67}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(PumPri.port_b, res1.port_b) annotation (Line(
                points={{-80,-46},{-80,-32}},
                color={0,127,255},
                thickness=1));
            connect(res1.port_a, sin.ports[1]) annotation (Line(
                points={{-80,-12},{-80,20},{-82,20}},
                color={0,127,255},
                thickness=1));
            connect(jun.port_2, PumSec.port_a) annotation (Line(
                points={{-40,20},{-18,20}},
                color={0,127,255},
                thickness=1));
            connect(jun.port_1, sin.ports[2]) annotation (Line(
                points={{-60,20},{-82,20},{-82,16}},
                color={0,127,255},
                thickness=1));
            connect(PumPri.port_a, jun1.port_2) annotation (Line(
                points={{-80,-66},{-80,-80},{-60,-80}},
                color={0,127,255},
                thickness=1));
            connect(jun1.port_1, res.port_b) annotation (Line(
                points={{-40,-80},{88,-80},{88,-30}},
                color={0,127,255},
                thickness=1));
            connect(jun.port_3, massFlowRate.port_a) annotation (Line(
                points={{-50,10},{-50,10},{-50,-26}},
                color={0,127,255},
                thickness=1));
            connect(massFlowRate.port_b, jun1.port_3) annotation (Line(
                points={{-50,-42},{-50,-70}},
                color={0,127,255},
                thickness=1));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=100),
              Documentation(info="<html>
<p>This example models the fluild loop with a constant speed fan/pump</p>
</html>"));
          end ConstantSpeed;

          model DualFan "the example to model the air loop with two fans"
            import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
            extends Modelica.Icons.Example;
            package Medium = Buildings.Media.Water "Medium model";
            Buildings.Obsolete.Fluid.Sources.FixedBoundary sin(
              redeclare package Medium = Medium,
              nPorts=1,
              p=100000,
              T=293.15) annotation (Placement(transformation(extent={{-96,10},{-76,30}})));
            BuildingControlEmulator.Devices.FlowMover.BaseClasses.WithoutMotor Pum(
              redeclare package Medium = Medium,
              TimCon=10,
              HydEff={0.7,0.7,0.7,0.7,0.7},
              MotEff={0.7,0.7,0.7,0.7,0.7},
              PreCur(displayUnit="Pa") = {300,250,200,150,100},
              VolFloCur={0.3,0.5,0.7,0.9,1.5})
              annotation (Placement(transformation(extent={{-40,10},{-20,30}})));
            Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
              redeclare package Medium = Medium,
              m_flow_nominal=1*1000,
              dpValve_nominal=100)
              annotation (Placement(transformation(extent={{30,10},{50,30}})));
            Buildings.Fluid.FixedResistances.PressureDrop res(
              m_flow_nominal=1*1000,
              redeclare package Medium = Medium,
              dp_nominal=100)                    annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={70,-20})));
            Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare
                package Medium =
                  Medium) annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=90,
                  origin={0,-32})));
            Buildings.Controls.Continuous.LimPID conPID(
              controllerType=Modelica.Blocks.Types.SimpleController.PI,
              k=1,
              Ti=60,
              xi_start=0)
              annotation (Placement(transformation(extent={{34,-26},{46,-14}})));
            Modelica.Blocks.Sources.Constant con(k=50)
              annotation (Placement(transformation(extent={{14,-26},{26,-14}})));
            Modelica.Blocks.Sources.Ramp ramp(
              duration=60,
              startTime=50,
              height=-0.5,
              offset=1) annotation (Placement(transformation(extent={{-16,60},{4,80}})));
            Buildings.Obsolete.Fluid.Sources.FixedBoundary sin1(
              redeclare package Medium = Medium,
              nPorts=1,
              p=100000,
              T=293.15)
              annotation (Placement(transformation(extent={{-96,-90},{-76,-70}})));
            BuildingControlEmulator.Devices.FlowMover.BaseClasses.WithoutMotor Pum1(
              redeclare package Medium = Medium,
              TimCon=10,
              HydEff={0.7,0.7,0.7,0.7,0.7},
              MotEff={0.7,0.7,0.7,0.7,0.7},
              PreCur(displayUnit="Pa") = {300,250,200,150,100},
              VolFloCur={0.3,0.5,0.7,0.9,1.5})
              annotation (Placement(transformation(extent={{-18,-90},{-38,-70}})));
            Modelica.Blocks.Math.Gain gain(k=0.9)
              annotation (Placement(transformation(extent={{10,-68},{2,-60}})));
            Modelica.Fluid.Sensors.Pressure pressure(redeclare package Medium = Medium)
              annotation (Placement(transformation(extent={{58,42},{78,62}})));
          equation
            connect(sin.ports[1], Pum.port_a) annotation (Line(
                points={{-76,20},{-76,20},{-40,20}},
                color={0,127,255},
                thickness=1));
            connect(Pum.port_b, val.port_a) annotation (Line(
                points={{-20,20},{30,20}},
                color={0,127,255},
                thickness=1));
            connect(val.port_b, res.port_a) annotation (Line(
                points={{50,20},{70,20},{70,-10}},
                color={0,127,255},
                thickness=1));

            connect(senRelPre.p_rel, conPID.u_m) annotation (Line(
                points={{9,-32},{40,-32},{40,-27.2}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(con.y, conPID.u_s) annotation (Line(
                points={{26.6,-20},{28,-20},{32.8,-20}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(conPID.y, Pum.u) annotation (Line(
                points={{46.6,-20},{50,-20},{50,-48},{-50,-48},{-50,26},{-41,26}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(ramp.y, val.y) annotation (Line(
                points={{5,70},{22,70},{40,70},{40,32}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(senRelPre.port_a, val.port_a) annotation (Line(
                points={{0,-22},{0,20},{30,20}},
                color={0,127,255},
                thickness=1));
            connect(senRelPre.port_b, res.port_a) annotation (Line(
                points={{0,-42},{0,-52},{60,-52},{60,20},{70,20},{70,-10}},
                color={0,127,255},
                thickness=1));
            connect(Pum1.port_b, sin1.ports[1]) annotation (Line(
                points={{-38,-80},{-76,-80}},
                color={0,127,255},
                thickness=1));
            connect(Pum1.port_a, res.port_b) annotation (Line(
                points={{-18,-80},{-18,-80},{70,-80},{70,-30}},
                color={0,127,255},
                thickness=1));
            connect(gain.u, Pum.u) annotation (Line(
                points={{10.8,-64},{32,-64},{32,-48},{-50,-48},{-50,26},{-41,26}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(gain.y, Pum1.u) annotation (Line(
                points={{1.6,-64},{-8,-64},{-8,-74},{-17,-74}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(pressure.port, res.port_a) annotation (Line(
                points={{68,42},{68,36},{56,36},{56,20},{70,20},{70,-10}},
                color={0,127,255},
                thickness=1));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=100),
              Documentation(info="<html>
<p>This example models the fluild loop with a variable speed fan/pump</p>
</html>"));
          end DualFan;
        end Examples;
      end BaseClasses;

      package Control
        model CyclingOn
          "\"Controller for constant speed fans or pumps\""
          parameter Modelica.Units.SI.Time waitTime(min=0) = 0
            "Wait time before transition fires";

          Modelica.StateGraph.StepWithSignal On(nOut=2, nIn=1)
                                                annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=-90,
                origin={56,-44})));
          Modelica.StateGraph.InitialStepWithSignal Off(nIn=2, nOut=1)
                                                        annotation (Placement(
                transformation(
                extent={{-10,10},{10,-10}},
                rotation=-90,
                origin={54,42})));
          inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
            annotation (Placement(transformation(extent={{-80,72},{-60,92}})));
          Modelica.StateGraph.TransitionWithSignal transitionWithSignal(enableTimer=true, waitTime=
               waitTime)
            annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=-90,
                origin={0,-40})));
          Modelica.StateGraph.TransitionWithSignal transitionWithSignal1 annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={54,0})));
          Modelica.Blocks.Interfaces.BooleanInput CyclingOn
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Logical.Not not1
            annotation (Placement(transformation(extent={{-60,-50},{-40,-30}})));
          Modelica.Blocks.Interfaces.BooleanOutput OnSigOut
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
          Modelica.Blocks.Interfaces.BooleanInput OnSigIn
            annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
          Modelica.Blocks.Logical.And and1
            annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
          Modelica.StateGraph.TransitionWithSignal transitionWithSignal2(waitTime=
                waitTime, enableTimer=false)
            annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=-90,
                origin={-22,48})));
          Modelica.Blocks.Logical.Not not2
            annotation (Placement(transformation(extent={{-60,38},{-40,58}})));
        equation
          connect(transitionWithSignal.inPort, On.outPort[1]) annotation (Line(
              points={{-6.66134e-016,-44},{-6.66134e-016,-80},{55.75,-80},{55.75,-54.5}},
              color={0,0,0},
              pattern=LinePattern.Dash));
          connect(transitionWithSignal.outPort, Off.inPort[1]) annotation (Line(
              points={{2.22045e-016,-38.5},{0,-38.5},{0,60},{53.5,60},{53.5,53}},
              color={0,0,0},
              pattern=LinePattern.Dash));

          connect(Off.outPort[1], transitionWithSignal1.inPort) annotation (Line(
              points={{54,31.5},{54,20},{54,4}},
              color={0,0,0},
              pattern=LinePattern.Dash));
          connect(transitionWithSignal1.outPort, On.inPort[1]) annotation (Line(
              points={{54,-1.5},{54,-12},{54,-33},{56,-33}},
              color={0,0,0},
              pattern=LinePattern.Dash));
          connect(not1.y, transitionWithSignal.condition) annotation (Line(
              points={{-39,-40},{-12,-40}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(not1.u, CyclingOn) annotation (Line(
              points={{-62,-40},{-96,-40},{-96,0},{-120,0}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(On.active, OnSigOut) annotation (Line(
              points={{67,-44},{67,-44},{80,-44},{80,0},{110,0}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(and1.u1, OnSigIn) annotation (Line(
              points={{-62,0},{-86,0},{-86,40},{-120,40}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(and1.u2, CyclingOn) annotation (Line(
              points={{-62,-8},{-90,-8},{-90,0},{-120,0}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(and1.y, transitionWithSignal1.condition) annotation (Line(
              points={{-39,0},{-39,0},{-8,0},{42,0}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(transitionWithSignal2.inPort, On.outPort[2]) annotation (Line(
              points={{-22,44},{-22,44},{-22,42},{-22,36},{-22,-96},{56.25,-96},{56.25,
                  -54.5}},
              color={0,0,0},
              pattern=LinePattern.Dash));
          connect(transitionWithSignal2.outPort, Off.inPort[2]) annotation (Line(
              points={{-22,49.5},{-22,49.5},{-22,74},{54.5,74},{54.5,53}},
              color={0,0,0},
              pattern=LinePattern.Dash));
          connect(OnSigIn, not2.u) annotation (Line(
              points={{-120,40},{-86,40},{-86,48},{-62,48}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(not2.y, transitionWithSignal2.condition) annotation (Line(
              points={{-39,48},{-39,48},{-34,48}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,127,255},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-66,50},{62,-48}},
                  lineColor={0,127,255},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="CyclingControl"),
                Text(
                  extent={{-154,102},{146,142}},
                  textString="%name",
                  textColor={0,0,255})}),        Diagram(coordinateSystem(
                  preserveAspectRatio=false)));
        end CyclingOn;

        model VAVDualFanControl
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          parameter Real k(min=0, unit="1") = 1 "Gain of controller";
          parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
            "Time constant of Integrator block";
          parameter Modelica.Units.SI.Time waitTime(min=0) = 0
            "Wait time before transition fires";

          BuildingControlEmulator.Devices.FlowMover.Control.CyclingOn cyclingOn(waitTime=
                waitTime)
            annotation (Placement(transformation(extent={{-60,-40},{-40,-20}})));
          BuildingControlEmulator.Devices.Control.conPI variableSpeed(
            yMin=0.3,                                                 k=k, Ti=Ti,
            conPID(y_reset=1))
            annotation (Placement(transformation(extent={{-60,36},{-40,56}})));
          Modelica.Blocks.Interfaces.BooleanInput On
            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
          Modelica.Blocks.Interfaces.RealInput SetPoi
            "Connector of setpoint input signal"
            annotation (Placement(transformation(extent={{-140,0},{-100,40}})));
          Modelica.Blocks.Interfaces.RealInput Mea
            "Connector of measurement input signal"
            annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));
          BuildingControlEmulator.Devices.Control.Constant constantSpeed
            annotation (Placement(transformation(extent={{-24,-40},{-4,-20}})));
          Modelica.Blocks.Interfaces.RealOutput ySup "Connector of Real output signal"
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
          Modelica.Blocks.Interfaces.BooleanInput CyclingOn
            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
          Modelica.Blocks.Logical.Not not1
            annotation (Placement(transformation(extent={{-62,0},{-42,20}})));
          Buildings.Controls.OBC.CDL.Continuous.Switch swi
            annotation (Placement(transformation(extent={{12,28},{32,48}})));
          Buildings.Controls.OBC.CDL.Continuous.LimitSlewRate ramLim(raisingSlewRate=1/
                120) "Ramp limiter for fan control signal"
            annotation (Placement(transformation(extent={{40,-10},{60,10}})));
          Buildings.Controls.OBC.CDL.Continuous.Limiter lim(uMax=1, uMin=0)
            annotation (Placement(transformation(extent={{66,-10},{86,10}})));
        equation
          connect(variableSpeed.On, On) annotation (Line(
              points={{-62,52},{-80,52},{-80,60},{-120,60}},
              color={255,0,255}));
          connect(variableSpeed.Mea, Mea) annotation (Line(
              points={{-62,40},{-70,40},{-70,-20},{-120,-20}},
              color={0,0,127}));
          connect(cyclingOn.OnSigOut, constantSpeed.On) annotation (Line(points={{-39,-30},
                  {-26,-30}},             color={255,0,255}));
          connect(cyclingOn.CyclingOn, CyclingOn) annotation (Line(
              points={{-62,-30},{-80,-30},{-80,-60},{-120,-60}},
              color={255,0,255}));
          connect(not1.u, On) annotation (Line(
              points={{-64,10},{-80,10},{-80,60},{-120,60}},
              color={255,0,255}));
          connect(not1.y, cyclingOn.OnSigIn) annotation (Line(
              points={{-41,10},{-24,10},{-24,-8},{-80,-8},{-80,-26},{-62,-26}},
              color={255,0,255}));
          connect(variableSpeed.y, swi.u1)
            annotation (Line(points={{-39,46},{10,46}}, color={0,0,127}));
          connect(constantSpeed.y, swi.u3) annotation (Line(points={{-3,-30},{4,-30},{4,
                  30},{10,30}}, color={0,0,127}));
          connect(ramLim.y, lim.u)
            annotation (Line(points={{62,0},{64,0}},   color={0,0,127}));
          connect(lim.y, ySup) annotation (Line(points={{88,0},{110,0}},
                color={0,0,127}));
          connect(ramLim.u, swi.y) annotation (Line(points={{38,0},{36,0},{36,
                  38},{34,38}}, color={0,0,127}));
          connect(SetPoi, variableSpeed.SetPoi) annotation (Line(points={{-120,
                  20},{-74,20},{-74,46},{-62,46}}, color={0,0,127}));
          connect(On, swi.u2) annotation (Line(points={{-120,60},{-80,60},{-80,
                  28},{-20,28},{-20,38},{10,38}}, color={255,0,255}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,127,255},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-66,50},{62,-48}},
                  lineColor={0,127,255},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="VAVDualFanControl"),
                Text(
                  extent={{-154,102},{146,142}},
                  textString="%name",
                  textColor={0,0,255})}),            Diagram(coordinateSystem(
                  preserveAspectRatio=false)),
            experiment(
              StartTime=15638400,
              StopTime=16243200,
              __Dymola_NumberOfIntervals=1440,
              __Dymola_Algorithm="Cvode"));
        end VAVDualFanControl;

        model TempCheck
          "\"Controller for constant speed fans or pumps\""
          parameter Integer numTemp(min=1) = 1
              "The size of the temeprature vector";

          Modelica.Blocks.Interfaces.RealInput Temp[numTemp]
            "Connector of setpoint input signal"
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.BooleanOutput On
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
          Modelica.Blocks.Interfaces.RealInput CooSetPoi[numTemp]
            "Connector of setpoint input signal"
            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
          Modelica.Blocks.Interfaces.RealInput HeaSetPoi[numTemp]
            "Connector of setpoint input signal"
            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
          parameter Modelica.Units.SI.TemperatureDifference dTCycCon = 0.2
            "Temperature difference for trigerring the cycle control";
        algorithm
         for i in 1:numTemp loop
            if (Temp[i] > CooSetPoi[i] + dTCycCon) or (Temp[i] < HeaSetPoi[i] - dTCycCon) then
               On := true;
               break;
             end if;
           On := false;
           end for;

          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,127,255},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-66,50},{62,-48}},
                  lineColor={0,127,255},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  textString="CyclingControl"),
                Text(
                  extent={{-156,106},{144,146}},
                  textString="%name",
                  textColor={0,0,255})}),        Diagram(coordinateSystem(
                  preserveAspectRatio=false)));
        end TempCheck;

        package Examples
            extends Modelica.Icons.ExamplesPackage;
          model CyclingOn
              "This example models the on/off control"
            import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
            extends Modelica.Icons.Example;
            BuildingControlEmulator.Devices.FlowMover.Control.CyclingOn cyclingOn(
                waitTime=5)
              annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
            Modelica.Blocks.Sources.BooleanPulse booleanStep(startTime=0, period=30)
              annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
            Modelica.Blocks.Sources.BooleanStep booleanStep1(startValue=false, startTime=
                  500) annotation (Placement(transformation(extent={{-70,40},{-50,60}})));
          equation
            connect(booleanStep.y, cyclingOn.CyclingOn) annotation (Line(
                points={{-49,0},{-49,0},{-28,0},{-12,0}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(booleanStep1.y, cyclingOn.OnSigIn) annotation (Line(
                points={{-49,50},{-20,50},{-20,4},{-12,4}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                  coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=1000));
          end CyclingOn;

          model DualFan "the example to model the air loop with two fans"
            import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
            extends Modelica.Icons.Example;
            package Medium = Buildings.Media.Water "Medium model";
            Buildings.Fluid.Sources.Boundary_pT sin(
              redeclare package Medium = Medium,
              nPorts=1,
              p=100000,
              T=293.15) annotation (Placement(transformation(extent={{-96,10},{-76,30}})));
            BuildingControlEmulator.Devices.FlowMover.BaseClasses.WithoutMotor Pum(
              redeclare package Medium = Medium,
              TimCon=10,
              HydEff={0.7,0.7,0.7,0.7,0.7},
              MotEff={0.7,0.7,0.7,0.7,0.7},
              PreCur(displayUnit="Pa") = {300,250,200,150,100},
              VolFloCur={0.3,0.5,0.7,0.9,1.5})
              annotation (Placement(transformation(extent={{-50,10},{-30,30}})));
            Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
              redeclare package Medium = Medium,
              m_flow_nominal=1*1000,
              dpValve_nominal=100)
              annotation (Placement(transformation(extent={{30,10},{50,30}})));
            Buildings.Fluid.FixedResistances.PressureDrop res(
              m_flow_nominal=1*1000,
              redeclare package Medium = Medium,
              dp_nominal=100)                    annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={70,-20})));
            Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare
                package Medium =
                  Medium) annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=90,
                  origin={0,-32})));
            Modelica.Blocks.Sources.Constant con(k=50)
              annotation (Placement(transformation(extent={{-86,-26},{-74,-14}})));
            Modelica.Blocks.Sources.Ramp ramp(
              duration=60,
              startTime=50,
              height=-0.5,
              offset=1) annotation (Placement(transformation(extent={{-16,60},{4,80}})));
            Buildings.Fluid.Sources.Boundary_pT sin1(
              redeclare package Medium = Medium,
              nPorts=1,
              p=100000,
              T=293.15) annotation (Placement(transformation(extent={{-96,-90},{-76,-70}})));
            BuildingControlEmulator.Devices.FlowMover.BaseClasses.WithoutMotor Pum1(
              redeclare package Medium = Medium,
              TimCon=10,
              HydEff={0.7,0.7,0.7,0.7,0.7},
              MotEff={0.7,0.7,0.7,0.7,0.7},
              PreCur(displayUnit="Pa") = {300,250,200,150,100},
              VolFloCur={0.3,0.5,0.7,0.9,1.5})
              annotation (Placement(transformation(extent={{-30,-90},{-50,-70}})));
            Modelica.Fluid.Sensors.Pressure pressure(redeclare package Medium = Medium)
              annotation (Placement(transformation(extent={{58,42},{78,62}})));
            BuildingControlEmulator.Devices.FlowMover.Control.VAVDualFanControl
              vAVDualFanControl(
              k=1,
              Ti=60,
              waitTime=10,
              SpeRat=0.9)
              annotation (Placement(transformation(extent={{-50,-34},{-30,-14}})));
            Modelica.Blocks.Sources.BooleanStep booleanStep(startValue=false, startTime=
                  200) annotation (Placement(transformation(extent={{-92,60},{-72,80}})));
            Modelica.Blocks.Sources.BooleanPulse booleanStep1(startTime=0, period=30)
              annotation (Placement(transformation(extent={{-98,-60},{-78,-40}})));
          equation
            connect(sin.ports[1], Pum.port_a) annotation (Line(
                points={{-76,20},{-76,20},{-50,20}},
                color={0,127,255},
                thickness=1));
            connect(Pum.port_b, val.port_a) annotation (Line(
                points={{-30,20},{30,20}},
                color={0,127,255},
                thickness=1));
            connect(val.port_b, res.port_a) annotation (Line(
                points={{50,20},{70,20},{70,-10}},
                color={0,127,255},
                thickness=1));

            connect(ramp.y, val.y) annotation (Line(
                points={{5,70},{22,70},{40,70},{40,32}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(senRelPre.port_a, val.port_a) annotation (Line(
                points={{0,-22},{0,20},{30,20}},
                color={0,127,255},
                thickness=1));
            connect(senRelPre.port_b, res.port_a) annotation (Line(
                points={{0,-42},{0,-52},{60,-52},{60,20},{70,20},{70,-10}},
                color={0,127,255},
                thickness=1));
            connect(Pum1.port_b, sin1.ports[1]) annotation (Line(
                points={{-50,-80},{-62,-80},{-76,-80}},
                color={0,127,255},
                thickness=1));
            connect(Pum1.port_a, res.port_b) annotation (Line(
                points={{-30,-80},{-30,-80},{70,-80},{70,-30}},
                color={0,127,255},
                thickness=1));
            connect(pressure.port, res.port_a) annotation (Line(
                points={{68,42},{68,36},{56,36},{56,20},{70,20},{70,-10}},
                color={0,127,255},
                thickness=1));
            connect(con.y, vAVDualFanControl.SetPoi) annotation (Line(
                points={{-73.4,-20},{-62,-20},{-62,-22},{-52,-22}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(senRelPre.p_rel, vAVDualFanControl.Mea) annotation (Line(
                points={{9,-32},{26,-32},{26,-58},{-62,-58},{-62,-26},{-52,-26}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(booleanStep.y, vAVDualFanControl.On) annotation (Line(
                points={{-71,70},{-60,70},{-60,-18},{-52,-18}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(vAVDualFanControl.ySup, Pum.u) annotation (Line(
                points={{-29,-20},{-12,-20},{-12,40},{-56,40},{-56,26},{-51,26}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(Pum1.u, vAVDualFanControl.yRet) annotation (Line(
                points={{-29,-74},{-12,-74},{-12,-28},{-29,-28}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(booleanStep1.y, vAVDualFanControl.CyclingOn) annotation (Line(
                points={{-77,-50},{-58,-50},{-58,-30},{-52,-30}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=1000),
              Documentation(info="<html>
<p>This example models the fluild loop with a variable speed fan/pump</p>
</html>"));
          end DualFan;

          model TempCheck
            "This example models the logic to check if any element of the temperature vector is beyond the band"
            import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
            extends Modelica.Icons.Example;
            BuildingControlEmulator.Devices.FlowMover.Control.TempCheck tempCheck(numTemp=
                 3) annotation (Placement(transformation(extent={{-8,30},{12,50}})));
            Modelica.Blocks.Sources.Sine sine(f=1/60)
              annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
            Modelica.Blocks.Sources.Sine sine1(f=1/60, phase=1.9198621771938)
              annotation (Placement(transformation(extent={{-80,-50},{-60,-30}})));
            Modelica.Blocks.Sources.Sine sine2(f=1/60, phase=0.34906585039887)
              annotation (Placement(transformation(extent={{-80,-90},{-60,-70}})));
            Modelica.Blocks.Sources.Constant const[3](k=0)
              annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
            Modelica.Blocks.Sources.Constant const1[3](k=-0.5)
              annotation (Placement(transformation(extent={{-32,-92},{-12,-72}})));
          equation
            connect(sine.y, tempCheck.Temp[1]) annotation (Line(
                points={{-59,0},{-46,0},{-24,0},{-24,38.6667},{-10,38.6667}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(sine1.y, tempCheck.Temp[2]) annotation (Line(
                points={{-59,-40},{-34,-40},{-34,40},{-10,40}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(sine2.y, tempCheck.Temp[3]) annotation (Line(
                points={{-59,-80},{-44,-80},{-44,41.3333},{-10,41.3333}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(const.y, tempCheck.CooSetPoi) annotation (Line(
                points={{-59,70},{-20,70},{-20,46},{-10,46}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(const1.y, tempCheck.HeaSetPoi) annotation (Line(
                points={{-11,-82},{10,-82},{10,0},{-20,0},{-20,34},{-10,34}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                  coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=1000));
          end TempCheck;
        end Examples;
      end Control;

      package Examples
          extends Modelica.Icons.ExamplesPackage;
        model VariableSpeedFlowMover
          "This example models the fluild loop with a variable speed fan/pump"
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium model";
          Buildings.Fluid.Sources.Boundary_pT sin(
            redeclare package Medium = Medium,
            nPorts=2,
            p=100000,
            T=293.15) annotation (Placement(transformation(extent={{-96,8},{-76,28}})));
          VariableSpeedMover                                                 Pum(
            redeclare package Medium = Medium,
            TimCon=10,
            HydEff={0.7,0.7,0.7,0.7,0.7},
            MotEff={0.7,0.7,0.7,0.7,0.7},
            PreCur(displayUnit="Pa") = {300,250,200,150,100},
            VolFloCur={0.3,0.5,0.7,0.9,1.5})
            annotation (Placement(transformation(extent={{-30,10},{-10,30}})));
          Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
            redeclare package Medium = Medium,
            dpValve_nominal=50,
            m_flow_nominal=1*1000)
            annotation (Placement(transformation(extent={{30,10},{50,30}})));
          Buildings.Fluid.FixedResistances.PressureDrop res(
            m_flow_nominal=1*1000,
            dp_nominal=50,
            redeclare package Medium = Medium) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={70,-20})));
          Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare package
              Medium =
                Medium) annotation (Placement(transformation(
                extent={{10,10},{-10,-10}},
                rotation=90,
                origin={8,-12})));
          Modelica.Blocks.Sources.Constant con(k=50)
            annotation (Placement(transformation(extent={{-64,-14},{-52,-2}})));
          Modelica.Blocks.Sources.Ramp ramp(
            duration=60,
            startTime=50,
            height=-0.5,
            offset=1) annotation (Placement(transformation(extent={{-16,60},{4,80}})));
          Modelica.Blocks.Sources.BooleanPulse booleanStep(period=10, startTime=500)
            annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
        equation
          connect(sin.ports[1], Pum.port_a) annotation (Line(
              points={{-76,20},{-76,20},{-30,20}},
              color={0,127,255},
              thickness=1));
          connect(Pum.port_b, val.port_a) annotation (Line(
              points={{-10,20},{30,20}},
              color={0,127,255},
              thickness=1));
          connect(val.port_b, res.port_a) annotation (Line(
              points={{50,20},{70,20},{70,-10}},
              color={0,127,255},
              thickness=1));
          connect(res.port_b, sin.ports[2]) annotation (Line(
              points={{70,-30},{70,-30},{70,-60},{-74,-60},{-74,16},{-76,16}},
              color={0,127,255},
              thickness=1));

          connect(ramp.y, val.y) annotation (Line(
              points={{5,70},{22,70},{40,70},{40,32}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(senRelPre.port_a, val.port_a) annotation (Line(
              points={{8,-2},{8,20},{30,20}},
              color={0,127,255},
              thickness=1));
          connect(senRelPre.port_b, res.port_a) annotation (Line(
              points={{8,-22},{8,-52},{60,-52},{60,20},{70,20},{70,-10}},
              color={0,127,255},
              thickness=1));
          connect(booleanStep.y, Pum.On) annotation (Line(
              points={{-59,80},{-40,80},{-40,26},{-32,26}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(con.y, Pum.SetPoi) annotation (Line(
              points={{-51.4,-8},{-44,-8},{-44,22},{-32,22}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(senRelPre.p_rel, Pum.Mea) annotation (Line(
              points={{-1,-12},{-18,-12},{-40,-12},{-40,14},{-32,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=100),
            Documentation(info="<html>
<p>This example models the fluild loop with a variable speed fan/pump</p>
</html>"));
        end VariableSpeedFlowMover;

        model DualFan "the example to model the air loop with two fans"
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium model";
          Buildings.Fluid.Sources.Boundary_pT sin(
            redeclare package Medium = Medium,
            nPorts=1,
            p=100000,
            T=293.15) annotation (Placement(transformation(extent={{-96,10},{-76,30}})));
          BuildingControlEmulator.Devices.FlowMover.VAVSupplyFan PumSup(
            redeclare package Medium = Medium,
            TimCon=10,
            HydEff={0.7,0.7,0.7,0.7,0.7},
            MotEff={0.7,0.7,0.7,0.7,0.7},
            PreCur(displayUnit="Pa") = {300,250,200,150,100},
            VolFloCur={0.3,0.5,0.7,0.9,1.5},
            numTemp=3,
            SpeRat=0.9,
            k=1,
            Ti=60,
            waitTime=10)
            annotation (Placement(transformation(extent={{-50,10},{-30,30}})));
          Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
            redeclare package Medium = Medium,
            m_flow_nominal=1*1000,
            dpValve_nominal=100)
            annotation (Placement(transformation(extent={{30,10},{50,30}})));
          Buildings.Fluid.FixedResistances.PressureDrop res(
            m_flow_nominal=1*1000,
            redeclare package Medium = Medium,
            dp_nominal=100)                    annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={70,-20})));
          Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare package
              Medium =
                Medium) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=90,
                origin={0,-32})));
          Modelica.Blocks.Sources.Constant con(k=50)
            annotation (Placement(transformation(extent={{-100,-6},{-88,6}})));
          Modelica.Blocks.Sources.Ramp ramp(
            duration=60,
            startTime=50,
            height=-0.5,
            offset=1) annotation (Placement(transformation(extent={{-16,60},{4,80}})));
          Buildings.Fluid.Sources.Boundary_pT sin1(
            redeclare package Medium = Medium,
            nPorts=1,
            p=100000,
            T=293.15) annotation (Placement(transformation(extent={{-96,-90},{-76,-70}})));
          BuildingControlEmulator.Devices.FlowMover.BaseClasses.WithoutMotor PumRet(
            redeclare package Medium = Medium,
            TimCon=10,
            HydEff={0.7,0.7,0.7,0.7,0.7},
            MotEff={0.7,0.7,0.7,0.7,0.7},
            PreCur(displayUnit="Pa") = {300,250,200,150,100},
            VolFloCur={0.3,0.5,0.7,0.9,1.5})
            annotation (Placement(transformation(extent={{-30,-90},{-50,-70}})));
          Modelica.Fluid.Sensors.Pressure pressure(redeclare package Medium = Medium)
            annotation (Placement(transformation(extent={{58,42},{78,62}})));
          Modelica.Blocks.Sources.BooleanStep booleanStep(startValue=false, startTime=
                200) annotation (Placement(transformation(extent={{-92,60},{-72,80}})));
          Modelica.Blocks.Sources.Constant const[3](k=0)
            annotation (Placement(transformation(extent={{-100,-26},{-88,-14}})));
          Modelica.Blocks.Sources.Sine sine(f=1/60)
            annotation (Placement(transformation(extent={{-100,-46},{-88,-34}})));
          Modelica.Blocks.Sources.Sine sine1(f=1/60, phase=1.9198621771938)
            annotation (Placement(transformation(extent={{-80,-46},{-68,-34}})));
          Modelica.Blocks.Sources.Sine sine2(f=1/60, phase=0.34906585039887)
            annotation (Placement(transformation(extent={{-60,-46},{-48,-34}})));
          Modelica.Blocks.Sources.Constant const1[3](k=-0.5)
            annotation (Placement(transformation(extent={{-96,40},{-84,52}})));
        equation
          connect(sin.ports[1], PumSup.port_a) annotation (Line(
              points={{-76,20},{-76,20},{-50,20}},
              color={0,127,255},
              thickness=1));
          connect(PumSup.port_b, val.port_a) annotation (Line(
              points={{-30,20},{30,20}},
              color={0,127,255},
              thickness=1));
          connect(val.port_b, res.port_a) annotation (Line(
              points={{50,20},{70,20},{70,-10}},
              color={0,127,255},
              thickness=1));

          connect(ramp.y, val.y) annotation (Line(
              points={{5,70},{22,70},{40,70},{40,32}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(senRelPre.port_a, val.port_a) annotation (Line(
              points={{0,-22},{0,20},{30,20}},
              color={0,127,255},
              thickness=1));
          connect(senRelPre.port_b, res.port_a) annotation (Line(
              points={{0,-42},{0,-52},{60,-52},{60,20},{70,20},{70,-10}},
              color={0,127,255},
              thickness=1));
          connect(PumRet.port_b, sin1.ports[1]) annotation (Line(
              points={{-50,-80},{-62,-80},{-76,-80}},
              color={0,127,255},
              thickness=1));
          connect(PumRet.port_a, res.port_b) annotation (Line(
              points={{-30,-80},{-30,-80},{70,-80},{70,-30}},
              color={0,127,255},
              thickness=1));
          connect(pressure.port, res.port_a) annotation (Line(
              points={{68,42},{68,36},{56,36},{56,20},{70,20},{70,-10}},
              color={0,127,255},
              thickness=1));
          connect(booleanStep.y, PumSup.On) annotation (Line(
              points={{-71,70},{-60,70},{-60,26},{-52,26}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(con.y, PumSup.PreSetPoi) annotation (Line(
              points={{-87.4,0},{-64,0},{-64,22},{-52,22}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(PumSup.PreMea, senRelPre.p_rel) annotation (Line(
              points={{-52,10},{-56,10},{-56,-14},{14,-14},{14,-32},{9,-32}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(const.y, PumSup.CooTempSetPoi) annotation (Line(
              points={{-87.4,-20},{-62,-20},{-62,18},{-52,18}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(sine2.y, PumSup.Temp[1]) annotation (Line(
              points={{-47.4,-40},{-36,-40},{-24,-40},{-24,-6},{-58,-6},{-58,12.6667},{
                  -52,12.6667}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(sine1.y, PumSup.Temp[2]) annotation (Line(
              points={{-67.4,-40},{-60,-40},{-60,14},{-52,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(sine.y, PumSup.Temp[3]) annotation (Line(
              points={{-87.4,-40},{-82,-40},{-82,10},{-68,10},{-68,15.3333},{-52,
                  15.3333}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(PumSup.yRet, PumRet.u) annotation (Line(
              points={{-29,11.8},{-14,11.8},{-14,-74},{-29,-74}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(const1.y, PumSup.HeaTempSetPoi) annotation (Line(
              points={{-83.4,46},{-56,46},{-56,30},{-52,30}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=1000),
            Documentation(info="<html>
<p>This example models the fluild loop with a variable speed fan/pump</p>
</html>"));
        end DualFan;
      end Examples;
    end FlowMover;

    package WaterSide "Basic modeld "
      package BaseClasses

        package Examples
          extends Modelica.Icons.ExamplesPackage;
          model ElectricEIR
            import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
            extends Modelica.Icons.Example;
            package MediumCHW = Buildings.Media.Water "Medium for chilled water";
            package MediumCW = Buildings.Media.Water "Medium for condenser water";

            BuildingControlEmulator.Devices.WaterSide.BaseClasses.ElectricEIR chi(
              redeclare package Medium1 = MediumCW,
              redeclare package Medium2 = MediumCHW,
              dp1_nominal=1000,
              dp2_nominal=1000,
              per=per,
              m2_flow_nominal=per.mEva_flow_nominal,
              m1_flow_nominal=per.mCon_flow_nominal)
              annotation (Placement(transformation(extent={{-12,-8},{8,12}})));
             parameter Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_23XL_724kW_6_04COP_Vanes
                                                                         per
              "Performance data"
              annotation (choicesAllMatching = true,
                          Placement(transformation(extent={{40,66},{60,86}})));
            Buildings.Fluid.Sources.MassFlowSource_T souCHW(
              nPorts=1,
              redeclare package Medium = MediumCHW,
              use_T_in=false,
              m_flow=per.mEva_flow_nominal,
              T=273.15 + 20) "Source for CHW"
              annotation (Placement(transformation(extent={{60,-30},{40,-10}})));
            Buildings.Fluid.Sources.MassFlowSource_T souCW(
              nPorts=1,
              redeclare package Medium = MediumCW,
              use_T_in=false,
              T=273.15 + 21.11,
              m_flow=per.mCon_flow_nominal) "Source for CHW"
              annotation (Placement(transformation(extent={{-80,18},{-60,38}})));
            Buildings.Fluid.Sources.Boundary_pT sinCHW(redeclare package Medium =
                  MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-72,-20})));
            Buildings.Fluid.Sources.Boundary_pT sinCW(nPorts=1, redeclare
                package Medium =
                  MediumCW) "Sink for CW" annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={48,30})));
            Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
              annotation (Placement(transformation(extent={{-80,50},{-60,70}})));
            Modelica.Blocks.Sources.Ramp ramp(height=1, duration=86400)
              annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLea(
              allowFlowReversal=true,
              redeclare package Medium = MediumCHW,
              m_flow_nominal=per.mEva_flow_nominal) annotation (Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=0,
                  origin={-40,-20})));
          equation
            connect(souCW.ports[1], chi.port_a1) annotation (Line(
                points={{-60,28},{-40,28},{-40,8},{-12,8}},
                color={0,127,255},
                thickness=1));
            connect(sinCW.ports[1], chi.port_b1) annotation (Line(
                points={{38,30},{20,30},{20,8},{8,8}},
                color={0,127,255},
                thickness=1));
            connect(souCHW.ports[1], chi.port_a2) annotation (Line(
                points={{40,-20},{20,-20},{20,-4},{8,-4}},
                color={0,127,255},
                thickness=1));
            connect(chi.on, booleanExpression.y) annotation (Line(
                points={{-14,5},{-32,5},{-32,60},{-59,60}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(ramp.y, chi.y) annotation (Line(
                points={{-39,-50},{-32,-50},{-20,-50},{-20,-1},{-14,-1}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(sinCHW.ports[1], senTCHWLea.port_b) annotation (Line(
                points={{-62,-20},{-56,-20},{-50,-20}},
                color={0,127,255},
                thickness=1));
            connect(senTCHWLea.port_a, chi.port_b2) annotation (Line(
                points={{-30,-20},{-24,-20},{-16,-20},{-16,-4},{-12,-4}},
                color={0,127,255},
                thickness=1));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                  coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=86400));
          end ElectricEIR;
        end Examples;

        partial model PartialElectric "Partial model for electric chiller"
          extends Buildings.Fluid.Interfaces.FourPortHeatMassExchanger(
           m1_flow_nominal = mCon_flow_nominal,
           m2_flow_nominal = mEva_flow_nominal,
           T1_start = 273.15+25,
           T2_start = 273.15+5,
           redeclare final Buildings.Fluid.MixingVolumes.MixingVolume vol2(
              V=m2_flow_nominal*tau2/rho2_nominal,
              nPorts=2,
              final prescribedHeatFlowRate=true),
            vol1(
              final prescribedHeatFlowRate=true));

          Modelica.Blocks.Interfaces.BooleanInput on
            "Set to true to enable compressor, or false to disable compressor"
            annotation (Placement(transformation(extent={{-140,10},{-100,50}}),
                iconTransformation(extent={{-140,10},{-100,50}})));
          Modelica.Blocks.Interfaces.RealInput y "Cooling power output ratio" annotation (
              Placement(transformation(extent={{-140,-50},{-100,-10}}),
                iconTransformation(extent={{-140,-50},{-100,-10}})));

          Modelica.Units.SI.Temperature TEvaEnt "Evaporator entering temperature";
          Modelica.Units.SI.Temperature TEvaLvg "Evaporator leaving temperature";
          Modelica.Units.SI.Temperature TConEnt "Condenser entering temperature";
          Modelica.Units.SI.Temperature TConLvg "Condenser leaving temperature";

          Modelica.Units.SI.Efficiency COP "Coefficient of performance";
          Modelica.Units.SI.HeatFlowRate QCon_flow "Condenser heat input";
          Modelica.Units.SI.HeatFlowRate QEva_flow "Evaporator heat input";
          Modelica.Blocks.Interfaces.RealOutput P(final quantity="Power", unit="W")
            "Electric power consumed by compressor"
            annotation (Placement(transformation(extent={{100,80},{120,100}}),
                iconTransformation(extent={{100,80},{120,100}})));

          Real capFunT(min=0, unit="1")
            "Cooling capacity factor function of temperature curve";
          Modelica.Units.SI.Efficiency EIRFunT
            "Power input to cooling capacity ratio function of temperature curve";
          Modelica.Units.SI.Efficiency EIRFunPLR
            "Power input to cooling capacity ratio function of part load ratio";
          Real PLR1(min=0, unit="1") "Part load ratio";
          Real PLR2(min=0, unit="1") "Part load ratio";
          Real CR(min=0, unit="1") "Cycling ratio";
          parameter Modelica.Units.SI.Efficiency epsEva(max=1) = 1
            "Heat exchanger effectiveness at evaporator";

          parameter Modelica.Units.SI.Efficiency epsCon(max=1) = 1
            "Heat exchanger effectiveness at condenser";

        protected
          Modelica.Units.SI.HeatFlowRate QEva_flow_ava(nominal=QEva_flow_nominal, start=
               QEva_flow_nominal) "Cooling capacity available at evaporator";
          Modelica.Units.SI.HeatFlowRate QEva_flow_set(nominal=QEva_flow_nominal, start=
               QEva_flow_nominal)
            "Cooling capacity required to cool to set point temperature";

          // Performance data
          parameter Modelica.Units.SI.HeatFlowRate QEva_flow_nominal(max=0)
            "Reference capacity (negative number)";
          parameter Modelica.Units.SI.Efficiency COP_nominal
            "Reference coefficient of performance";
          parameter Real PLRMax(min=0, unit="1") "Maximum part load ratio";
          parameter Real PLRMinUnl(min=0, unit="1") "Minimum part unload ratio";
          parameter Real PLRMin(min=0, unit="1") "Minimum part load ratio";
          parameter Modelica.Units.SI.Efficiency etaMotor(max=1)
            "Fraction of compressor motor heat entering refrigerant";
          parameter Modelica.Units.SI.MassFlowRate mEva_flow_nominal
            "Nominal mass flow at evaporator";
          parameter Modelica.Units.SI.MassFlowRate mCon_flow_nominal
            "Nominal mass flow at condenser";

          parameter Modelica.Units.SI.Temperature TEvaLvg_nominal
            "Temperature of fluid leaving evaporator at nominal condition";

          final parameter Modelica.Units.NonSI.Temperature_degC TEvaLvg_nominal_degC=
              Modelica.Units.Conversions.to_degC(TEvaLvg_nominal)
            "Temperature of fluid leaving evaporator at nominal condition";
          Modelica.Units.NonSI.Temperature_degC TEvaLvg_degC
            "Temperature of fluid leaving evaporator";
          parameter Modelica.Units.SI.HeatFlowRate Q_flow_small=QEva_flow_nominal*1E-9
            "Small value for heat flow rate or power, used to avoid division by zero";
          Buildings.HeatTransfer.Sources.PrescribedHeatFlow preHeaFloEva
            "Prescribed heat flow rate"
            annotation (Placement(transformation(extent={{-39,-50},{-19,-30}})));
          Buildings.HeatTransfer.Sources.PrescribedHeatFlow preHeaFloCon
            "Prescribed heat flow rate"
            annotation (Placement(transformation(extent={{-39,30},{-19,50}})));
          Modelica.Blocks.Sources.RealExpression QEva_flow_in(y=QEva_flow)
            "Evaporator heat flow rate"
            annotation (Placement(transformation(extent={{-80,-50},{-60,-30}})));
          Modelica.Blocks.Sources.RealExpression QCon_flow_in(y=QCon_flow)
            "Condenser heat flow rate"
            annotation (Placement(transformation(extent={{-80,30},{-60,50}})));

        initial equation
          assert(QEva_flow_nominal < 0, "Parameter QEva_flow_nominal must be smaller than zero.");
          assert(Q_flow_small < 0, "Parameter Q_flow_small must be smaller than zero.");
          assert(PLRMinUnl >= PLRMin, "Parameter PLRMinUnl must be bigger or equal to PLRMin");
          assert(PLRMax > PLRMinUnl, "Parameter PLRMax must be bigger than PLRMinUnl");
        equation
          // Condenser temperatures
          TConEnt = Medium1.temperature(Medium1.setState_phX(port_a1.p, inStream(port_a1.h_outflow)));
          TConLvg = vol1.heatPort.T;
          // Evaporator temperatures
          TEvaEnt = Medium2.temperature(Medium2.setState_phX(port_a2.p, inStream(port_a2.h_outflow)));
          TEvaLvg = vol2.heatPort.T;
          TEvaLvg_degC=Modelica.Units.Conversions.to_degC(TEvaLvg);

          if on then
            // Available cooling capacity
            QEva_flow_ava = QEva_flow_nominal*capFunT;
            // Cooling capacity is controlled to be output
            QEva_flow_set = y*QEva_flow_ava;

            // Part load ratio
            PLR1 = Buildings.Utilities.Math.Functions.smoothMin(
              x1 = QEva_flow_set/(QEva_flow_ava+Q_flow_small),
              x2 = PLRMax,
              deltaX=PLRMax/100);
            // PLR2 is the compressor part load ratio. The lower bound PLRMinUnl is
            // since for PLR1<PLRMinUnl, the chiller uses hot gas bypass, under which
            // condition the compressor power is assumed to be the same as if the chiller
            // were to operate at PLRMinUnl
            PLR2 = Buildings.Utilities.Math.Functions.smoothMax(
              x1 = PLRMinUnl,
              x2 = PLR1,
              deltaX = PLRMinUnl/100);

            // Cycling ratio.
            // Due to smoothing, this can be about deltaX/10 above 1.0
            CR = Buildings.Utilities.Math.Functions.smoothMin(
              x1 = PLR1/PLRMin,
              x2 = 1,
              deltaX=0.001);

            // Compressor power.
            P = -QEva_flow_ava/COP_nominal*EIRFunT*EIRFunPLR*CR;
            // Heat flow rates into evaporator and condenser
            // Q_flow_small is a negative number.
            QEva_flow = Buildings.Utilities.Math.Functions.smoothMax(
              x1 = QEva_flow_set,
              x2 = QEva_flow_ava,
              deltaX= -Q_flow_small/10)*epsEva;

          //QEva_flow = max(QEva_flow_set, QEva_flow_ava);
            QCon_flow = epsCon*(-QEva_flow + P*etaMotor);
            // Coefficient of performance
            COP = -QEva_flow/epsEva/(P-Q_flow_small);
          else
            QEva_flow_ava = 0;
            QEva_flow_set = 0;
            PLR1 = 0;
            PLR2 = 0;
            CR   = 0;
            P    = 0;
            QEva_flow = 0;
            QCon_flow = 0;
            COP  = 0;
          end if;

          connect(QCon_flow_in.y, preHeaFloCon.Q_flow) annotation (Line(
              points={{-59,40},{-39,40}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(preHeaFloCon.port, vol1.heatPort) annotation (Line(
              points={{-19,40},{-10,40},{-10,60}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(QEva_flow_in.y, preHeaFloEva.Q_flow) annotation (Line(
              points={{-59,-40},{-39,-40}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(preHeaFloEva.port, vol2.heatPort) annotation (Line(
              points={{-19,-40},{12,-40},{12,-60}},
              color={191,0,0},
              smooth=Smooth.None));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                    {100,100}}),
                           graphics={
                Text(extent={{62,96},{112,82}},   textString="P",
                  lineColor={0,0,127}),
                Text(extent={{-94,-24},{-48,-36}},  textString="T_CHWS",
                  lineColor={0,0,127}),
                Rectangle(
                  extent={{-99,-54},{102,-66}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-100,-66},{0,-54}},
                  lineColor={0,0,127},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-104,66},{98,54}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-2,54},{98,66}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={255,0,0},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,52},{-40,12}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,70},{58,52}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,2},{-52,12},{-32,12},{-42,2}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,2},{-52,-10},{-32,-10},{-42,2}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,-10},{-40,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{38,52},{42,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,-50},{58,-68}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{18,24},{62,-18}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{40,24},{22,-8},{58,-8},{40,24}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Text(extent={{-108,36},{-62,24}},
                  lineColor={0,0,127},
                  textString="on")}),
        Documentation(info="<html>
<p>
Base class for model of an electric chiller, based on the DOE-2.1 chiller model and the
CoolTools chiller model that are implemented in EnergyPlus as the models
<code>Chiller:Electric:EIR</code> and <code>Chiller:Electric:ReformulatedEIR</code>.
</p>
<p>
The model takes as an input the set point for the leaving chilled water temperature,
which is met if the chiller has sufficient capacity.
Thus, the model has a built-in, ideal temperature control.
The model has three tests on the part load ratio and the cycling ratio:
</p>
<ol>
<li>
The test
<pre>
  PLR1 =min(QEva_flow_set/QEva_flow_ava, PLRMax);
</pre>
ensures that the chiller capacity does not exceed the chiller capacity specified
by the parameter <code>PLRMax</code>.
</li>
<li>
The test <pre>
  CR = min(PLR1/per.PRLMin, 1.0);
</pre>
computes a cycling ratio. This ratio expresses the fraction of time
that a chiller would run if it were to cycle because its load is smaller than
the minimal load at which it can operature. Notice that this model does continuously operature even if
the part load ratio is below the minimum part load ratio. Its leaving evaporator and condenser temperature
can therefore be considered as an
average temperature between the modes where the compressor is off and on.
</li>
<li>
The test <pre>
  PLR2 = max(PLRMinUnl, PLR1);
</pre>
computes the part load ratio of the compressor.
The assumption is that for a part load ratio below <code>PLRMinUnl</code>,
the chiller uses hot gas bypass to reduce the capacity, while the compressor
power draw does not change.
</li>
</ol>
<p>
The electric power only contains the power for the compressor, but not any power for pumps or fans.
</p>
<h4>Implementation</h4>
<p>
Models that extend from this base class need to provide
three functions to predict capacity and power consumption:
</p>
<ul>
<li>
A function to predict cooling capacity. The function value needs
to be assigned to <code>capFunT</code>.
</li>
<li>
A function to predict the power input as a function of temperature.
The function value needs to be assigned to <code>EIRFunT</code>.
</li>
<li>
A function to predict the power input as a function of the part load ratio.
The function value needs to be assigned to <code>EIRFunPLR</code>.
</li>
</ul>
</html>",
        revisions="<html>
<ul>
<li>
June 28, 2019, by Michael Wetter:<br/>
Removed <code>start</code> values and removed
<code>nominal=1</code> for performance curves.<br/>
This is for issue <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1465\">1465</a>.
</li>
<li>
March 12, 2015, by Michael Wetter:<br/>
Refactored model to make it once continuously differentiable.
This is for issue <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/373\">373</a>.
</li>
<li>
Jan. 10, 2011, by Michael Wetter:<br/>
Added input signal to switch chiller off, and changed base class to use a dynamic model.
The change of the base class was required to improve the robustness of the model when the control
is switched on again.
</li>
<li>
Sep. 8, 2010, by Michael Wetter:<br/>
Revised model and included it in the Buildings library.
</li>
<li>
October 13, 2008, by Brandon Hencey:<br/>
First implementation.
</li>
</ul>
</html>"));
        end PartialElectric;

        model ElectricEIR "Electric chiller based on the DOE-2.1 model"
          extends PartialElectric(
          final QEva_flow_nominal = per.QEva_flow_nominal,
          final COP_nominal= per.COP_nominal,
          final PLRMax= per.PLRMax,
          final PLRMinUnl= per.PLRMinUnl,
          final PLRMin= per.PLRMin,
          final etaMotor= per.etaMotor,
          final mEva_flow_nominal= per.mEva_flow_nominal,
          final mCon_flow_nominal= per.mCon_flow_nominal,
          final TEvaLvg_nominal= per.TEvaLvg_nominal);

          parameter Buildings.Fluid.Chillers.Data.ElectricEIR.Generic per
            "Performance data"
            annotation (choicesAllMatching = true,
                        Placement(transformation(extent={{40,80},{60,100}})));

        protected
          final parameter Modelica.Units.NonSI.Temperature_degC TConEnt_nominal_degC=
              Modelica.Units.Conversions.to_degC(per.TConEnt_nominal)
            "Temperature of fluid entering condenser at nominal condition";

          Modelica.Units.NonSI.Temperature_degC TConEnt_degC
            "Temperature of fluid entering condenser";
        initial equation
          // Verify correctness of performance curves, and write warning if error is bigger than 10%
          Buildings.Fluid.Chillers.BaseClasses.warnIfPerformanceOutOfBounds(
             Buildings.Utilities.Math.Functions.biquadratic(a=per.capFunT,
             x1=TEvaLvg_nominal_degC, x2=TConEnt_nominal_degC),
             "Capacity as function of temperature ",
             "per.capFunT");
        equation
          TConEnt_degC=Modelica.Units.Conversions.to_degC(TConEnt);

          if on then
            // Compute the chiller capacity fraction, using a biquadratic curve.
            // Since the regression for capacity can have negative values (for unreasonable temperatures),
            // we constrain its return value to be non-negative. This prevents the solver to pick the
            // unrealistic solution.
            capFunT = Buildings.Utilities.Math.Functions.smoothMax(
               x1 = 1E-6,
               x2 = Buildings.Utilities.Math.Functions.biquadratic(a=per.capFunT, x1=TEvaLvg_degC, x2=TConEnt_degC),
               deltaX = 1E-7);
        /*    assert(capFunT > 0.1, "Error: Received capFunT = " + String(capFunT)  + ".\n"
           + "Coefficient for polynomial seem to be not valid for the encountered temperature range.\n"
           + "Temperatures are TConEnt_degC = " + String(TConEnt_degC) + " degC\n"
           + "                 TEvaLvg_degC = " + String(TEvaLvg_degC) + " degC");
*/
            // Chiller energy input ratio biquadratic curve.
            EIRFunT = Buildings.Utilities.Math.Functions.biquadratic(a=per.EIRFunT, x1=TEvaLvg_degC, x2=TConEnt_degC);
            // Chiller energy input ratio quadratic curve
            EIRFunPLR   = per.EIRFunPLR[1]+per.EIRFunPLR[2]*PLR2+per.EIRFunPLR[3]*PLR2^2;
          else
            capFunT   = 0;
            EIRFunT   = 0;
            EIRFunPLR = 0;
          end if;

          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}),
                           graphics={
                Rectangle(
                  extent={{-99,-54},{102,-66}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-100,-66},{0,-54}},
                  lineColor={0,0,127},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-104,66},{98,54}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-2,54},{98,66}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={255,0,0},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,52},{-40,12}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,70},{58,52}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,2},{-52,12},{-32,12},{-42,2}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-42,2},{-52,-10},{-32,-10},{-42,2}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-44,-10},{-40,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{38,52},{42,-50}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{-56,-50},{58,-68}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{18,24},{62,-18}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{40,24},{22,-8},{58,-8},{40,24}},
                  lineColor={0,0,0},
                  smooth=Smooth.None,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}),
        defaultComponentName="chi",
        Documentation(info="<html>
<p>
Model of an electric chiller, based on the DOE-2.1 chiller model and
the EnergyPlus chiller model <code>Chiller:Electric:EIR</code>.
</p>
<p> This model uses three functions to predict capacity and power consumption:
</p>
<ul>
<li>
A biquadratic function is used to predict cooling capacity as a function of
condenser entering and evaporator leaving fluid temperature.
</li>
<li>
A quadratic functions is used to predict power input to cooling capacity ratio with respect to the part load ratio.
</li>
<li>
A biquadratic functions is used to predict power input to cooling capacity ratio as a function of
condenser entering and evaporator leaving fluid temperature.
</li>
</ul>
<p>
These curves are stored in the data record <code>per</code> and are available from
<a href=\"Buildings.Fluid.Chillers.Data.ElectricEIR\">
Buildings.Fluid.Chillers.Data.ElectricEIR</a>.
Additional performance curves can be developed using
two available techniques (Hydeman and Gillespie, 2002). The first technique is called the
Least-squares Linear Regression method and is used when sufficient performance data exist
to employ standard least-square linear regression techniques. The second technique is called
Reference Curve Method and is used when insufficient performance data exist to apply linear
regression techniques. A detailed description of both techniques can be found in
Hydeman and Gillespie (2002).
</p>
<p>
The model takes as an input the set point for the leaving chilled water temperature,
which is met if the chiller has sufficient capacity.
Thus, the model has a built-in, ideal temperature control.
The model has three tests on the part load ratio and the cycling ratio:
</p>
<ol>
<li>
The test<pre>
  PLR1 =min(QEva_flow_set/QEva_flow_ava, per.PLRMax);
</pre>
ensures that the chiller capacity does not exceed the chiller capacity specified
by the parameter <code>per.PLRMax</code>.
</li>
<li>
The test <pre>
  CR = min(PLR1/per.PRLMin, 1.0);
</pre>
computes a cycling ratio. This ratio expresses the fraction of time
that a chiller would run if it were to cycle because its load is smaller than the
minimal load at which it can operate.
Note that this model continuously operates even if the part load ratio is below the minimum part load ratio.
Its leaving evaporator and condenser temperature can therefore be considered as an
average temperature between the modes where the compressor is off and on.
</li>
<li>
The test <pre>
  PLR2 = max(per.PLRMinUnl, PLR1);
</pre>
computes the part load ratio of the compressor.
The assumption is that for a part load ratio below <code>per.PLRMinUnl</code>,
the chiller uses hot gas bypass to reduce the capacity, while the compressor
power draw does not change.
</li>
</ol>
<p>
The electric power only contains the power for the compressor, but not any power for pumps or fans.
</p>
<p>
The model can be parametrized to compute a transient
or steady-state response.
The transient response of the boiler is computed using a first
order differential equation for the evaporator and condenser fluid volumes.
The chiller outlet temperatures are equal to the temperatures of these lumped volumes.
</p>
<h4>References</h4>
<ul>
<li>
Hydeman, M. and K.L. Gillespie. 2002. Tools and Techniques to Calibrate Electric Chiller
Component Models. <i>ASHRAE Transactions</i>, AC-02-9-1.
</li>
</ul>
</html>",
        revisions="<html>
<ul>
<li>
March 12, 2015, by Michael Wetter:<br/>
Refactored model to make it once continuously differentiable.
This is for issue <a href=\"https://github.com/lbl-srg/modelica-buildings/issues/373\">373</a>.
</li>
<li>
Jan. 9, 2011, by Michael Wetter:<br/>
Added input signal to switch chiller off.
</li>
<li>
Sep. 8, 2010, by Michael Wetter:<br/>
Revised model and included it in the Buildings library.
</li>
<li>
October 13, 2008, by Brandon Hencey:<br/>
First implementation.
</li>
</ul>
</html>"));
        end ElectricEIR;

        model BoilerPolynomial "Boiler with efficiency curve described by a polynomial of the temperature"
          extends Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger(
            redeclare final Buildings.Fluid.MixingVolumes.MixingVolume vol,
            show_T=true,
            final tau=VWat*rho_default/m_flow_nominal);

          parameter Modelica.Units.SI.Power Q_flow_nominal "Nominal heating power";
          parameter Modelica.Units.SI.Temperature T_nominal=353.15
            "Temperature used to compute nominal efficiency (only used if efficiency curve depends on temperature)";
          // Assumptions
          parameter Buildings.Fluid.Types.EfficiencyCurves effCur=Buildings.Fluid.Types.EfficiencyCurves.Constant
            "Curve used to compute the efficiency";
          parameter Real a[:] = {0.9} "Coefficients for efficiency curve";

          parameter Buildings.Fluid.Data.Fuels.Generic fue "Fuel type"
           annotation (choicesAllMatching = true);
          parameter Modelica.Units.SI.Efficiency eps(max=1) = 1
            "Heat exchanger effectiveness";
          parameter Modelica.Units.SI.ThermalConductance UA=0.05*Q_flow_nominal/30
            "Overall UA value";
          parameter Modelica.Units.SI.Volume VWat=1.5E-6*Q_flow_nominal
            "Water volume of boiler" annotation (Dialog(tab="Dynamics", enable=not (
                  energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState)));
          parameter Modelica.Units.SI.Mass mDry=1.5E-3*Q_flow_nominal
            "Mass of boiler that will be lumped to water heat capacity" annotation (
              Dialog(tab="Dynamics", enable=not (energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState)));

          Modelica.Units.SI.Efficiency eta=if effCur == Buildings.Fluid.Types.EfficiencyCurves.Constant
               then a[1] elseif effCur == Buildings.Fluid.Types.EfficiencyCurves.Polynomial
               then Buildings.Utilities.Math.Functions.polynomial(a=a, x=y) elseif
              effCur == Buildings.Fluid.Types.EfficiencyCurves.QuadraticLinear then
              Buildings.Utilities.Math.Functions.quadraticLinear(
              a=aQuaLin,
              x1=y,
              x2=T) else 0 "Boiler efficiency";
          Modelica.Units.SI.Power QFue_flow=y*Q_flow_nominal/eta_nominal
            "Heat released by fuel";
          Modelica.Units.SI.Power QWat_flow=eta*QFue_flow*eps
            "Heat transfer from gas into water";
          Modelica.Units.SI.MassFlowRate mFue_flow=QFue_flow/fue.h
            "Fuel mass flow rate";
          Modelica.Units.SI.VolumeFlowRate VFue_flow=mFue_flow/fue.d
            "Fuel volume flow rate";

          Modelica.Blocks.Interfaces.RealInput y(min=0, max=1) "Part load ratio"
            annotation (Placement(transformation(extent={{-140,60},{-100,100}})));

          Modelica.Blocks.Interfaces.RealOutput T(final quantity="ThermodynamicTemperature",
                                                  final unit = "K", displayUnit = "degC", min=0)
            annotation (Placement(transformation(extent={{100,70},{120,90}})));

          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort
            "Heat port, can be used to connect to ambient"
            annotation (Placement(transformation(extent={{-10,62}, {10,82}})));
          Modelica.Thermal.HeatTransfer.Components.HeatCapacitor heaCapDry(
            C=500*mDry,
            T(start=T_start)) if not (energyDynamics == Modelica.Fluid.Types.Dynamics.SteadyState)
            "heat capacity of boiler metal"
            annotation (Placement(transformation(extent={{-80,12},{-60,32}})));

        protected
          parameter Real eta_nominal(fixed=false) "Boiler efficiency at nominal condition";
          parameter Real aQuaLin[6] = if size(a, 1) == 6 then a else fill(0, 6)
          "Auxiliary variable for efficiency curve because quadraticLinear requires exactly 6 elements";

          Buildings.HeatTransfer.Sources.PrescribedHeatFlow preHeaFlo
            annotation (Placement(transformation(extent={{-43,-40},{-23,-20}})));
          Modelica.Blocks.Sources.RealExpression Q_flow_in(y=QWat_flow)
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
          Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor temSen
            "Temperature of fluid"
            annotation (Placement(transformation(extent={{0,30},{20,50}})));

          Modelica.Thermal.HeatTransfer.Components.ThermalConductor UAOve(G=UA)
            "Overall thermal conductance (if heatPort is connected)"
            annotation (Placement(transformation(extent={{-48,10},{-28,30}})));

        initial equation
          if  effCur == Buildings.Fluid.Types.EfficiencyCurves.QuadraticLinear then
            assert(size(a, 1) == 6,
            "The boiler has the efficiency curve set to 'Buildings.Fluid.Types.EfficiencyCurves.QuadraticLinear',
    and hence the parameter 'a' must have exactly 6 elements.
    However, only "         + String(size(a, 1)) + " elements were provided.");
          end if;

          if effCur ==Buildings.Fluid.Types.EfficiencyCurves.Constant then
            eta_nominal = a[1];
          elseif effCur ==Buildings.Fluid.Types.EfficiencyCurves.Polynomial then
            eta_nominal = Buildings.Utilities.Math.Functions.polynomial(
                                                                  a=a, x=1);
          elseif effCur ==Buildings.Fluid.Types.EfficiencyCurves.QuadraticLinear then
            // For this efficiency curve, a must have 6 elements.
            eta_nominal = Buildings.Utilities.Math.Functions.quadraticLinear(
                                                                       a=aQuaLin, x1=1, x2=T_nominal);
          else
             eta_nominal = 999;
          end if;

        equation

          assert(eta > 0.001, "Efficiency curve is wrong.");

          connect(UAOve.port_b, vol.heatPort)            annotation (Line(
              points={{-28,20},{-22,20},{-22,-10},{-9,-10}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(UAOve.port_a, heatPort) annotation (Line(
              points={{-48,20},{-52,20},{-52,60},{0,60},{0,72}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(heaCapDry.port, vol.heatPort) annotation (Line(
              points={{-70,12},{-70,-10},{-9,-10}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(temSen.T, T) annotation (Line(
              points={{20,40},{60,40},{60,80},{110,80}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(preHeaFlo.port, vol.heatPort) annotation (Line(
              points={{-23,-30},{-15,-30},{-15,-10},{-9,-10}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(Q_flow_in.y,preHeaFlo. Q_flow) annotation (Line(
              points={{-59,-30},{-43,-30}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(vol.heatPort, temSen.port) annotation (Line(
              points={{-9,-10},{-16,-10},{-16,40},{0,40}},
              color={191,0,0},
              smooth=Smooth.None));
          annotation ( Icon(graphics={
                Polygon(
                  points={{0,-34},{-12,-52},{14,-52},{0,-34}},
                  pattern=LinePattern.None,
                  smooth=Smooth.None,
                  fillColor={255,255,0},
                  fillPattern=FillPattern.Solid,
                  lineColor={0,0,0}),
                Line(
                  points={{-100,80},{-80,80},{-80,-44},{-6,-44}},
                  smooth=Smooth.None),
                Line(
                  points={{100,80},{80,80},{80,4}},
                  color={0,0,127},
                  smooth=Smooth.None),
                Text(
                  extent={{160,144},{40,94}},
                  lineColor={0,0,0},
                  textString=DynamicSelect("T", String(T-273.15, format=".1f"))),
                Text(
                  extent={{-38,146},{-158,96}},
                  lineColor={0,0,0},
                  textString=DynamicSelect("y", String(y, format=".2f")))}),
        defaultComponentName="boi",
        Documentation(info="<html>
<p>
This is a model of a boiler whose efficiency is described
by a polynomial.
The heat input into the medium is</p>
<p align=\"center\" style=\"font-style:italic;\">
  Q&#775; = y Q&#775;<sub>0</sub> &eta; &frasl; &eta;<sub>0</sub>
</p>
<p>
where
<i>y &isin; [0, 1]</i> is the control signal,
<i>Q&#775;<sub>0</sub></i> is the nominal power,
<i>&eta;</i> is the efficiency at the current operating point, and
<i>&eta;<sub>0</sub></i> is the efficiency at <i>y=1</i> and
nominal temperature <i>T=T<sub>0</sub></i> as specified by the parameter
<code>T_nominal</code>.
</p>
<p>
The parameter <code>effCur</code> determines what polynomial is used
to compute the efficiency, which is defined as
</p>
<p align=\"center\" style=\"font-style:italic;\">
  &eta; = Q&#775; &frasl; Q&#775;<sub>f</sub>,
</p>
<p>
where
<i>Q&#775;</i> is the heat transferred to the working fluid (typically water or air), and
<i>Q&#775;<sub>f</sub></i> is the heat of combustion released by the fuel.
</p>
<p>
The following polynomials can be selected to compute the efficiency:
</p>
<table summary=\"summary\"  border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
<tr>
<th>Parameter <code>effCur</code></th>
<th>Efficiency curve</th>
</tr>
<tr>
<td>Buildings.Fluid.Types.EfficiencyCurves.Constant</td>
<td><i>&eta; = a<sub>1</sub></i></td>
</tr>
<tr>
<td>Buildings.Fluid.Types.EfficiencyCurves.Polynomial</td>
<td><i>&eta; = a<sub>1</sub> + a<sub>2</sub> y + a<sub>3</sub> y<sup>2</sup> + ...</i></td>
</tr>
<tr>
<td>Buildings.Fluid.Types.EfficiencyCurves.QuadraticLinear</td>
<td><i>&eta; = a<sub>1</sub> + a<sub>2</sub>  y
        + a<sub>3</sub> y<sup>2</sup>
        + (a<sub>4</sub> + a<sub>5</sub>  y
        + a<sub>6</sub> y<sup>2</sup>)  T
</i></td>
</tr>
</table>

<p>
where <i>T</i> is the boiler outlet temperature in Kelvin.
For <code>effCur = Buildings.Fluid.Types.EfficiencyCurves.Polynomial</code>,
an arbitrary number of polynomial coefficients can be specified.
</p>
<p>
The parameter <code>Q_flow_nominal</code> is the power transferred to the fluid
for <code>y=1</code> and, if the efficiency depends on temperature,
for <code>T=T0</code>.
</p>
<p>
The fuel mass flow rate and volume flow rate are computed as </p>
<p align=\"center\" style=\"font-style:italic;\">
  m&#775;<sub>f</sub> = Q&#775;<sub>f</sub> &frasl; h<sub>f</sub>
</p>
<p> and </p>
<p align=\"center\" style=\"font-style:italic;\">
  V&#775;<sub>f</sub> = m&#775;<sub>f</sub> &frasl; &rho;<sub>f</sub>,
</p>
<p>
where the fuel heating value
<i>h<sub>f</sub></i> and the fuel mass density
<i>&rho;<sub>f</sub></i> are obtained from the
parameter <code>fue</code>.
Note that if <i>&eta;</i> is the efficiency relative to the lower heating value,
then the fuel properties also need to be used for the lower heating value.
</p>

<p>
Optionally, the port <code>heatPort</code> can be connected to a heat port
outside of this model to impose a boundary condition in order to
model heat losses to the ambient. When using this <code>heatPort</code>,
make sure that the efficiency curve <code>effCur</code>
does not already account for this heat loss.
</p>

<p>
On the Assumptions tag, the model can be parameterized to compute a transient
or steady-state response.
The transient response of the boiler is computed using a first
order differential equation to compute the boiler's water and metal temperature,
which are lumped into one state. The boiler outlet temperature is equal to this water temperature.
</p>

</html>",         revisions="<html>
<ul>
<li>
May 27, 2016, by Michael Wetter:<br/>
Corrected size of input argument to
<code>Buildings.Utilities.Math.Functions.quadraticLinear</code>
for JModelica compliance check.
</li>
<li>
May 30, 2014, by Michael Wetter:<br/>
Removed undesirable annotation <code>Evaluate=true</code>.
</li>
<li>
October 9, 2013 by Michael Wetter:<br/>
Removed conditional declaration of <code>mDry</code> as the use of a conditional
parameter in an instance declaration is not correct Modelica syntax.
</li>
<li>
December 14, 2012 by Michael Wetter:<br/>
Renamed protected parameters for consistency with the naming conventions.
</li>
<li>
December 22, 2011 by Michael Wetter:<br/>
Added computation of fuel usage and improved the documentation.
</li>
<li>
May 25, 2011 by Michael Wetter:<br/>
<ul>
<li>
Removed parameter <code>dT_nominal</code>, and require instead
the parameter <code>m_flow_nominal</code> to be set by the user.
This was needed to avoid a non-literal value for the nominal attribute
of the pressure drop model.
</li>
<li>
Changed assignment of parameters in model instantiation, and updated
model for the new base class that does not have a temperature sensor.
</li>
</ul>
</li>
<li>
January 29, 2009 by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
        end BoilerPolynomial;

        model YorkCalc
          "Cooling tower with variable speed using the York calculation for the approach temperature"
          extends
            Buildings.Fluid.HeatExchangers.CoolingTowers.BaseClasses.CoolingTower;
          parameter Modelica.Units.SI.Efficiency eps(
            min=0.1,
            max=1) = 1 "Heat exchanger effectiveness";
          import cha =
            Buildings.Fluid.HeatExchangers.CoolingTowers.BaseClasses.Characteristics;

          parameter Modelica.Units.SI.Temperature TAirInWB_nominal=273.15 + 25.55
            "Design inlet air wet bulb temperature"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.TemperatureDifference TApp_nominal(displayUnit=
                "K") = 3.89 "Design approach temperature"
            annotation (Dialog(group="Nominal condition"));
          parameter Modelica.Units.SI.TemperatureDifference TRan_nominal(displayUnit=
                "K") = 5.56 "Design range temperature (water in - water out)"
            annotation (Dialog(group="Nominal condition"));
          parameter Real fraPFan_nominal(unit="W/(kg/s)") = 275/0.15
            "Fan power divided by water mass flow rate at design condition"
            annotation(Dialog(group="Fan"));
          parameter Modelica.Units.SI.Power PFan_nominal=fraPFan_nominal*m_flow_nominal
            "Fan power" annotation (Dialog(group="Fan"));

          replaceable parameter cha.fan fanRelPow(
               r_V = {0, 0.1,   0.3,   0.6,   1},
               r_P = {0, 0.1^3, 0.3^3, 0.6^3, 1})
            constrainedby cha.fan
            "Fan relative power consumption as a function of control signal, fanRelPow=P(y)/P(y=1)"
            annotation (
            choicesAllMatching=true,
            Placement(transformation(extent={{60,60},{80,80}})),
            Dialog(group="Fan"));

          parameter Real yMin(min=0.01, max=1, unit="1") = 0.3
            "Minimum control signal until fan is switched off (used for smoothing between forced and free convection regime)"
            annotation(Dialog(group="Fan"));

          parameter Real fraFreCon(min=0, max=1) = 0.125
            "Fraction of tower capacity in free convection regime";

          Modelica.Blocks.Interfaces.RealInput y(unit="1") "Fan control signal"
             annotation (Placement(transformation(
                  extent={{-140,60},{-100,100}})));

          Modelica.Blocks.Interfaces.RealInput TAir(
            min=0,
            unit="K",
            displayUnit="degC")
            "Entering air wet bulb temperature"
             annotation (Placement(transformation(
                  extent={{-140,20},{-100,60}})));

          Modelica.Blocks.Interfaces.RealOutput PFan(
            final quantity="Power",
            final unit="W")=
              Buildings.Utilities.Math.Functions.spliceFunction(
                pos=cha.normalizedPower(per=fanRelPow, r_V=y, d=fanRelPowDer) * PFan_nominal,
                neg=0,
                x=y-yMin+yMin/20,
                deltax=yMin/20)
            "Electric power consumed by fan"
            annotation (Placement(transformation(extent={{100,70},{120,90}}),
                iconTransformation(extent={{100,70},{120,90}})));

          Buildings.Fluid.HeatExchangers.CoolingTowers.Correlations.BoundsYorkCalc bou
            "Bounds for correlation";

          Modelica.Units.SI.TemperatureDifference TRan(displayUnit="K") = T_a - T_b
            "Range temperature";
          Modelica.Units.SI.TemperatureDifference TAppAct(displayUnit="K")=
            Buildings.Utilities.Math.Functions.spliceFunction(
            pos=TAppCor,
            neg=TAppFreCon,
            x=y - yMin + yMin/20,
            deltax=yMin/20) "Approach temperature difference";
          Modelica.Units.SI.MassFraction FRWat=m_flow/mWat_flow_nominal
            "Ratio actual over design water mass flow ratio";
          Modelica.Units.SI.MassFraction FRAir=y
            "Ratio actual over design air mass flow ratio";

        protected
          package Water =  Buildings.Media.Water "Medium package for water";
          parameter Real FRWat0(min=0, start=1, fixed=false)
            "Ratio actual over design water mass flow ratio at nominal condition";
          parameter Modelica.Units.SI.Temperature TWatIn0(fixed=false)
            "Water inlet temperature at nominal condition";
          parameter Modelica.Units.SI.Temperature TWatOut_nominal(fixed=false)
            "Water outlet temperature at nominal condition";
          parameter Modelica.Units.SI.MassFlowRate mWat_flow_nominal(
            min=0,
            start=m_flow_nominal,
            fixed=false) "Nominal water mass flow rate";

          Modelica.Units.SI.TemperatureDifference dTMax(displayUnit="K") = T_a - TAir
            "Maximum possible temperature difference";
          Modelica.Units.SI.TemperatureDifference TAppCor(
            min=0,
            displayUnit="K")=
            Buildings.Fluid.HeatExchangers.CoolingTowers.Correlations.yorkCalc(
            TRan=TRan,
            TWetBul=TAir,
            FRWat=FRWat,
            FRAir=Buildings.Utilities.Math.Functions.smoothMax(
              x1=FRWat/bou.liqGasRat_max,
              x2=FRAir,
              deltaX=0.01)) "Approach temperature for forced convection";
          Modelica.Units.SI.TemperatureDifference TAppFreCon(
            min=0,
            displayUnit="K") = (1 - fraFreCon)*dTMax + fraFreCon*
            Buildings.Fluid.HeatExchangers.CoolingTowers.Correlations.yorkCalc(
            TRan=TRan,
            TWetBul=TAir,
            FRWat=FRWat,
            FRAir=1) "Approach temperature for free convection";

          final parameter Real fanRelPowDer[size(fanRelPow.r_V,1)](each fixed=false)
            "Coefficients for fan relative power consumption as a function of control signal";

          Modelica.Units.SI.Temperature T_a "Temperature in port_a";
          Modelica.Units.SI.Temperature T_b "Temperature in port_b";

          Modelica.Blocks.Sources.RealExpression QWat_flow(
            y = eps*m_flow*(
              Medium.specificEnthalpy(Medium.setState_pTX(
                p=port_b.p,
                T=TAir + TAppAct,
                X=inStream(port_b.Xi_outflow))) -
              inStream(port_a.h_outflow)))
            "Heat input into water"
            annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
        initial equation
          TWatOut_nominal = TAirInWB_nominal + TApp_nominal;
          TRan_nominal = TWatIn0 - TWatOut_nominal; // by definition of the range temp.
          TApp_nominal = Buildings.Fluid.HeatExchangers.CoolingTowers.Correlations.yorkCalc(
                           TRan=TRan_nominal, TWetBul=TAirInWB_nominal,
                           FRWat=FRWat0, FRAir=1); // this will be solved for FRWat0
          mWat_flow_nominal = m_flow_nominal/FRWat0;

          // Derivatives for spline that interpolates the fan relative power
          fanRelPowDer = Buildings.Utilities.Math.Functions.splineDerivatives(
                    x=fanRelPow.r_V,
                    y=fanRelPow.r_P,
                    ensureMonotonicity=Buildings.Utilities.Math.Functions.isMonotonic(x=fanRelPow.r_P,
                                                                                      strict=false));
          // Check validity of relative fan power consumption at y=yMin and y=1
          assert(cha.normalizedPower(per=fanRelPow, r_V=yMin, d=fanRelPowDer) > -1E-4,
            "The fan relative power consumption must be non-negative for y=0."
          + "\n   Obtained fanRelPow(0) = " + String(cha.normalizedPower(per=fanRelPow, r_V=yMin, d=fanRelPowDer))
          + "\n   You need to choose different values for the parameter fanRelPow.");
          assert(abs(1-cha.normalizedPower(per=fanRelPow, r_V=1, d=fanRelPowDer))<1E-4, "The fan relative power consumption must be one for y=1."
          + "\n   Obtained fanRelPow(1) = " + String(cha.normalizedPower(per=fanRelPow, r_V=1, d=fanRelPowDer))
          + "\n   You need to choose different values for the parameter fanRelPow."
          + "\n   To increase the fan power, change fraPFan_nominal or PFan_nominal.");

          // Check that a medium is used that has the same definition of enthalpy vs. temperature.
          // This is needed because below, T_a=Water.temperature needed to be hard-coded to use
          // Water.* instead of Medium.* in the function calls due to a bug in OpenModelica.
          assert(abs(Medium.specificEnthalpy_pTX(p=101325, T=273.15, X=Medium.X_default) -
                     Water.specificEnthalpy_pTX(p=101325, T=273.15, X=Medium.X_default)) < 1E-5 and
                 abs(Medium.specificEnthalpy_pTX(p=101325, T=293.15, X=Medium.X_default) -
                     Water.specificEnthalpy_pTX(p=101325, T=293.15, X=Medium.X_default)) < 1E-5,
                 "The selected medium has an enthalpy computation that is not consistent
  with the one in Buildings.Media.Water
  Use a different medium, such as Buildings.Media.Water.");
        equation
          // States at the inlet and outlet

          if allowFlowReversal then
            if homotopyInitialization then
              T_a=Water.temperature(Water.setState_phX(p=port_a.p,
                                         h=homotopy(actual=actualStream(port_a.h_outflow),
                                                    simplified=inStream(port_a.h_outflow)),
                                         X=homotopy(actual=actualStream(port_a.Xi_outflow),
                                                    simplified=inStream(port_a.Xi_outflow))));
              T_b=Water.temperature(Water.setState_phX(p=port_b.p,
                                         h=homotopy(actual=actualStream(port_b.h_outflow),
                                                    simplified=port_b.h_outflow),
                                         X=homotopy(actual=actualStream(port_b.Xi_outflow),
                                                    simplified=port_b.Xi_outflow)));

            else
              T_a=Water.temperature(Water.setState_phX(p=port_a.p,
                                         h=actualStream(port_a.h_outflow),
                                         X=actualStream(port_a.Xi_outflow)));
              T_b=Water.temperature(Water.setState_phX(p=port_b.p,
                                         h=actualStream(port_b.h_outflow),
                                         X=actualStream(port_b.Xi_outflow)));
            end if; // homotopyInitialization

          else // reverse flow not allowed
            T_a=Water.temperature(Water.setState_phX(p=port_a.p,
                                       h=inStream(port_a.h_outflow),
                                       X=inStream(port_a.Xi_outflow)));
            T_b=Water.temperature(Water.setState_phX(p=port_b.p,
                                       h=inStream(port_b.h_outflow),
                                       X=inStream(port_b.Xi_outflow)));
          end if;

          connect(QWat_flow.y, preHea.Q_flow)
            annotation (Line(points={{-59,-60},{-40,-60}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}}), graphics={
                Text(
                  extent={{-104,70},{-70,32}},
                  lineColor={0,0,127},
                  textString="TWB"),
                Text(
                  extent={{-50,4},{42,-110}},
                  lineColor={255,255,255},
                  fillColor={0,127,0},
                  fillPattern=FillPattern.Solid,
                  textString="York"),
                Rectangle(
                  extent={{-100,81},{-70,78}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{78,-58},{102,-62}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{78,-60},{82,-4}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{70,-58},{104,-96}},
                  lineColor={0,0,127},
                  textString="TLvg"),
                Rectangle(
                  extent={{70,56},{82,52}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{78,54},{82,80}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{64,114},{98,76}},
                  lineColor={0,0,127},
                  textString="PFan"),
                Ellipse(
                  extent={{0,62},{54,50}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Ellipse(
                  extent={{-54,62},{0,50}},
                  lineColor={255,255,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{78,82},{100,78}},
                  lineColor={0,0,255},
                  pattern=LinePattern.None,
                  fillColor={0,0,127},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-98,100},{-86,84}},
                  lineColor={0,0,127},
                  textString="y")}),
        Documentation(info="<html>
<p>
Model for a steady-state or dynamic cooling tower with variable speed fan using the York calculation for the
approach temperature at off-design conditions.
</p>
<h4>Thermal performance</h4>
<p>
To compute the thermal performance, this model takes as parameters
the approach temperature, the range temperature and the inlet air wet bulb temperature
at the design condition. Since the design mass flow rate (of the chiller condenser loop)
is also a parameter, these parameters define the rejected heat.
</p>
<p>
For off-design conditions, the model uses the actual range temperature and a polynomial
to compute the approach temperature for free convection and for forced convection, i.e.,
with the fan operating. The polynomial is valid for a York cooling tower.
If the fan input signal <code>y</code> is below the minimum fan revolution <code>yMin</code>,
then the cooling tower operates in free convection mode, otherwise it operates in
the forced convection mode.
For numerical reasons, this transition occurs in the range of <code>y &isin; [0.9*yMin, yMin]</code>.
</p>
<h4>Fan power consumption</h4>
<p>
The fan power consumption at the design condition can be specified as follows:
</p>
<ul>
<li>
The parameter <code>fraPFan_nominal</code> can be used to specify at the
nominal conditions the fan power divided by the water flow rate. The default value is
<i>275</i> Watts for a water flow rate of <i>0.15</i> kg/s.
</li>
<li>
The parameter <code>PFan_nominal</code> can be set to the fan power at nominal conditions.
If a user does not set this parameter, then the fan power will be
<code>PFan_nominal = fraPFan_nominal * m_flow_nominal</code>, where <code>m_flow_nominal</code>
is the nominal water flow rate.
</li>
</ul>
<p>
In the forced convection mode, the actual fan power is
computed as <code>PFan=fanRelPow(y) * PFan_nominal</code>, where
the default value for the fan relative power consumption at part load is
<code>fanRelPow(y)=y<sup>3</sup></code>.
In the free convection mode, the fan power consumption is zero.
For numerical reasons, the transition of fan power from the part load mode
to zero power consumption in the free convection mode occurs in the range
<code>y &isin; [0.9*yMin, yMin]</code>.
<br/>
To change the fan relative power consumption at part load in the forced convection mode,
points of fan controls signal and associated relative power consumption can be specified.
In between these points, the values are interpolated using cubic splines.
</p>
<h4>Comparison the cooling tower model of EnergyPlus</h4>
<p>
This model is similar to the model <code>Cooling Tower:Variable Speed</code> that
is implemented in the EnergyPlus building energy simulation program version 6.0.
The main differences are
</p>
<ol>
<li>
Not implemented are the basin heater power consumption, and
the make-up water usage.
</li>
<li>
The model has no built-in control to switch individual cells of the tower on or off.
To switch cells on or off, use multiple instances of this model, and use your own
control law to compute the input signal <code>y</code>.
</li>
</ol>
<h4>Assumptions and limitations</h4>
<p>
This model requires a medium that has the same computation of the enthalpy as
<a href=\"Buildings.Media.Water\">
Buildings.Media.Water</a>,
which computes
</p>
<p align=\"center\" style=\"font-style:italic;\">
 h = c<sub>p</sub> (T-T<sub>0</sub>),
</p>
<p>
where
<i>h</i> is the enthalpy,
<i>c<sub>p</sub> = 4184</i> J/(kg K) is the specific heat capacity,
<i>T</i> is the temperature in Kelvin and
<i>T<sub>0</sub> = 273.15</i> Kelvin.
If this is not the case, the simulation will stop with an error message.
The reason for this limitation is that as of January 2015, OpenModelica
failed to translate the model if <code>Medium.temperature()</code> is used
instead of
<code>Water.temperature()</code>.
</p>
<h4>References</h4>
<p>
<a href=\"http://www.energyplus.gov\">EnergyPlus 2.0.0 Engineering Reference</a>, April 9, 2007.
</p>
</html>",         revisions="<html>
<ul>
<li>
January 16, 2020, by Michael Wetter:<br/>
Refactored model to avoid mixing textual equations and connect statements.
</li>
<li>
December, 22, 2019, by Kathryn Hinkelman:<br/>
Corrected fan power consumption.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1691\">
issue 1691</a>.
</li>
<li>
November 3, 2016, by Michael Wetter:<br/>
Corrected wrong type for <code>FRWat0</code>, as this variable
can take on values that are bigger than <i>1</i>.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/567\">issue 567</a>.
</li>
<li>
January 2, 2015, by Michael Wetter:<br/>
Replaced <code>Medium.temperature()</code> with
<code>Water.temperature()</code> in order for the model
to work with OpenModelica.
Added an <code>assert</code> that stops the simulation if
an incompatible medium is used.
</li>
<li>
November 13, 2014, by Michael Wetter:<br/>
Added missing <code>each</code> keyword for <code>fanRelPowDer</code>.
Added regularization in computation of <code>TAppCor</code>.
Removed intermediate states with temperatures.
</li>
<li>
May 30, 2014, by Michael Wetter:<br/>
Removed undesirable annotation <code>Evaluate=true</code>.
</li>
<li>
October 9, 2013, by Michael Wetter:<br/>
Simplified the implementation for the situation if
<code>allowReverseFlow=false</code>.
Avoided the use of the conditionally enabled variables <code>sta_a</code> and
<code>sta_b</code> as this was not proper use of the Modelica syntax.
</li>
<li>
September 29, 2011, by Michael Wetter:<br/>
Revised model to use cubic spline interpolation instead of a polynomial.
</li>
<li>
July 12, 2011, by Michael Wetter:<br/>
Introduced common base class for
<a href=\"modelica://Buildings.Fluid.HeatExchangers.CoolingTowers.YorkCalc\">Buildings.Fluid.HeatExchangers.CoolingTowers.YorkCalc</a>
and
<a href=\"modelica://Buildings.Fluid.HeatExchangers.CoolingTowers.FixedApproach\">Buildings.Fluid.HeatExchangers.CoolingTowers.FixedApproach</a>
so that they can be used as replaceable models.
</li>
<li>
May 12, 2011, by Michael Wetter:<br/>
Added binding equations for <code>Q_flow</code> and <code>mXi_flow</code>.
</li>
<li>
March 8, 2011, by Michael Wetter:<br/>
Removed base class and unused variables.
</li>
<li>
February 25, 2011, by Michael Wetter:<br/>
Revised implementation to facilitate scaling the model to different nominal sizes.
Removed parameter <code>mWat_flow_nominal</code> since it is equal to <code>m_flow_nominal</code>,
which is the water flow rate from the chiller condenser loop.
</li>
<li>
May 16, 2008, by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
        end YorkCalc;
      end BaseClasses;

      package Control "Basic modeld for control system"
        package BaseClasses

          block MultiSwitch
            "Set Real expression that is associated with the first active input signal"

            input Real expr[nu]=fill(0.0, nu)
              "y = if u[i] then expr[i] else y_default (time varying)"
              annotation (Dialog);
            parameter Real y_default=0.0
              "Default value of output y if all u[i] = false";

            parameter Integer nu(min=0) = 0 "Number of input connections"
              annotation (Dialog(connectorSizing=true), HideResult=true);
            parameter Integer precision(min=0) = 3
              "Number of significant digits to be shown in dynamic diagram layer for y"
              annotation (Dialog(tab="Advanced"));

            Modelica.Blocks.Interfaces.BooleanVectorInput u[nu]
              "Set y = expr[i], if u[i] = true"
              annotation (Placement(transformation(extent={{-110,30},{-90,-30}})));
            Modelica.Blocks.Interfaces.RealOutput y "Output depending on expression"
              annotation (Placement(transformation(extent={{300,-10},{320,10}})));

          protected
            Integer firstActiveIndex;

          equation
            firstActiveIndex = Modelica.Math.BooleanVectors.firstTrueIndex(u);
            y = if firstActiveIndex == 0 then y_default else expr[firstActiveIndex];
            annotation (
              defaultComponentName="multiSwitch1",
              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{300,
                      100}}), graphics={
                  Rectangle(
                    extent={{-100,-51},{300,50}},
                    lineThickness=5.0,
                    lineColor={0,0,0},
                    fillColor={170,213,255},
                    fillPattern=FillPattern.Solid,
                    borderPattern=BorderPattern.Raised),
                  Text(
                    extent={{-86,16},{295,-17}},
                    lineColor={0,0,0},
                    fillColor={255,246,238},
                    fillPattern=FillPattern.Solid,
                    textString="%expr"),
                  Text(
                    extent={{310,-25},{410,-45}},
                    lineColor={0,0,0},
                    textString=DynamicSelect(" ", String(
                          y,
                          minimumLength=1,
                          significantDigits=precision))),
                  Text(
                    extent={{-100,-60},{300,-90}},
                    lineColor={0,0,0},
                    textString="else: %y_default"),
                  Text(
                    extent={{-100,100},{300,60}},
                    textString="%name",
                    lineColor={0,0,255})}),
              Documentation(info="<html>
<p>
This block has a vector of Boolean input signals u[nu] and a vector of
(time varying) Real expressions expr[nu]. The output signal y is
set to expr[i], if i is the first element in the input vector u that is true. If all input signals are
false, y is set to parameter \"y_default\".
</p>

<blockquote><pre>
  // Conceptual equation (not valid Modelica)
  i = 'first element of u[:] that is true';
  y = <b>if</b> i==0 <b>then</b> y_default <b>else</b> expr[i];
</pre></blockquote>

<p>
The input connector is a vector of Boolean input signals.
When a connection line is drawn, the dimension of the input
vector is enlarged by one and the connection is automatically
connected to this new free index (thanks to the
connectorSizing annotation).
</p>

<p>
The usage is demonstrated, e.g., in example
<a href=\"modelica://Modelica.Blocks.Examples.RealNetwork1\">Modelica.Blocks.Examples.RealNetwork1</a>.
</p>

</html>"));
          end MultiSwitch;

          model StageN "Stage controller for N states"
            parameter Real tWai "Waiting time";

            parameter Integer n=3
              "the number of chillers";

            Modelica.StateGraph.InitialStepWithSignal
                                      AllOff(
              nOut=1, nIn=1)
                     "Both of the two compressors are off"
              annotation (Placement(transformation(extent={{-10,10},{10,-10}},
                  rotation=-90,
                  origin={0,72})));
            Modelica.Blocks.Interfaces.BooleanInput On[n] "On signal"
              annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
            Modelica.StateGraph.StepWithSignal iOn[n-1](nIn=2, nOut=2) annotation (
                Placement(transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=90,
                  origin={0,2})));
            Modelica.StateGraph.TransitionWithSignal
                                           Off2One               annotation (Placement(
                  transformation(
                  extent={{10,10},{-10,-10}},
                  rotation=90,
                  origin={-50,44})));
            Modelica.StateGraph.TransitionWithSignal
                                           One2Off                   annotation (
                Placement(transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=90,
                  origin={52,48})));
            Modelica.StateGraph.StepWithSignal nOn(nOut=1, nIn=1)
                                                           annotation (Placement(
                  transformation(
                  extent={{10,-10},{-10,10}},
                  rotation=90,
                  origin={0,-80})));
            Modelica.StateGraph.TransitionWithSignal
                                           nmin12n(
              enableTimer=true,
              waitTime=tWai)                                           annotation (
                Placement(transformation(
                  extent={{10,10},{-10,-10}},
                  rotation=90,
                  origin={-50,-54})));
            Modelica.StateGraph.TransitionWithSignal
                                           N2Nmin1(
              waitTime=tWai,
              enableTimer=true)                                 annotation (Placement(
                  transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=90,
                  origin={40,-60})));
            inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
              annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
            BaseClasses.MultiSwitch
                        multiSwitch(nu=n+1, expr=linspace(
                  0,
                  n,
                  n + 1))
              annotation (Placement(transformation(extent={{76,-26},{92,-6}})));
            Modelica.StateGraph.TransitionWithSignal
                                           imin12i[n - 2](
              enableTimer=true,
              waitTime=tWai)  annotation (Placement(
                  transformation(
                  extent={{10,10},{-10,-10}},
                  rotation=90,
                  origin={-50,0})));
            Modelica.StateGraph.TransitionWithSignal
                                           i2imin1[n - 2](
              waitTime=tWai,
              enableTimer=true)  annotation (Placement(
                  transformation(
                  extent={{-10,10},{10,-10}},
                  rotation=90,
                  origin={66,0})));
            Modelica.Blocks.Interfaces.BooleanInput Off[n] "On signal"
              annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
            Modelica.Blocks.Interfaces.RealOutput y "Output depending on expression"
              annotation (Placement(transformation(extent={{100,-10},{120,10}})));
          equation

            connect(AllOff.outPort[1], Off2One.inPort) annotation (Line(points={{0,61.5},{
                    0,61.5},{0,54},{0,52},{-50,52},{-50,48}},  color={0,0,0}));
            connect(nmin12n.outPort, nOn.inPort[1]) annotation (Line(points={{-50,-55.5},{
                    -50,-62},{0,-62},{0,-66},{6.66134e-016,-66},{6.66134e-016,-69}},
                                               color={0,0,0}));
            connect(nOn.outPort[1], N2Nmin1.inPort) annotation (Line(points={{-6.66134e-016,
                    -90.5},{-6.66134e-016,-98},{40,-98},{40,-64}},
                                                    color={0,0,0}));
            connect(One2Off.outPort, AllOff.inPort[1]) annotation (Line(points={{52,49.5},
                    {52,49.5},{52,86},{52,88},{1.9984e-015,88},{1.9984e-015,83}}, color={
                    0,0,0}));

            connect(Off2One.outPort, iOn[1].inPort[1]) annotation (Line(points={{-50,42.5},
                    {-50,42.5},{-50,26},{-0.5,26},{-0.5,13}}, color={0,0,0}));
            connect(iOn[1].outPort[2], One2Off.inPort) annotation (Line(points={{0.25,
                    -8.5},{2,-8.5},{2,-20},{52,-20},{52,44}},
                                                         color={0,0,0}));
            connect(nmin12n.inPort, iOn[n-1].outPort[1]) annotation (Line(points={{-50,-50},
                    {-50,-40},{-0.25,-40},{-0.25,-8.5}},  color={0,0,0}));

            connect(AllOff.active, multiSwitch.u[1]);
            for i in 1:n-1 loop
              connect(iOn[i].active, multiSwitch.u[i + 1]);
            end for;
            connect(nOn.active, multiSwitch.u[n + 1]);

            connect(Off2One.condition, On[1]);
              for i in 1:n-2 loop
               connect(imin12i[i].condition, On[i+1]);
              end for;
            connect(nmin12n.condition, On[n]);

            connect(One2Off.condition, Off[1]);
              for i in 1:n-2 loop
               connect(i2imin1[i].condition, Off[i+1]);
              end for;
            connect(N2Nmin1.condition, Off[n]);
            for i in 1:n-2 loop
               connect(iOn[i].outPort[1], imin12i[i].inPort);
               connect(imin12i[i].outPort, iOn[i+1].inPort[1]);
               connect(i2imin1[i].inPort, iOn[i+1].outPort[2]);
               connect(i2imin1[i].outPort, iOn[i].inPort[2]);
            end for;

            connect(N2Nmin1.outPort, iOn[n-1].inPort[2]) annotation (Line(points={{40,
                    -58.5},{40,-58.5},{40,16},{0.5,16},{0.5,13}},
                                                           color={0,0,0}));
            connect(multiSwitch.y, y) annotation (Line(
                points={{92.4,-16},{96,-16},{98,-16},{98,0},{110,0}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                      -100},{100,100}})),           Icon(coordinateSystem(
                    preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                    Rectangle(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,255},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Text(
                    extent={{-56,42},{58,-42}},
                    lineColor={0,0,255},
                    textString="CompressorStage"),
                  Text(
                    extent={{-44,-144},{50,-112}},
                    lineColor={0,0,255},
                    textString="%name"),
                  Text(
                    extent={{-150,106},{150,146}},
                    textString="%name",
                    textColor={0,0,255})}),
              Documentation(revisions="<html>
<ul>
<li>
March 19, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
          end StageN;
        end BaseClasses;

        model PlantStageCondition
          "Stage checking for N chillers or N boilers"

          parameter Real thehol[n-1]
            "Threshold";

          parameter Real Cap[n]
            "Normal Cooling Capacity";

          parameter Integer n=3
            "Number of chillers";

          Real PLR
            "Part load ratio";
          Real cap_avi
            "Available cooling capacity";

          Modelica.Blocks.Interfaces.RealInput Loa "Load signal"
            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
          Modelica.Blocks.Interfaces.RealInput Status[n] "Status signal"
            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
          Modelica.Blocks.Interfaces.BooleanOutput On[n] "Staging up signal"
            annotation (Placement(transformation(extent={{100,30},{120,50}})));
          Modelica.Blocks.Interfaces.BooleanOutput Off[n] "Staging down signal"
            annotation (Placement(transformation(extent={{100,-50},{120,-30}})));
          Modelica.Blocks.Interfaces.BooleanInput OnSin "On signal"
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));

        algorithm
            cap_avi :=0;
            for i in 1:n loop
             cap_avi :=cap_avi + Status[i]*Cap[i];
            end for;
            if cap_avi>0.01 then
            PLR:=Loa/cap_avi;
            else
            PLR:=0;
            end if;
            On[1] :=OnSin;
            Off[1] :=not OnSin;

            for i in 2:n loop
                On[i] :=PLR > thehol[i - 1] and Status[i - 1] > 0;
            end for;

            for i in 2:n loop
                Off[i] :=PLR*(sum(Status)/(sum(Status) - 1 + 0.0001)) < thehol[i - 1]
               and Status[i] > 0;
            end for;
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}})),           Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-56,42},{58,-42}},
                  lineColor={0,0,255},
                  textString="StageCheck"),
                Text(
                  extent={{-44,-144},{50,-112}},
                  lineColor={0,0,255},
                  textString="%name")}),
            Documentation(revisions="<html>
<ul>
<li>
March 19, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
        end PlantStageCondition;

        model PlantStageN "Combined stage controller for N chillers or N boilers"
          parameter Real tWai "Waiting time";

          parameter Real thehol[n-1] "Threshold";

          parameter Real Cap[n] "Rated Plant Capacity";

          parameter Integer n=3
            "the number of chillers";

          Modelica.Blocks.Interfaces.RealOutput y[n]( each start=0)
            "Output of stage control"
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
          Modelica.Blocks.Interfaces.BooleanInput
                                               On "On signal"
            annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
          Modelica.Blocks.Interfaces.RealInput Status[n] "Compressor speed ratio"
            annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
          Modelica.Blocks.Interfaces.RealInput Loa
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          PlantStageCondition plantNStageCondition(
            thehol=thehol,
            n=n,
            Cap=Cap) annotation (Placement(transformation(extent={{-60,-16},{
                    -40,4}})));
          BaseClasses.StageN NStage(tWai=tWai, n=n)
            annotation (Placement(transformation(extent={{-8,-18},{12,2}})));
        equation

          for i in 1:n loop
             y[i] =if i <= integer(NStage.y) then 1 else 0;
          end for;

          connect(plantNStageCondition.OnSin, On) annotation (Line(
              points={{-62,-6},{-80,-6},{-80,80},{-120,80}},
              color={255,0,255}));
          connect(plantNStageCondition.Loa, Loa) annotation (Line(
              points={{-62,0},{-120,0}},
              color={0,0,127}));
          connect(plantNStageCondition.Status, Status) annotation (Line(
              points={{-62,-12},{-80,-12},{-80,-80},{-120,-80}},
              color={0,0,127}));
          connect(plantNStageCondition.Off, NStage.Off) annotation (Line(
              points={{-39,-10},{-24,-10},{-24,-14},{-10,-14}},
              color={255,0,255}));
          connect(plantNStageCondition.On, NStage.On) annotation (Line(
              points={{-39,-2},{-10,-2}},
              color={255,0,255}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}})),           Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-56,42},{58,-42}},
                  lineColor={0,0,255},
                  textString="ChiSta"),
                Text(
                  extent={{-44,-144},{50,-112}},
                  lineColor={0,0,255},
                  textString="%name"),
                Text(
                  extent={{-152,106},{148,146}},
                  textString="%name",
                  textColor={0,0,255})}),
            Documentation(revisions="<html>
<ul>
<li>
March 19, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
        end PlantStageN;

        model PumpStageCondition "Stage checking for N pumps"

          parameter Real thehol_up "Threshold for staging up";

            parameter Real thehol_down "Threshold for staging down";

          parameter Integer n=3
            "the number of chillers";

          Modelica.Blocks.Interfaces.RealInput Status[n] "On signal"
            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
          Modelica.Blocks.Interfaces.BooleanOutput On[n]
            annotation (Placement(transformation(extent={{100,30},{120,50}})));
          Modelica.Blocks.Interfaces.BooleanOutput Off[n]
            annotation (Placement(transformation(extent={{100,-50},{120,-30}})));
          Modelica.Blocks.Interfaces.BooleanInput OnSin "On signal"
            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        equation

            On[1] =  OnSin;
            Off[1] =  not OnSin;
            for i in 2:n loop
             On[i] = Status[i-1]>thehol_up and Status[i-1]>0;
            end for;

            for i in 2:n loop
             Off[i] = Status[i]<thehol_down*0.9 and Status[i]>0;
            end for;

          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}})),           Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-56,42},{58,-42}},
                  lineColor={0,0,255},
                  textString="StageCheck"),
                Text(
                  extent={{-44,-144},{50,-112}},
                  lineColor={0,0,255},
                  textString="%name"),
                Text(
                  extent={{-152,104},{148,144}},
                  textString="%name",
                  textColor={0,0,255})}),
            Documentation(revisions="<html>
<ul>
<li>
March 19, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
        end PumpStageCondition;

        model PumpStageN "Combined stage controller for N pumps"
          parameter Real tWai "Waiting time";

          parameter Real thehol_up = 0.9 "Threshold for staging up";

          parameter Real thehol_down = 0.6 "Threshold for staging down";

          parameter Integer n=3
            "the number of pumps";

          Modelica.Blocks.Interfaces.RealOutput y[n]
            "Output of stage control"
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
          Modelica.Blocks.Interfaces.BooleanInput
                                               On "On signal"
            annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
          Modelica.Blocks.Interfaces.RealInput Status[n] "Compressor speed ratio"
            annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
          PumpStageCondition pumNStaCon(
            n=n,
            thehol_up=thehol_up,
            thehol_down=thehol_down)
            annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
          BaseClasses.StageN pumNSta(tWai=tWai, n=n)
            annotation (Placement(transformation(extent={{-8,-10},{12,10}})));
        equation

            for i in 1:n loop
            y[i]=if i > pumNSta.y then 0 else 1;

            end for;

          connect(pumNStaCon.OnSin, On) annotation (Line(points={{-62,6},{-80,6},
                  {-80,80},{-120,80}}, color={255,0,255}));
          connect(pumNStaCon.Status, Status) annotation (Line(points={{-62,-6},
                  {-80,-6},{-80,-80},{-120,-80}}, color={0,0,127}));
          connect(pumNStaCon.Off, pumNSta.Off) annotation (Line(points={{-39,-4},
                  {-20,-4},{-20,-6},{-10,-6}}, color={255,0,255}));
          connect(pumNStaCon.On, pumNSta.On) annotation (Line(points={{-39,4},{
                  -20,4},{-20,6},{-10,6}}, color={255,0,255}));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}})),           Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-54,42},{60,-42}},
                  lineColor={0,0,255},
                  textString="PumSta"),
                Text(
                  extent={{-154,102},{146,142}},
                  textString="%name",
                  textColor={0,0,255})}),
            Documentation(revisions="<html>
<ul>
<li>
March 19, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
        end PumpStageN;

        model ChillerStageNWithRotation
          "Combined stage controller for N chillers"
          parameter Real tWai "Waiting time";

          parameter Real thehol[n-1] "Threshold";

          parameter Real Cap[n] "Rated Plant Capacity";

          parameter Integer n=3
            "the number of chillers";

          Modelica.Blocks.Interfaces.RealOutput y[n]
            "Output of stage control"
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
          Modelica.Blocks.Interfaces.BooleanInput
                                               On "On signal"
            annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
          Modelica.Blocks.Interfaces.RealInput Status[n] "Compressor speed ratio"
            annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
          Modelica.Blocks.Interfaces.RealInput Loa
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          PlantStageCondition plantNStageCondition(
            thehol=thehol,
            n=n,
            Cap=Cap)
                 annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
          BaseClasses.StageN NStage(tWai=tWai, n=n)
            annotation (Placement(transformation(extent={{-8,-10},{12,10}})));
          Modelica.Blocks.Continuous.Integrator counter[n]
            annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
          Modelica.Blocks.Discrete.Sampler sampler[n](                   startTime=0,
              samplePeriod=1800)
            annotation (Placement(transformation(extent={{0,-60},{20,-40}})));
          Modelica.Blocks.Sources.RealExpression record_status[n](y=y_with_no_order)
            annotation (Placement(transformation(extent={{-98,-30},{-78,-10}})));
          Modelica.Blocks.Interfaces.RealInput sort_index[n] "Compressor speed ratio"
            annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        protected
          Boolean change;

          Real last_value;

          Real y_with_no_order[n];

        public
          Modelica.Blocks.Interfaces.RealOutput runTim[n] "Continuous output signal"
            annotation (Placement(transformation(extent={{100,-90},{120,-70}})));
        initial algorithm

          last_value :=NStage.y;

          y_with_no_order :=y;

        equation

        algorithm
          when pre(change) then

            for i in 1:n loop

                 y_with_no_order[i] := if i <= integer(NStage.y) then 1 else 0;
                 y[i] := if integer(sort_index[i]) <= integer(NStage.y) then 1 else 0;

            end for;
            last_value := NStage.y;
          end when;

          change := abs(NStage.y - last_value) >= 0.1;

        equation
          connect(plantNStageCondition.OnSin, On) annotation (Line(points={{-62,0},{-80,
                  0},{-80,80},{-120,80}}, color={255,0,255},
              pattern=LinePattern.Dash));
          connect(plantNStageCondition.Loa, Loa) annotation (Line(
              points={{-62,6},{-78,6},{-94,6},{-94,0},{-120,0}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(plantNStageCondition.Off, NStage.Off) annotation (Line(
              points={{-39,-4},{-20,-4},{-20,-6},{-10,-6}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(plantNStageCondition.On, NStage.On) annotation (Line(
              points={{-39,4},{-20,4},{-20,6},{-10,6}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(record_status.y, plantNStageCondition.Status) annotation (Line(
              points={{-77,-20},{-68,-20},{-68,-6},{-62,-6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(counter.u, Status) annotation (Line(points={{-62,-50},{-80,-50},{-80,-80},
                  {-120,-80}}, color={0,0,127},
              pattern=LinePattern.Dash));
          connect(sampler.u, counter.y)
            annotation (Line(points={{-2,-50},{-39,-50}},           color={0,0,127},
              pattern=LinePattern.Dash));
          connect(sampler.y, runTim) annotation (Line(
              points={{21,-50},{60,-50},{60,-80},{110,-80}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                    -100},{100,100}})),           Icon(coordinateSystem(
                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,255},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-56,42},{58,-42}},
                  lineColor={0,0,255},
                  textString="CompressorStage"),
                Text(
                  extent={{-44,-144},{50,-112}},
                  lineColor={0,0,255},
                  textString="%name")}),
            Documentation(revisions="<html>
<ul>
<li>
March 19, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
        end ChillerStageNWithRotation;

        package Example "Test of the modules"
        extends Modelica.Icons.ExamplesPackage;

          model PlantStageN
            import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
            extends Modelica.Icons.Example;
            parameter Real tWai = 300 "Waiting time";

            BuildingControlEmulator.Devices.WaterSide.Control.PlantStageN plantSta(
              tWai=tWai,
              n=3,
              thehol={0.9,0.9},
              Cap={1,1,1})
              annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
            Modelica.Blocks.Sources.Sine loa(
              f=1/3600/24,
              amplitude=3,
              offset=0)
              annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
            Modelica.Blocks.Sources.Step On(
              height=2,
              offset=-1,
              startTime=300)
              annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
            Modelica.Blocks.Math.RealToBoolean realToBoolean
              annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
          equation

            connect(On.y, realToBoolean.u)
              annotation (Line(points={{-59,70},{-59,70},{-42,70}},   color={0,0,127},
                pattern=LinePattern.Dash));
            connect(realToBoolean.y, plantSta.On) annotation (Line(
                points={{-19,70},{40,70},{40,20},{-40,20},{-40,8},{-12,8}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(loa.y, plantSta.Loa) annotation (Line(
                points={{-59,0},{-40,0},{-12,0}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(plantSta.y, plantSta.Status) annotation (Line(
                points={{11,0},{26,0},{40,0},{40,-60},{-28,-60},{-28,-8},{-12,-8}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            annotation (__Dymola_Commands(file=
                    "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/BaseClasses/Control/Example/CompressorStage.mos"
                  "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
              experiment(StopTime=86400),
              __Dymola_experimentSetupOutput,
              Documentation(info="<html>
<p>This model is designed to test how the stage works when the measured T changes by time(Sine function).</p>
</html>"));
          end PlantStageN;

          model PumpStageN
            import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;

            extends Modelica.Icons.Example;
            parameter Real tWai = 300 "Waiting time";

            Modelica.Blocks.Sources.Sine s1(
              f=1/3600/24,
              amplitude=0.5,
              offset=0.5)
              annotation (Placement(transformation(extent={{-80,-20},{-60,0}})));
            Modelica.Blocks.Sources.Step On(
              height=-1,
              offset=1,
              startTime=80000)
              annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
            Modelica.Blocks.Math.RealToBoolean realToBoolean
              annotation (Placement(transformation(extent={{-24,60},{-4,80}})));
            Modelica.Blocks.Sources.Sine s2(
              f=1/3600/24,
              amplitude=0.5,
              offset=0.5,
              startTime=2400)
              annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
            BuildingControlEmulator.Devices.WaterSide.Control.PumpStageN pumpStageN(
              tWai=300,
              thehol_up=0.9,
              thehol_down=0.6,
              n=2) annotation (Placement(transformation(extent={{-8,-10},{12,10}})));
          equation

            connect(On.y, realToBoolean.u)
              annotation (Line(points={{-39,70},{-32.5,70},{-26,70}}, color={0,0,127},
                pattern=LinePattern.Dash));
            connect(realToBoolean.y, pumpStageN.On) annotation (Line(
                points={{-3,70},{10,70},{20,70},{20,30},{-20,30},{-20,8},{-10,8}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(s1.y, pumpStageN.Status[1]) annotation (Line(
                points={{-59,-10},{-32,-10},{-32,-9},{-10,-9}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(s2.y, pumpStageN.Status[2]) annotation (Line(
                points={{-59,-50},{-26,-50},{-26,-7},{-10,-7}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            annotation (__Dymola_Commands(file=
                    "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/BaseClasses/Control/Example/CompressorStage.mos"
                  "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
              experiment(StopTime=86400),
              __Dymola_experimentSetupOutput,
              Documentation(info="<html>
<p>This model is designed to test how the stage works when the measured T changes by time(Sine function).</p>
</html>"));
          end PumpStageN;
          annotation (Documentation(info="<html>
<p>This package contains examples for the use of models that can be found in SupervisorControl.</p>
</html>"));
        end Example;
      end Control;

      model Chiller "Chiller"
        replaceable package MediumCHW =
           Modelica.Media.Interfaces.PartialMedium
          "Medium in the chilled water side";
        replaceable package MediumCW =
           Modelica.Media.Interfaces.PartialMedium
          "Medium in the condenser water side";
        parameter Modelica.Units.SI.Pressure dPCHW_nominal
          "Pressure difference at the chilled water side";
        parameter Modelica.Units.SI.Pressure dPCW_nominal
          "Pressure difference at the condenser water wide";
        parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal
          "Nominal mass flow rate at the chilled water side";
        parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal
          "Nominal mass flow rate at the condenser water wide";
        parameter Modelica.Units.SI.Temperature TCW_start
          "The start temperature of condenser water side";
        parameter Modelica.Units.SI.Temperature TCHW_start
          "The start temperature of chilled water side";

         parameter Buildings.Fluid.Chillers.Data.ElectricEIR.Generic per
          "Performance data"
          annotation (choicesAllMatching = true,
                      Placement(transformation(extent={{40,80},{60,100}})));

        BaseClasses.ElectricEIR         chi(
          redeclare package Medium1 = MediumCW,
          redeclare package Medium2 = MediumCHW,
          m1_flow_nominal=mCW_flow_nominal,
          m2_flow_nominal=mCHW_flow_nominal,
          dp1_nominal=0,
          dp2_nominal=0,
          allowFlowReversal1=true,
          allowFlowReversal2=true,
          tau1=300,
          tau2=300,
          T1_start=TCW_start,
          T2_start=TCHW_start,
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
          per=per)       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={0,-42})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_CW(redeclare package
            Medium =
              MediumCW)
          "Fluid connector a1 (positive design flow direction is from port_a1 to port_b1)"
          annotation (Placement(transformation(extent={{-110,-90},{-90,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_CW(redeclare package
            Medium =
              MediumCW)
          "Fluid connector b1 (positive design flow direction is from port_a1 to port_b1)"
          annotation (Placement(transformation(extent={{-110,70},{-90,90}}),
              iconTransformation(extent={{-110,70},{-90,90}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_CHW(redeclare package
            Medium =
              MediumCHW)
          "Fluid connector b2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,-90},{110,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_CHW(redeclare package
            Medium =
              MediumCHW)
          "Fluid connector a2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,70},{110,90}}),
              iconTransformation(extent={{90,70},{110,90}})));
        replaceable Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLea(
          redeclare package Medium = MediumCHW,
          m_flow_nominal=mCHW_flow_nominal,
          T_start=TCHW_start)
          annotation (Placement(transformation(extent={{20,-90},{40,-70}})));
        Buildings.Fluid.Actuators.Valves.TwoWayLinear valCW(
          redeclare package Medium = MediumCW,
          m_flow_nominal=mCW_flow_nominal,
          allowFlowReversal=false,
          dpValve_nominal=dPCW_nominal)
          annotation (Placement(transformation(extent={{-60,90},{-80,70}})));
        Buildings.Fluid.Actuators.Valves.TwoWayLinear valCHW(
          redeclare package Medium = MediumCHW,
          m_flow_nominal=mCHW_flow_nominal,
          dpValve_nominal=dPCHW_nominal)
          annotation (Placement(transformation(extent={{60,-90},{80,-70}})));
        Modelica.Blocks.Interfaces.RealInput On(min=0,max=1)
          "True to enable compressor to operate, or false to disable the operation of the compressor"
          annotation (Placement(transformation(extent={{-118,-50},{-100,-30}}),
              iconTransformation(extent={{-140,-70},{-100,-30}})));
        Modelica.Blocks.Interfaces.RealInput TCHWSet
          "Temperature setpoint of chilled water"
          annotation (Placement(transformation(extent={{-118,30},{-100,50}}),
              iconTransformation(extent={{-140,10},{-100,50}})));
        Modelica.Blocks.Interfaces.RealOutput P
          "Electric power consumed by compressor"
          annotation (Placement(transformation(extent={{100,30},{120,50}}),
              iconTransformation(extent={{100,30},{120,50}})));

        Modelica.Blocks.Math.RealToBoolean realToBoolean
          annotation (Placement(transformation(extent={{-56,-66},{-42,-52}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCWLea(
          allowFlowReversal=true,
          redeclare package Medium = MediumCW,
          m_flow_nominal=mCW_flow_nominal) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-40,0})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEnt(
          allowFlowReversal=true,
          redeclare package Medium = MediumCW,
          m_flow_nominal=mCW_flow_nominal) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-40,-80})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWEnt(
          allowFlowReversal=true,
          redeclare package Medium = MediumCHW,
          m_flow_nominal=mCHW_flow_nominal) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={30,0})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloCHW(redeclare package
            Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{72,-10},{54,10}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloCW(redeclare package
            Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{-78,-90},{-60,-70}})));
        Buildings.Fluid.Sensors.Pressure senPreCHWEnt(redeclare package Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{2,10},{22,30}})));
        Buildings.Fluid.Sensors.Pressure senPreCHWLea(redeclare package Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{78,-50},{98,-30}})));
        Buildings.Fluid.Sensors.Pressure     senPreCWLea(redeclare package
            Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{-76,68},{-96,48}})));
        Buildings.Fluid.Sensors.Pressure senPreCWEnt(redeclare package Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{-96,-70},{-76,-50}})));
        replaceable
          .MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator.Devices.Control.conPI
          conPI(
          Ti=2400,
          k=1,
          reverseActing=false)
          annotation (Placement(transformation(extent={{-26,52},{-6,72}})));

      equation
        connect(chi.port_b2, senTCHWLea.port_a) annotation (Line(
            points={{6,-52},{6,-80},{20,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(chi.P, P) annotation (Line(
            points={{-9,-31},{-9,40},{110,40}},
            color={0,0,127},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(senTCHWLea.port_b, valCHW.port_a) annotation (Line(
            points={{40,-80},{60,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(valCHW.port_b, port_b_CHW) annotation (Line(
            points={{80,-80},{100,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(valCW.port_b, port_b_CW) annotation (Line(
            points={{-80,80},{-100,80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(realToBoolean.y, chi.on) annotation (Line(
            points={{-41.3,-59},{-3,-59},{-3,-54}},
            color={255,0,255},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(On, valCW.y) annotation (Line(
            points={{-109,-40},{-90,-40},{-70,-40},{-70,-26},{-70,-26},{-70,68}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(valCHW.y, valCW.y) annotation (Line(
            points={{70,-68},{70,-26},{-70,-26},{-70,68}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(realToBoolean.u, valCW.y) annotation (Line(
            points={{-57.4,-59},{-70,-59},{-70,-40},{-70,-26},{-70,68}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(chi.port_b1, senTCWLea.port_a) annotation (Line(
            points={{-6,-32},{-6,0},{-30,0}},
            color={0,127,255},
            thickness=1));
        connect(senTCWLea.port_b, valCW.port_a) annotation (Line(
            points={{-50,0},{-50,0},{-54,0},{-54,80},{-60,80}},
            color={0,127,255},
            thickness=1));
        connect(senTCWEnt.port_b, chi.port_a1) annotation (Line(
            points={{-30,-80},{-6,-80},{-6,-52}},
            color={0,127,255},
            thickness=1));
        connect(senTCHWEnt.port_b, chi.port_a2) annotation (Line(
            points={{20,0},{6,0},{6,-32}},
            color={0,127,255},
            thickness=1));
        connect(senPreCHWEnt.port, chi.port_a2) annotation (Line(
            points={{12,10},{12,0},{6,0},{6,-32}},
            color={0,127,255},
            thickness=1));
        connect(senPreCHWLea.port, port_b_CHW) annotation (Line(
            points={{88,-50},{88,-50},{88,-80},{100,-80}},
            color={0,127,255},
            thickness=1));
        connect(senPreCWLea.port, port_b_CW) annotation (Line(
            points={{-86,68},{-86,80},{-100,80}},
            color={0,127,255},
            thickness=1));
        connect(senMasFloCHW.port_b, senTCHWEnt.port_a) annotation (Line(
            points={{54,0},{47,0},{40,0}},
            color={0,127,255},
            thickness=1));
        connect(senMasFloCHW.port_a, port_a_CHW) annotation (Line(
            points={{72,0},{80,0},{80,80},{100,80}},
            color={0,127,255},
            thickness=1));
        connect(senMasFloCW.port_b, senTCWEnt.port_a) annotation (Line(
            points={{-60,-80},{-55,-80},{-50,-80}},
            color={0,127,255},
            thickness=1));
        connect(senMasFloCW.port_a, port_a_CW) annotation (Line(
            points={{-78,-80},{-100,-80}},
            color={0,127,255},
            thickness=1));
        connect(senPreCWEnt.port, port_a_CW) annotation (Line(
            points={{-86,-70},{-86,-80},{-100,-80}},
            color={0,127,255},
            thickness=1));
        connect(conPI.On, chi.on) annotation (Line(
            points={{-28,68},{-32,68},{-32,-60},{-3,-59},{-3,-54}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(senTCHWLea.T, conPI.Mea) annotation (Line(
            points={{30,-69},{30,-69},{30,-20},{-42,-20},{-42,56},{-28,56}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(conPI.SetPoi, TCHWSet)
          annotation (Line(
            points={{-28,62},{-46,62},{-46,40},{-109,40}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(conPI.y, chi.y) annotation (Line(
            points={{-5,62},{26,62},{60,62},{60,-60},{3,-60},{3,-54}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})),           Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
              Text(
                extent={{-44,-144},{50,-112}},
                lineColor={0,0,255},
                textString="%name"),
              Rectangle(
                extent={{-101,82},{100,72}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-95,-76},{106,-86}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-54,50},{60,32}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-52,-50},{62,-68}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-101,82},{100,72}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{0,72},{100,82}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-95,-76},{106,-86}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-102,-86},{-2,-76}},
                lineColor={0,0,127},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-32,-10},{-42,-22},{-22,-22},{-32,-10}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-32,-10},{-42,0},{-22,0},{-32,-10}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-34,32},{-30,0}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-34,-22},{-30,-50}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{34,32},{38,-50}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{14,10},{58,-32}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{36,10},{18,-22},{54,-22},{36,10}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid)}),
          Documentation(revisions="<html>
<ul>
<li>
March 19, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
      end Chiller;

      model ChillerTSet "Chiller"
        replaceable package MediumCHW =
           Modelica.Media.Interfaces.PartialMedium
          "Medium in the chilled water side";
        replaceable package MediumCW =
           Modelica.Media.Interfaces.PartialMedium
          "Medium in the condenser water side";
        parameter Modelica.Units.SI.Pressure dPCHW_nominal
          "Pressure difference at the chilled water side";
        parameter Modelica.Units.SI.Pressure dPCW_nominal
          "Pressure difference at the condenser water wide";
        parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal
          "Nominal mass flow rate at the chilled water side";
        parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal
          "Nominal mass flow rate at the condenser water wide";
        parameter Modelica.Units.SI.Temperature TCW_start
          "The start temperature of condenser water side";
        parameter Modelica.Units.SI.Temperature TCHW_start
          "The start temperature of chilled water side";

         parameter Buildings.Fluid.Chillers.Data.ElectricEIR.Generic per
          "Performance data"
          annotation (choicesAllMatching = true,
                      Placement(transformation(extent={{40,80},{60,100}})));

        Buildings.Fluid.Chillers.ElectricEIR chi(
          redeclare package Medium1 = MediumCW,
          redeclare package Medium2 = MediumCHW,
          m1_flow_nominal=mCW_flow_nominal,
          m2_flow_nominal=mCHW_flow_nominal,
          dp1_nominal=0,
          dp2_nominal=0,
          allowFlowReversal1=true,
          allowFlowReversal2=true,
          tau1=300,
          tau2=300,
          T1_start=TCW_start,
          T2_start=TCHW_start,
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
          per=per)       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={0,-42})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_CW(redeclare package
            Medium =
              MediumCW)
          "Fluid connector a1 (positive design flow direction is from port_a1 to port_b1)"
          annotation (Placement(transformation(extent={{-110,-90},{-90,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_CW(redeclare package
            Medium =
              MediumCW)
          "Fluid connector b1 (positive design flow direction is from port_a1 to port_b1)"
          annotation (Placement(transformation(extent={{-110,70},{-90,90}}),
              iconTransformation(extent={{-110,70},{-90,90}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_CHW(redeclare package
            Medium =
              MediumCHW)
          "Fluid connector b2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,-90},{110,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_CHW(redeclare package
            Medium =
              MediumCHW)
          "Fluid connector a2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,70},{110,90}}),
              iconTransformation(extent={{90,70},{110,90}})));
        replaceable Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLea(
          redeclare package Medium = MediumCHW,
          m_flow_nominal=mCHW_flow_nominal,
          T_start=TCHW_start)
          annotation (Placement(transformation(extent={{20,-90},{40,-70}})));
        Buildings.Fluid.Actuators.Valves.TwoWayLinear valCW(
          redeclare package Medium = MediumCW,
          m_flow_nominal=mCW_flow_nominal,
          allowFlowReversal=false,
          dpValve_nominal=dPCW_nominal)
          annotation (Placement(transformation(extent={{-60,90},{-80,70}})));
        Buildings.Fluid.Actuators.Valves.TwoWayLinear valCHW(
          redeclare package Medium = MediumCHW,
          m_flow_nominal=mCHW_flow_nominal,
          dpValve_nominal=dPCHW_nominal)
          annotation (Placement(transformation(extent={{60,-90},{80,-70}})));
        Modelica.Blocks.Interfaces.RealInput On(min=0,max=1)
          "True to enable compressor to operate, or false to disable the operation of the compressor"
          annotation (Placement(transformation(extent={{-118,-50},{-100,-30}}),
              iconTransformation(extent={{-140,-70},{-100,-30}})));
        Modelica.Blocks.Interfaces.RealInput TCHWSet
          "Temperature setpoint of chilled water"
          annotation (Placement(transformation(extent={{-118,30},{-100,50}}),
              iconTransformation(extent={{-140,10},{-100,50}})));
        Modelica.Blocks.Interfaces.RealOutput P
          "Electric power consumed by compressor"
          annotation (Placement(transformation(extent={{100,30},{120,50}}),
              iconTransformation(extent={{100,30},{120,50}})));

        Modelica.Blocks.Math.RealToBoolean realToBoolean
          annotation (Placement(transformation(extent={{-56,-66},{-42,-52}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCWLea(
          allowFlowReversal=true,
          redeclare package Medium = MediumCW,
          m_flow_nominal=mCW_flow_nominal) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-40,0})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEnt(
          allowFlowReversal=true,
          redeclare package Medium = MediumCW,
          m_flow_nominal=mCW_flow_nominal) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-40,-80})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWEnt(
          allowFlowReversal=true,
          redeclare package Medium = MediumCHW,
          m_flow_nominal=mCHW_flow_nominal) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={30,0})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloCHW(redeclare package
            Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{72,-10},{54,10}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloCW(redeclare package
            Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{-78,-90},{-60,-70}})));
        Buildings.Fluid.Sensors.Pressure senPreCHWEnt(redeclare package Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{2,10},{22,30}})));
        Buildings.Fluid.Sensors.Pressure senPreCHWLea(redeclare package Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{78,-50},{98,-30}})));
        Buildings.Fluid.Sensors.Pressure     senPreCWLea(redeclare package
            Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{-76,68},{-96,48}})));
        Buildings.Fluid.Sensors.Pressure senPreCWEnt(redeclare package Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{-96,-70},{-76,-50}})));

      equation
        connect(chi.port_b2, senTCHWLea.port_a) annotation (Line(
            points={{6,-52},{6,-80},{20,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(chi.P, P) annotation (Line(
            points={{-9,-31},{-9,40},{110,40}},
            color={0,0,127},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(senTCHWLea.port_b, valCHW.port_a) annotation (Line(
            points={{40,-80},{60,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(valCHW.port_b, port_b_CHW) annotation (Line(
            points={{80,-80},{100,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(valCW.port_b, port_b_CW) annotation (Line(
            points={{-80,80},{-100,80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(realToBoolean.y, chi.on) annotation (Line(
            points={{-41.3,-59},{-3,-59},{-3,-54}},
            color={255,0,255},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(On, valCW.y) annotation (Line(
            points={{-109,-40},{-90,-40},{-70,-40},{-70,-26},{-70,-26},{-70,68}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(valCHW.y, valCW.y) annotation (Line(
            points={{70,-68},{70,-26},{-70,-26},{-70,68}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(realToBoolean.u, valCW.y) annotation (Line(
            points={{-57.4,-59},{-70,-59},{-70,-40},{-70,-26},{-70,68}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(chi.port_b1, senTCWLea.port_a) annotation (Line(
            points={{-6,-32},{-6,0},{-30,0}},
            color={0,127,255},
            thickness=1));
        connect(senTCWLea.port_b, valCW.port_a) annotation (Line(
            points={{-50,0},{-50,0},{-54,0},{-54,80},{-60,80}},
            color={0,127,255},
            thickness=1));
        connect(senTCWEnt.port_b, chi.port_a1) annotation (Line(
            points={{-30,-80},{-6,-80},{-6,-52}},
            color={0,127,255},
            thickness=1));
        connect(senTCHWEnt.port_b, chi.port_a2) annotation (Line(
            points={{20,0},{6,0},{6,-32}},
            color={0,127,255},
            thickness=1));
        connect(senPreCHWEnt.port, chi.port_a2) annotation (Line(
            points={{12,10},{12,0},{6,0},{6,-32}},
            color={0,127,255},
            thickness=1));
        connect(senPreCHWLea.port, port_b_CHW) annotation (Line(
            points={{88,-50},{88,-50},{88,-80},{100,-80}},
            color={0,127,255},
            thickness=1));
        connect(senPreCWLea.port, port_b_CW) annotation (Line(
            points={{-86,68},{-86,80},{-100,80}},
            color={0,127,255},
            thickness=1));
        connect(senMasFloCHW.port_b, senTCHWEnt.port_a) annotation (Line(
            points={{54,0},{47,0},{40,0}},
            color={0,127,255},
            thickness=1));
        connect(senMasFloCHW.port_a, port_a_CHW) annotation (Line(
            points={{72,0},{80,0},{80,80},{100,80}},
            color={0,127,255},
            thickness=1));
        connect(senMasFloCW.port_b, senTCWEnt.port_a) annotation (Line(
            points={{-60,-80},{-55,-80},{-50,-80}},
            color={0,127,255},
            thickness=1));
        connect(senMasFloCW.port_a, port_a_CW) annotation (Line(
            points={{-78,-80},{-100,-80}},
            color={0,127,255},
            thickness=1));
        connect(senPreCWEnt.port, port_a_CW) annotation (Line(
            points={{-86,-70},{-86,-80},{-100,-80}},
            color={0,127,255},
            thickness=1));
        connect(TCHWSet, chi.TSet) annotation (Line(
            points={{-109,40},{-16,40},{-16,-62},{3,-62},{3,-54}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})),           Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
              Text(
                extent={{-44,-144},{50,-112}},
                lineColor={0,0,255},
                textString="%name"),
              Rectangle(
                extent={{-101,82},{100,72}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-95,-76},{106,-86}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-54,50},{60,32}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-52,-50},{62,-68}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-101,82},{100,72}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{0,72},{100,82}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-95,-76},{106,-86}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-102,-86},{-2,-76}},
                lineColor={0,0,127},
                pattern=LinePattern.None,
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-32,-10},{-42,-22},{-22,-22},{-32,-10}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-32,-10},{-42,0},{-22,0},{-32,-10}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-34,32},{-30,0}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-34,-22},{-30,-50}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{34,32},{38,-50}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{14,10},{58,-32}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{36,10},{18,-22},{54,-22},{36,10}},
                lineColor={0,128,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid)}),
          Documentation(revisions="<html>
<ul>
<li>
March 19, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
      end ChillerTSet;

      model VSDCoolingTower "the cooling tower"
        replaceable package MediumCW =
            Modelica.Media.Interfaces.PartialMedium
          "Medium in the condenser water side";
        parameter Modelica.Units.SI.Power P_nominal
          "Nominal cooling tower component power (at y=1)";
        parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal
          "Temperature difference between the outlet and inlet of the module";
        parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal
          "Nominal approach temperature";
        parameter Modelica.Units.SI.Temperature TWetBul_nominal
          "Nominal wet bulb temperature";
        parameter Modelica.Units.SI.Pressure dP_nominal
          "Pressure difference between the outlet and inlet of the module ";
        parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal
          "Nominal mass flow rate";
        parameter Real GaiPi "Gain of the component PI controller";
        parameter Real tIntPi "Integration time of the component PI controller";
        parameter Real v_flow_rate[:] "Volume flow rate ratio";
        parameter Real eta[:] "Fan efficiency";
        parameter Modelica.Units.SI.Temperature TCW_start
          "The start temperature of condenser water side";
        BaseClasses.YorkCalc                                  yorkCalc(
          redeclare package Medium = MediumCW,
          m_flow_nominal=mCW_flow_nominal,
          dp_nominal=0,
          TRan_nominal=dTCW_nominal,
          TAirInWB_nominal=TWetBul_nominal,
          TApp_nominal=dTApp_nominal,
          fraPFan_nominal=P_nominal/mCW_flow_nominal,
          T_start=TCW_start,
          fanRelPow(r_V=v_flow_rate, r_P=eta))
          annotation (Placement(transformation(extent={{0,-10},{20,10}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_CW(redeclare package
            Medium =
              MediumCW)
          "Fluid connector b (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_CW(redeclare package
            Medium =
              MediumCW)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
        Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
          redeclare package Medium = MediumCW,
          m_flow_nominal=mCW_flow_nominal,
          dpValve_nominal=dP_nominal)
          annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
        .MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator.Devices.Control.conPI
          conPI(k=GaiPi, Ti=tIntPi)
          annotation (Placement(transformation(extent={{-30,72},{-10,92}})));
        Modelica.Blocks.Interfaces.RealInput On(min=0,max=1) "On signal"
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealInput TSet
          "Temperature setpoint of the condenser water"
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput TWetBul
          "Entering air wet bulb temperature"
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=yorkCalc.PFan) annotation (Placement(transformation(extent={{0,-50},{20,-30}})));
        Modelica.Blocks.Interfaces.RealOutput P "Power of the cooling tower module"
          annotation (Placement(transformation(extent={{100,-50},{120,-30}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEnt(
          allowFlowReversal=true,
          redeclare package Medium = MediumCW,
          m_flow_nominal=mCW_flow_nominal) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-78,0})));
        replaceable Buildings.Fluid.Sensors.TemperatureTwoPort senTCWLea(
          allowFlowReversal=true,
          redeclare package Medium = MediumCW,
          m_flow_nominal=mCW_flow_nominal) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={44,0})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloCW(redeclare package
            Medium =
              MediumCW)
          annotation (Placement(transformation(extent={{60,-10},{78,10}})));
        Buildings.Fluid.Sensors.Pressure senPreCWLea(redeclare package Medium =
              MediumCW)
          annotation (Placement(transformation(extent={{94,-16},{74,-36}})));
        Buildings.Fluid.Sensors.Pressure senPreCWEnt(redeclare package Medium =
              MediumCW)
          annotation (Placement(transformation(extent={{-22,-16},{-42,-36}})));
        Modelica.Blocks.Math.RealToBoolean realToBoolean
          annotation (Placement(transformation(extent={{-86,20},{-72,34}})));
      equation
        connect(yorkCalc.port_a, val.port_b) annotation (Line(
            points={{0,0},{-40,0}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(yorkCalc.TAir, TWetBul) annotation (Line(
            points={{-2,4},{-20,4},{-20,-40},{-120,-40}},
            color={0,0,127},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(realExpression.y, P) annotation (Line(
            points={{21,-40},{110,-40}},
            color={0,0,127},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(val.port_a, senTCWEnt.port_b) annotation (Line(
            points={{-60,0},{-68,0}},
            color={0,127,255},
            thickness=1));
        connect(senTCWEnt.port_a, port_a_CW) annotation (Line(
            points={{-88,0},{-100,0}},
            color={0,127,255},
            thickness=1));
        connect(yorkCalc.port_b, senTCWLea.port_a) annotation (Line(
            points={{20,0},{34,0}},
            color={0,127,255},
            thickness=1));
        connect(senTCWLea.port_b, senMasFloCW.port_a) annotation (Line(
            points={{54,0},{56,0},{60,0}},
            color={0,127,255},
            thickness=1));
        connect(senMasFloCW.port_b, port_b_CW) annotation (Line(
            points={{78,0},{100,0}},
            color={0,127,255},
            thickness=1));
        connect(senPreCWLea.port, port_b_CW) annotation (Line(
            points={{84,-16},{84,0},{100,0}},
            color={0,127,255},
            thickness=1));
        connect(senPreCWEnt.port, val.port_b) annotation (Line(
            points={{-32,-16},{-32,-16},{-32,0},{-40,0}},
            color={0,127,255},
            thickness=1));
        connect(realToBoolean.u, On) annotation (Line(
            points={{-87.4,27},{-92,27},{-92,40},{-120,40}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(realToBoolean.y, conPI.On) annotation (Line(
            points={{-71.3,27},{-54,27},{-54,88},{-32,88}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(conPI.SetPoi, TSet) annotation (Line(
            points={{-32,82},{-76,82},{-76,80},{-120,80}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(senTCWLea.T, conPI.Mea) annotation (Line(
            points={{44,11},{44,11},{44,40},{-44,40},{-44,76},{-32,76}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(conPI.y, yorkCalc.y) annotation (Line(
            points={{-9,82},{12,82},{12,22},{-20,22},{-20,8},{-2,8}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(val.y, On) annotation (Line(
            points={{-50,12},{-50,40},{-120,40}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})),           Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-52,34},{58,-34}},
                lineColor={0,0,255},
                textString="CoolingTower"),
              Text(
                extent={{-44,-146},{50,-114}},
                lineColor={0,0,255},
                textString="%name")}));
      end VSDCoolingTower;

      model Bypass "Three way bypass valve"
        replaceable package MediumCW =
            Modelica.Media.Interfaces.PartialMedium
          "Medium condenser water side";
        parameter Modelica.Units.SI.Pressure dPByp_nominal
          "Pressure difference between the outlet and inlet of the valve ";
        parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
          "Nominal mass flow rate";
        Modelica.Fluid.Interfaces.FluidPort_a port_a1(redeclare package Medium =
              MediumCW)
          annotation (Placement(transformation(extent={{90,30},{110,50}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b2(redeclare package Medium =
              MediumCW)
          annotation (Placement(transformation(extent={{90,-50},{110,-30}})));
        Modelica.Blocks.Interfaces.RealInput yBypVal "(0: closed, 1: open)"
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloTow(redeclare package
            Medium =         MediumCW)
          annotation (Placement(transformation(extent={{-60,30},{-80,50}})));
        Modelica.Blocks.Interfaces.RealOutput m_flow
          "Mass flow rate through the cooling towers"
          annotation (Placement(transformation(extent={{100,70},{120,90}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloByp(redeclare package
            Medium =         MediumCW) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={0,-20})));
        Modelica.Blocks.Interfaces.RealOutput m_flow_bypass
          "Mass flow rate through the bypass "
          annotation (Placement(transformation(extent={{100,-90},{120,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a2(redeclare package Medium =
              MediumCW)
          annotation (Placement(transformation(extent={{-110,-50},{-90,-30}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b1(redeclare package Medium =
              MediumCW)
          annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
        replaceable Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage valByp(
          redeclare package Medium = MediumCW,
          m_flow_nominal=m_flow_nominal,
          dpValve_nominal=dPByp_nominal)               annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={0,10})));
      equation
        connect(port_a2, port_b2) annotation (Line(
            points={{-100,-40},{100,-40}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(valByp.port_b, senMasFloByp.port_a) annotation (Line(
            points={{0,0},{0,-10}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(senMasFloByp.port_b, port_b2) annotation (Line(
            points={{0,-30},{0,-40},{100,-40}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(senMasFloTow.port_b, port_b1) annotation (Line(
            points={{-80,40},{-100,40}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(senMasFloByp.m_flow, m_flow_bypass) annotation (Line(
            points={{11,-20},{60,-20},{60,-80},{110,-80}},
            color={0,0,127},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(senMasFloTow.m_flow, m_flow) annotation (Line(
            points={{-70,51},{-70,60},{80,60},{80,80},{110,80}},
            color={0,0,127},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(senMasFloTow.port_a, port_a1) annotation (Line(
            points={{-60,40},{100,40}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(valByp.port_a, port_a1) annotation (Line(
            points={{0,20},{0,40},{100,40}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(valByp.y, yBypVal) annotation (Line(
            points={{-12,10},{-40,10},{-40,80},{-120,80}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})),           Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-50,32},{56,-32}},
                lineColor={0,0,255},
                textString="BypassValve"),
              Text(
                extent={{-44,-142},{50,-110}},
                lineColor={0,0,255},
                textString="%name")}));
      end Bypass;

      model Boiler "Boiler"
        replaceable package MediumHW =
           Modelica.Media.Interfaces.PartialMedium
          "Medium in the hot water side";
        parameter Modelica.Units.SI.Pressure dPHW_nominal
          "Pressure difference at the chilled water side";
        parameter Modelica.Units.SI.MassFlowRate mHW_flow_nominal
          "Nominal mass flow rate at the chilled water side";
        parameter Modelica.Units.SI.Temperature THW
          "The start temperature of chilled water side";
        parameter Modelica.Units.SI.TemperatureDifference dTHW_nominal
          "Temperature difference between the outlet and inlet of the module";
        parameter Real GaiPi "Gain of the component PI controller";
        parameter Real tIntPi "Integration time of the component PI controller";
        parameter Real eta[:] "Fan efficiency";

        BaseClasses.BoilerPolynomial    boi(
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial, redeclare
            package Medium = MediumHW,
          m_flow_nominal=mHW_flow_nominal,
          T_nominal=THW,
          effCur=Buildings.Fluid.Types.EfficiencyCurves.Polynomial,
          Q_flow_nominal=dTHW_nominal*mHW_flow_nominal*4200,
          a=eta,
          fue=Buildings.Fluid.Data.Fuels.NaturalGasLowerHeatingValue(),
          dp_nominal=0)  annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={0,-38})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_CHW(redeclare package
            Medium =
              MediumHW)
          "Fluid connector b2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,-90},{110,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_HW(redeclare package
            Medium =
              MediumHW)
          "Fluid connector a2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,70},{110,90}}),
              iconTransformation(extent={{90,70},{110,90}})));
        replaceable Buildings.Fluid.Sensors.TemperatureTwoPort senTHWLea(
          redeclare package Medium = MediumHW,
          m_flow_nominal=mHW_flow_nominal,
          T_start=THW) annotation (Placement(transformation(extent={{20,-90},{40,-70}})));
        Buildings.Fluid.Actuators.Valves.TwoWayLinear valCHW(
          redeclare package Medium = MediumHW,
          m_flow_nominal=mHW_flow_nominal,
          dpValve_nominal=dPHW_nominal)
          annotation (Placement(transformation(extent={{60,-90},{80,-70}})));
        Modelica.Blocks.Interfaces.RealInput On(min=0,max=1)
          "True to enable compressor to operate, or false to disable the operation of the compressor"
          annotation (Placement(transformation(extent={{-118,-50},{-100,-30}}),
              iconTransformation(extent={{-140,-70},{-100,-30}})));
        Modelica.Blocks.Interfaces.RealInput THWSet
          "Temperature setpoint of chilled water" annotation (Placement(
              transformation(extent={{-118,30},{-100,50}}), iconTransformation(extent=
                 {{-140,10},{-100,50}})));

        Buildings.Fluid.Sensors.TemperatureTwoPort senTHWEnt(
          allowFlowReversal=true,
          redeclare package Medium = MediumHW,
          m_flow_nominal=mHW_flow_nominal) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={30,0})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloHW(redeclare package
            Medium =
              MediumHW)
          annotation (Placement(transformation(extent={{72,-10},{54,10}})));
        Buildings.Fluid.Sensors.Pressure senPreCWEnt(redeclare package Medium =
              MediumHW)
          annotation (Placement(transformation(extent={{2,10},{22,30}})));
        Buildings.Fluid.Sensors.Pressure senPreHWLea(redeclare package Medium =
              MediumHW)
          annotation (Placement(transformation(extent={{78,-50},{98,-30}})));
        Modelica.Blocks.Math.RealToBoolean realToBoolean
          annotation (Placement(transformation(extent={{-70,-18},{-54,-2}})));
        .MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator.Devices.Control.conPI
          conPI(Ti=2400, k=1)
          annotation (Placement(transformation(extent={{-64,30},{-44,50}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=boi.T)
          annotation (Placement(transformation(extent={{-70,-40},{-50,-20}})));
      equation
        connect(senTHWLea.port_b, valCHW.port_a)
          annotation (Line(
            points={{40,-80},{60,-80}},
            color={255,0,0},
            thickness=1));
        connect(valCHW.port_b, port_b_CHW) annotation (Line(
            points={{80,-80},{100,-80}},
            color={255,0,0},
            thickness=1));
        connect(senPreHWLea.port, port_b_CHW) annotation (Line(
            points={{88,-50},{88,-50},{88,-80},{100,-80}},
            color={255,0,0},
            thickness=1));
        connect(senMasFloHW.port_b, senTHWEnt.port_a) annotation (Line(
            points={{54,0},{47,0},{40,0}},
            color={255,0,0},
            thickness=1));
        connect(senMasFloHW.port_a, port_a_HW) annotation (Line(
            points={{72,0},{80,0},{80,80},{100,80}},
            color={255,0,0},
            thickness=1));
        connect(senTHWEnt.port_b, boi.port_a) annotation (Line(
            points={{20,0},{0,0},{0,-28}},
            color={255,0,0},
            thickness=1));
        connect(boi.port_b, senTHWLea.port_a)
          annotation (Line(
            points={{0,-48},{0,-80},{20,-80}},
            color={255,0,0},
            thickness=1));
        connect(senPreCWEnt.port, boi.port_a) annotation (Line(
            points={{12,10},{12,0},{0,0},{0,-28},{6.10623e-016,-28}},
            color={255,0,0},
            thickness=1));
        connect(On, valCHW.y) annotation (Line(
            points={{-109,-40},{-44,-40},{-44,-24},{70,-24},{70,-68}},
            color={0,0,127}));

        connect(realToBoolean.u, valCHW.y) annotation (Line(
            points={{-71.6,-10},{-80,-10},{-80,-40},{-44,-40},{-44,-24},{70,-24},{70,-68}},
            color={0,0,127}));
        connect(realToBoolean.y, conPI.On) annotation (Line(
            points={{-53.2,-10},{-40,-10},{-40,10},{-80,10},{-80,46},{-66,46}},
            color={255,0,255}));
        connect(conPI.SetPoi, THWSet)
          annotation (Line(
            points={{-66,40},{-109,40}},
            color={0,0,127}));
        connect(conPI.y, boi.y)
          annotation (Line(
            points={{-43,40},{-8,40},{-8,-26}},
            color={0,0,127}));
        connect(realExpression.y, conPI.Mea) annotation (Line(
            points={{-49,-30},{-30,-30},{-30,22},{-76,22},{-76,34},{-66,34}},
            color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})),           Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
              Text(
                extent={{-44,-144},{50,-112}},
                lineColor={0,0,255},
                textString="%name"),
              Rectangle(
                extent={{-54,50},{60,32}},
                lineColor={255,170,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-52,-50},{62,-68}},
                lineColor={255,170,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{0,72},{100,82}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-32,-10},{-42,-22},{-22,-22},{-32,-10}},
                lineColor={255,170,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-32,-10},{-42,0},{-22,0},{-32,-10}},
                lineColor={255,170,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-34,32},{-30,0}},
                lineColor={255,170,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-34,-22},{-30,-50}},
                lineColor={255,170,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{34,32},{38,-50}},
                lineColor={255,170,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{14,10},{58,-32}},
                lineColor={255,170,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{36,10},{18,-22},{54,-22},{36,10}},
                lineColor={255,170,255},
                fillColor={170,170,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{0,-86},{100,-76}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-152,106},{148,146}},
                textString="%name",
                textColor={0,0,255})}),
          Documentation(revisions="<html>
<ul>
<li>
March 19, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
      end Boiler;

      model Building "Simple model to simulate the demind side of the loop"
          replaceable package Medium =
            Modelica.Media.Interfaces.PartialMedium "Medium water";
        parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
          "Nominal mass flow rate ";
        parameter Modelica.Units.SI.Pressure dP_nominal "Nominal pressure drop";

        parameter Modelica.Units.SI.Temperature TBuiSetPoi
          "Set point of the building temperature";
          parameter Real GaiPi "Gain of the PI controller";
          parameter Real tIntPi "Integration time of the PI controller";
        Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow
          annotation (Placement(transformation(extent={{-84,30},{-64,50}})));
        Modelica.Blocks.Sources.Constant TSet(k=TBuiSetPoi)
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
              Medium)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
              Medium)
          "Fluid connector b (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
        Modelica.Blocks.Interfaces.RealInput Loa "Cooling load"
          annotation (Placement(transformation(extent={{-118,31},{-100,49}})));
        Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
          redeclare package Medium = Medium,
          m_flow_nominal=m_flow_nominal,
          dpValve_nominal=dP_nominal,
          linearized=true,
          homotopyInitialization=false,
          l=0.0001,
          allowFlowReversal=false,
          riseTime=120)
          annotation (Placement(transformation(extent={{10,-10},{30,10}})));
        Buildings.Controls.Continuous.LimPID conPI(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=GaiPi,
          Ti=tIntPi,
          reverseActing=not (true))
          annotation (Placement(transformation(extent={{-20,60},{0,80}})));
        Modelica.Blocks.Interfaces.RealOutput dP "Pressure difference"
          annotation (Placement(transformation(extent={{100,50},{120,70}})));
        Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor senTemBui
          "Room temperature sensor"
          annotation (Placement(transformation(extent={{-44,30},{-24,50}})));
        Buildings.Fluid.MixingVolumes.MixingVolume vol(
          redeclare package Medium = Medium,
          energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial,
          nPorts=2,
          m_flow_nominal=m_flow_nominal,
          V=V,
          T_start=TBuiSetPoi)
                annotation (Placement(transformation(extent={{-42,0},{-22,20}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTLeaPri(redeclare package
            Medium = Medium, m_flow_nominal=m_flow_nominal)
          annotation (Placement(transformation(extent={{-80,10},{-60,-10}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTEntPri(redeclare package
            Medium = Medium, m_flow_nominal=m_flow_nominal)
          annotation (Placement(transformation(extent={{42,-10},{62,10}})));
        Modelica.Blocks.Interfaces.RealOutput TEntPri
          "Temperature of the passing fluid"
          annotation (Placement(transformation(extent={{100,-70},{120,-50}})));
        Modelica.Blocks.Interfaces.RealOutput TLeaPri
          "Temperature of the passing fluid"
          annotation (Placement(transformation(extent={{100,-30},{120,-10}})));
        Modelica.Blocks.Sources.RealExpression yVal(y=val.y)
          annotation (Placement(transformation(extent={{28,70},{48,90}})));
        parameter Modelica.Units.SI.Volume V=10
          "Volume of water in the secondary loop";

        Buildings.Fluid.Sensors.MassFlowRate senMasFloCHWSec(redeclare package
            Medium =
              Medium)
          annotation (Placement(transformation(extent={{-18,-10},{0,10}})));
        Modelica.Blocks.Sources.RealExpression LoaCal(y=m_flow*(TLeaPri - TEntPri)*
              4200)
          annotation (Placement(transformation(extent={{-60,-90},{-40,-70}})));
        Modelica.Blocks.Interfaces.RealOutput LoaCalSig "Value of Real output"
          annotation (Placement(transformation(extent={{100,-110},{120,-90}})));
        Modelica.Blocks.Interfaces.RealOutput m_flow
          "Mass flow rate from port_a to port_b"
          annotation (Placement(transformation(extent={{100,10},{120,30}})));
        Modelica.Blocks.Interfaces.RealOutput y "Value of Real output"
          annotation (Placement(transformation(extent={{100,70},{120,90}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=senTEntPri.T)
          annotation (Placement(transformation(extent={{32,-52},{52,-32}})));
        replaceable Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare
            package Medium =
              Medium) annotation (Placement(transformation(extent={{40,62},{60,42}})));
      equation
        connect(prescribedHeatFlow.Q_flow, Loa) annotation (Line(
            points={{-84,40},{-109,40}},
            color={0,0,127},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(TSet.y, conPI.u_s) annotation (Line(
            points={{-59,70},{-22,70}},
            color={0,0,127},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(conPI.y, val.y) annotation (Line(
            points={{1,70},{20,70},{20,12}},
            color={0,0,127},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(senTemBui.port, prescribedHeatFlow.port) annotation (Line(
            points={{-44,40},{-64,40}},
            color={191,0,0},
            smooth=Smooth.None,
            thickness=1));
        connect(vol.heatPort,senTemBui. port) annotation (Line(
            points={{-42,10},{-44,10},{-44,40}},
            color={191,0,0},
            smooth=Smooth.None,
            thickness=1));
        connect(vol.ports[1], senTLeaPri.port_b) annotation (Line(
            points={{-34,0},{-60,0}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(senTLeaPri.port_a, port_a) annotation (Line(
            points={{-80,0},{-100,0}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(senTEntPri.port_b, port_b) annotation (Line(
            points={{62,0},{100,0}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(val.port_b, senTEntPri.port_a) annotation (Line(
            points={{30,0},{42,0}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(vol.ports[2],senMasFloCHWSec. port_a) annotation (Line(
            points={{-30,0},{-18,0}},
            color={0,127,255},
            thickness=1));
        connect(senMasFloCHWSec.port_b, val.port_a) annotation (Line(
            points={{0,0},{10,0}},
            color={0,127,255},
            thickness=1));
        connect(LoaCal.y, LoaCalSig) annotation (Line(
            points={{-39,-80},{-39,-80},{20,-80},{20,-100},{110,-100}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(yVal.y, y) annotation (Line(
            points={{49,80},{110,80}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(TEntPri, senTLeaPri.T) annotation (Line(
            points={{110,-60},{22,-60},{-70,-60},{-70,-11}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(m_flow, senMasFloCHWSec.m_flow) annotation (Line(
            points={{110,20},{50,20},{-9,20},{-9,11}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(realExpression.y, TLeaPri) annotation (Line(points={{53,-42},{90,-42},
                {90,-20},{110,-20}}, color={0,0,127},
            pattern=LinePattern.Dash));
        connect(senTemBui.T, conPI.u_m) annotation (Line(
            points={{-24,40},{-16,40},{-10,40},{-10,58}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(senRelPre.port_a, senMasFloCHWSec.port_a) annotation (Line(points={{40,
                52},{26,52},{0,52},{0,26},{-18,26},{-18,0}}, color={0,127,255}));
        connect(senRelPre.port_b, port_b) annotation (Line(points={{60,52},{72,52},{72,
                0},{100,0}}, color={0,127,255}));
        connect(senRelPre.p_rel, dP) annotation (Line(
            points={{50,61},{50,61},{50,70},{80,70},{80,60},{110,60}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                               graphics={
              Text(
                extent={{-32,-114},{40,-142}},
                lineColor={0,0,255},
                textString="%name"),
              Polygon(
                points={{0,80},{-80,40},{80,40},{0,80}},
                lineColor={0,0,127},
                smooth=Smooth.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-60,40},{60,-80}},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Polygon(
                points={{0,0},{0,0}},
                lineColor={0,0,127},
                pattern=LinePattern.Dash,
                smooth=Smooth.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-10,10},{0,0},{-10,-10},{-10,10}},
                smooth=Smooth.None,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Polygon(
                points={{10,10},{0,0},{10,-10},{10,10}},
                smooth=Smooth.None,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Line(
                points={{-100,0},{-10,0}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{10,0},{90,0}},
                smooth=Smooth.None,
                color={0,0,255}),
              Ellipse(
                extent={{-42,-24},{-20,-50}},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Text(
                extent={{-36,-30},{-26,-46}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="T"),
              Line(
                points={{-20,-36},{0,-36},{0,0}},
                color={0,0,0},
                smooth=Smooth.None,
                pattern=LinePattern.Dash)}),      Diagram(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
          Documentation(revisions="<html>
<ul>
<li>
March 19, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
      end Building;

      package Examples "Test of components"
      extends Modelica.Icons.ExamplesPackage;

        class Chiller
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
           extends Modelica.Icons.Example;
          package MediumCHW = Buildings.Media.Water "Medium for chilled water";
          package MediumCW = Buildings.Media.Water "Medium for condenser water";
          parameter Modelica.Units.SI.Pressure dPCHW_nominal=1000
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.Pressure dPCW_nominal=1000
            "Pressure difference at the condenser water wide";

          parameter Modelica.Units.SI.Temperature TCW_start=273.15 + 27
            "The start temperature of condenser water side";
          parameter Modelica.Units.SI.Temperature TCHW_start=273.15 + 5
            "The start temperature of chilled water side";

          BuildingControlEmulator.Devices.WaterSide.Chiller                 chi(
            per=per,
            redeclare package MediumCHW = MediumCHW,
            redeclare package MediumCW = MediumCW,
            dPCHW_nominal=dPCHW_nominal,
            dPCW_nominal=dPCW_nominal,
            mCHW_flow_nominal=per.mEva_flow_nominal,
            mCW_flow_nominal=per.mCon_flow_nominal,
            TCW_start=TCW_start,
            TCHW_start=TCHW_start)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-2,2})));
           parameter Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_23XL_724kW_6_04COP_Vanes
                                                                       per
            "Performance data"
            annotation (choicesAllMatching = true,
                        Placement(transformation(extent={{40,66},{60,86}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCHW(
            nPorts=1,
            redeclare package Medium = MediumCHW,
            m_flow=per.mEva_flow_nominal,
            T=273.15 + 20,
            use_T_in=true) "Source for CHW"
            annotation (Placement(transformation(extent={{58,-30},{38,-10}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            nPorts=1,
            redeclare package Medium = MediumCW,
            use_T_in=false,
            T=273.15 + 21.11,
            m_flow=per.mCon_flow_nominal) "Source for CHW"
            annotation (Placement(transformation(extent={{-80,18},{-60,38}})));
          Buildings.Fluid.Sources.Boundary_pT sinCHW(redeclare package Medium =
                MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,-20})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(nPorts=1, redeclare package
              Medium =
                MediumCW) "Sink for CW" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={48,28})));
          Modelica.Blocks.Sources.Pulse          On(
            period=86400/4,
            offset=0,
            startTime=0)
            annotation (Placement(transformation(extent={{-102,50},{-82,70}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLea(
            allowFlowReversal=true,
            redeclare package Medium = MediumCHW,
            m_flow_nominal=per.mEva_flow_nominal) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-40,-20})));
          Modelica.Blocks.Sources.RealExpression TCHWSet(y=273.15 + 5.56)
            annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Modelica.Blocks.Sources.Sine sine(
            amplitude=2.5,
            offset=275.15 + 7.5,
            f=1/86400)
            annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
        equation
          connect(sinCHW.ports[1], senTCHWLea.port_b) annotation (Line(
              points={{-64,-20},{-64,-20},{-50,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CHW, senTCHWLea.port_a) annotation (Line(
              points={{-10,-8},{-10,-20},{-30,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CHW, souCHW.ports[1]) annotation (Line(
              points={{6,-8},{6,-20},{38,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CW, sinCW.ports[1]) annotation (Line(
              points={{6,12},{6,28},{38,28}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CW, souCW.ports[1]) annotation (Line(
              points={{-10,12},{-10,12},{-10,28},{-60,28}},
              color={0,127,255},
              thickness=1));
          connect(On.y, chi.On) annotation (Line(
              points={{-81,60},{-81,56},{-7,56},{-7,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(TCHWSet.y, chi.TCHWSet) annotation (Line(
              points={{-59,80},{1,80},{1,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(sine.y, souCHW.T_in) annotation (Line(
              points={{61,-50},{80,-50},{80,-16},{60,-16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (experiment(StopTime=86400));
        end Chiller;

        class ChillerTSet
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
           extends Modelica.Icons.Example;
          package MediumCHW = Buildings.Media.Water "Medium for chilled water";
          package MediumCW = Buildings.Media.Water "Medium for condenser water";
          parameter Modelica.Units.SI.Pressure dPCHW_nominal=1000
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.Pressure dPCW_nominal=1000
            "Pressure difference at the condenser water wide";

          parameter Modelica.Units.SI.Temperature TCW_start=273.15 + 27
            "The start temperature of condenser water side";
          parameter Modelica.Units.SI.Temperature TCHW_start=273.15 + 5
            "The start temperature of chilled water side";

          BuildingControlEmulator.Devices.WaterSide.ChillerTSet             chi(
            per=per,
            redeclare package MediumCHW = MediumCHW,
            redeclare package MediumCW = MediumCW,
            dPCHW_nominal=dPCHW_nominal,
            dPCW_nominal=dPCW_nominal,
            mCHW_flow_nominal=per.mEva_flow_nominal,
            mCW_flow_nominal=per.mCon_flow_nominal,
            TCW_start=TCW_start,
            TCHW_start=TCHW_start)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-2,2})));
           parameter Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_23XL_724kW_6_04COP_Vanes
                                                                       per
            "Performance data"
            annotation (choicesAllMatching = true,
                        Placement(transformation(extent={{40,66},{60,86}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCHW(
            nPorts=1,
            redeclare package Medium = MediumCHW,
            m_flow=per.mEva_flow_nominal,
            T=273.15 + 20,
            use_T_in=true) "Source for CHW"
            annotation (Placement(transformation(extent={{58,-30},{38,-10}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            nPorts=1,
            redeclare package Medium = MediumCW,
            use_T_in=false,
            T=273.15 + 21.11,
            m_flow=per.mCon_flow_nominal) "Source for CHW"
            annotation (Placement(transformation(extent={{-80,18},{-60,38}})));
          Buildings.Fluid.Sources.Boundary_pT sinCHW(redeclare package Medium =
                MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,-20})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(nPorts=1, redeclare package
              Medium =
                MediumCW) "Sink for CW" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={48,28})));
          Modelica.Blocks.Sources.Pulse          On(
            period=86400/4,
            offset=0,
            startTime=0)
            annotation (Placement(transformation(extent={{-102,50},{-82,70}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLea(
            allowFlowReversal=true,
            redeclare package Medium = MediumCHW,
            m_flow_nominal=per.mEva_flow_nominal) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-40,-20})));
          Modelica.Blocks.Sources.RealExpression TCHWSet(y=273.15 + 5.56)
            annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Modelica.Blocks.Sources.Sine sine(
            amplitude=2.5,
            offset=275.15 + 7.5,
            f=1/86400)
            annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
        equation
          connect(sinCHW.ports[1], senTCHWLea.port_b) annotation (Line(
              points={{-64,-20},{-64,-20},{-50,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CHW, senTCHWLea.port_a) annotation (Line(
              points={{-10,-8},{-10,-20},{-30,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CHW, souCHW.ports[1]) annotation (Line(
              points={{6,-8},{6,-20},{38,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CW, sinCW.ports[1]) annotation (Line(
              points={{6,12},{6,28},{38,28}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CW, souCW.ports[1]) annotation (Line(
              points={{-10,12},{-10,12},{-10,28},{-60,28}},
              color={0,127,255},
              thickness=1));
          connect(On.y, chi.On) annotation (Line(
              points={{-81,60},{-81,56},{-7,56},{-7,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(TCHWSet.y, chi.TCHWSet) annotation (Line(
              points={{-59,80},{1,80},{1,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(sine.y, souCHW.T_in) annotation (Line(
              points={{61,-50},{80,-50},{80,-16},{60,-16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (experiment(StopTime=86400));
        end ChillerTSet;

        class Chiller_eva_foul
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
           extends Modelica.Icons.Example;
          package MediumCHW = Buildings.Media.Water "Medium for chilled water";
          package MediumCW = Buildings.Media.Water "Medium for condenser water";
          parameter Modelica.Units.SI.Pressure dPCHW_nominal=1000
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.Pressure dPCW_nominal=1000
            "Pressure difference at the condenser water wide";

          parameter Modelica.Units.SI.Temperature TCW_start=273.15 + 27
            "The start temperature of condenser water side";
          parameter Modelica.Units.SI.Temperature TCHW_start=273.15 + 5
            "The start temperature of chilled water side";

          BuildingControlEmulator.Devices.WaterSide.Chiller                 chi(
            per=per,
            redeclare package MediumCHW = MediumCHW,
            redeclare package MediumCW = MediumCW,
            dPCHW_nominal=dPCHW_nominal,
            dPCW_nominal=dPCW_nominal,
            mCHW_flow_nominal=per.mEva_flow_nominal,
            mCW_flow_nominal=per.mCon_flow_nominal,
            TCW_start=TCW_start,
            TCHW_start=TCHW_start,
            chi(epsEva=0.7))
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-2,2})));
           parameter Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_23XL_724kW_6_04COP_Vanes
                                                                       per
            "Performance data"
            annotation (choicesAllMatching = true,
                        Placement(transformation(extent={{40,66},{60,86}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCHW(
            nPorts=1,
            redeclare package Medium = MediumCHW,
            m_flow=per.mEva_flow_nominal,
            T=273.15 + 20,
            use_T_in=true) "Source for CHW"
            annotation (Placement(transformation(extent={{58,-30},{38,-10}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            nPorts=1,
            redeclare package Medium = MediumCW,
            use_T_in=false,
            T=273.15 + 21.11,
            m_flow=per.mCon_flow_nominal) "Source for CHW"
            annotation (Placement(transformation(extent={{-80,18},{-60,38}})));
          Buildings.Fluid.Sources.Boundary_pT sinCHW(redeclare package Medium =
                MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,-20})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(nPorts=1, redeclare package
              Medium =
                MediumCW) "Sink for CW" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={48,28})));
          Modelica.Blocks.Sources.Pulse          On(
            period=86400/4,
            offset=0,
            startTime=0)
            annotation (Placement(transformation(extent={{-102,50},{-82,70}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLea(
            allowFlowReversal=true,
            redeclare package Medium = MediumCHW,
            m_flow_nominal=per.mEva_flow_nominal) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-40,-20})));
          Modelica.Blocks.Sources.RealExpression TCHWSet(y=273.15 + 5.56)
            annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Modelica.Blocks.Sources.Sine sine(
            amplitude=2.5,
            offset=275.15 + 7.5,
            f=1/86400)
            annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
        equation
          connect(sinCHW.ports[1], senTCHWLea.port_b) annotation (Line(
              points={{-64,-20},{-64,-20},{-50,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CHW, senTCHWLea.port_a) annotation (Line(
              points={{-10,-8},{-10,-20},{-30,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CHW, souCHW.ports[1]) annotation (Line(
              points={{6,-8},{6,-20},{38,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CW, sinCW.ports[1]) annotation (Line(
              points={{6,12},{6,28},{38,28}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CW, souCW.ports[1]) annotation (Line(
              points={{-10,12},{-10,12},{-10,28},{-60,28}},
              color={0,127,255},
              thickness=1));
          connect(On.y, chi.On) annotation (Line(
              points={{-81,60},{-81,56},{-7,56},{-7,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(TCHWSet.y, chi.TCHWSet) annotation (Line(
              points={{-59,80},{1,80},{1,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(sine.y, souCHW.T_in) annotation (Line(
              points={{61,-50},{80,-50},{80,-16},{60,-16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (experiment(StopTime=86400));
        end Chiller_eva_foul;

        class Chiller_con_foul
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
           extends Modelica.Icons.Example;
          package MediumCHW = Buildings.Media.Water "Medium for chilled water";
          package MediumCW = Buildings.Media.Water "Medium for condenser water";
          parameter Modelica.Units.SI.Pressure dPCHW_nominal=1000
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.Pressure dPCW_nominal=1000
            "Pressure difference at the condenser water wide";

          parameter Modelica.Units.SI.Temperature TCW_start=273.15 + 27
            "The start temperature of condenser water side";
          parameter Modelica.Units.SI.Temperature TCHW_start=273.15 + 5
            "The start temperature of chilled water side";

          BuildingControlEmulator.Devices.WaterSide.Chiller                 chi(
            per=per,
            redeclare package MediumCHW = MediumCHW,
            redeclare package MediumCW = MediumCW,
            dPCHW_nominal=dPCHW_nominal,
            dPCW_nominal=dPCW_nominal,
            mCHW_flow_nominal=per.mEva_flow_nominal,
            mCW_flow_nominal=per.mCon_flow_nominal,
            TCW_start=TCW_start,
            TCHW_start=TCHW_start,
            chi(epsCon=0.8))
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-2,2})));
           parameter Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_23XL_724kW_6_04COP_Vanes
                                                                       per
            "Performance data"
            annotation (choicesAllMatching = true,
                        Placement(transformation(extent={{40,66},{60,86}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCHW(
            nPorts=1,
            redeclare package Medium = MediumCHW,
            m_flow=per.mEva_flow_nominal,
            T=273.15 + 20,
            use_T_in=true) "Source for CHW"
            annotation (Placement(transformation(extent={{58,-30},{38,-10}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            nPorts=1,
            redeclare package Medium = MediumCW,
            use_T_in=false,
            T=273.15 + 21.11,
            m_flow=per.mCon_flow_nominal) "Source for CHW"
            annotation (Placement(transformation(extent={{-80,18},{-60,38}})));
          Buildings.Fluid.Sources.Boundary_pT sinCHW(redeclare package Medium =
                MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,-20})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(nPorts=1, redeclare package
              Medium =
                MediumCW) "Sink for CW" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={48,28})));
          Modelica.Blocks.Sources.Pulse          On(
            offset=0,
            startTime=0,
            period=86400/4)
            annotation (Placement(transformation(extent={{-102,52},{-82,72}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLea(
            allowFlowReversal=true,
            redeclare package Medium = MediumCHW,
            m_flow_nominal=per.mEva_flow_nominal) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-40,-20})));
          Modelica.Blocks.Sources.RealExpression TCHWSet(y=273.15 + 5.56)
            annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Modelica.Blocks.Sources.Sine sine(
            amplitude=2.5,
            offset=275.15 + 7.5,
            f=1/86400)
            annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
        equation
          connect(sinCHW.ports[1], senTCHWLea.port_b) annotation (Line(
              points={{-64,-20},{-64,-20},{-50,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CHW, senTCHWLea.port_a) annotation (Line(
              points={{-10,-8},{-10,-20},{-30,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CHW, souCHW.ports[1]) annotation (Line(
              points={{6,-8},{6,-20},{38,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CW, sinCW.ports[1]) annotation (Line(
              points={{6,12},{6,28},{38,28}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CW, souCW.ports[1]) annotation (Line(
              points={{-10,12},{-10,12},{-10,28},{-60,28}},
              color={0,127,255},
              thickness=1));
          connect(On.y, chi.On) annotation (Line(
              points={{-81,62},{-81,56},{-7,56},{-7,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(TCHWSet.y, chi.TCHWSet) annotation (Line(
              points={{-59,80},{1,80},{1,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(sine.y, souCHW.T_in) annotation (Line(
              points={{61,-50},{80,-50},{80,-16},{60,-16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (experiment(StopTime=86400));
        end Chiller_con_foul;

        model VSDCoolingTower
          extends Modelica.Icons.Example;
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.Power P_nominal=30000
            "Nominal compressor power (at y=1)";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference between the outlet and inlet of the modules";
          parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal=4.44
            "Nominal approach temperature";
          parameter Modelica.Units.SI.Temperature TWetBul_nominal=273.15 + 25
            "Nominal wet bulb temperature";
          parameter Modelica.Units.SI.Pressure dP_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal=10
            "Nominal mass flow rate at condenser water wide";
          parameter Real GaiPi=1 "Gain of the PI controller";
          parameter Real tIntPi=60 "Integration time of the PI controller";
          parameter Real v_flow_rate[:]={1} "Volume flow rate rate";
          parameter Real eta[:]={1} "Fan efficiency";
          BuildingControlEmulator.Devices.WaterSide.VSDCoolingTower cooTowMod(
            P_nominal=P_nominal,
            dTCW_nominal=dTCW_nominal,
            dTApp_nominal=dTApp_nominal,
            TWetBul_nominal=TWetBul_nominal,
            dP_nominal=dP_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            GaiPi=GaiPi,
            tIntPi=tIntPi,
            v_flow_rate=v_flow_rate,
            eta=eta,
            redeclare package MediumCW = MediumCW,
            TCW_start=273.15 + 29.44) "Single cooling tower module"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Modelica.Blocks.Sources.Constant TSet(k=273.15 + 29.44)
            annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
          Buildings.Fluid.Sources.Boundary_pT   sinCW(redeclare package Medium =
                       MediumCW, nPorts=1) "Sink for CW" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={70,0})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            nPorts=1,
            use_T_in=true,
            m_flow=mCW_flow_nominal,
            redeclare package Medium = MediumCW,
            T=273.15 + 29.44) "Source for CW"
            annotation (Placement(transformation(extent={{-50,-50},{-30,-30}})));
          Modelica.Blocks.Sources.Sine TCWLeachi(
            f=1/86400,
            amplitude=2.59,
            offset=273.15 + 32.03)
            annotation (Placement(transformation(extent={{-80,-20},{-60,0}})));
          Modelica.Blocks.Sources.Constant TWetBul(k=273.15 + 25)   annotation (Placement(transformation(extent={{-80,-80},{-60,-60}})));
          Modelica.Blocks.Sources.Step On(
            height=-1,
            offset=1,
            startTime=43200) annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
        equation

          connect(TSet.y, cooTowMod.TSet) annotation (Line(
              points={{-59,70},{-20,70},{-20,8},{-12,8}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1], cooTowMod.port_b_CW) annotation (Line(
              points={{60,0},{10,0}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(souCW.ports[1], cooTowMod.port_a_CW) annotation (Line(
              points={{-30,-40},{-20,-40},{-20,0},{-10,0}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(TCWLeachi.y, souCW.T_in) annotation (Line(
              points={{-59,-10},{-56,-10},{-56,-36},{-52,-36}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TWetBul.y, cooTowMod.TWetBul)
            annotation (Line(
              points={{-59,-70},{-16,-70},{-16,-4},{-12,-4}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(On.y, cooTowMod.On) annotation (Line(
              points={{-59,30},{-36,30},{-36,4},{-12,4}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/BaseClasses/Components/Example/CoolingTowerModule.mos"
                "Simulate and plot"),
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                    100,100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end VSDCoolingTower;

        model VSDCoolingTower_foul
          extends Modelica.Icons.Example;
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.Power P_nominal=30000
            "Nominal compressor power (at y=1)";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference between the outlet and inlet of the modules";
          parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal=4.44
            "Nominal approach temperature";
          parameter Modelica.Units.SI.Temperature TWetBul_nominal=273.15 + 25
            "Nominal wet bulb temperature";
          parameter Modelica.Units.SI.Pressure dP_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal=10
            "Nominal mass flow rate at condenser water wide";
          parameter Real GaiPi=1 "Gain of the PI controller";
          parameter Real tIntPi=60 "Integration time of the PI controller";
          parameter Real v_flow_rate[:]={1} "Volume flow rate rate";
          parameter Real eta[:]={1} "Fan efficiency";
          BuildingControlEmulator.Devices.WaterSide.VSDCoolingTower cooTowMod(
            P_nominal=P_nominal,
            dTCW_nominal=dTCW_nominal,
            dTApp_nominal=dTApp_nominal,
            TWetBul_nominal=TWetBul_nominal,
            dP_nominal=dP_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            GaiPi=GaiPi,
            tIntPi=tIntPi,
            v_flow_rate=v_flow_rate,
            eta=eta,
            redeclare package MediumCW = MediumCW,
            TCW_start=273.15 + 29.44,
            yorkCalc(eps=0.8)) "Single cooling tower module"
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Modelica.Blocks.Sources.Constant TSet(k=273.15 + 29.44)
            annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
          Buildings.Fluid.Sources.Boundary_pT   sinCW(redeclare package Medium =
                       MediumCW, nPorts=1) "Sink for CW" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={70,0})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            nPorts=1,
            use_T_in=true,
            m_flow=mCW_flow_nominal,
            redeclare package Medium = MediumCW,
            T=273.15 + 29.44) "Source for CW"
            annotation (Placement(transformation(extent={{-50,-50},{-30,-30}})));
          Modelica.Blocks.Sources.Sine TCWLeachi(
            f=1/86400,
            amplitude=2.59,
            offset=273.15 + 32.03)
            annotation (Placement(transformation(extent={{-80,-20},{-60,0}})));
          Modelica.Blocks.Sources.Constant TWetBul(k=273.15 + 25)   annotation (Placement(transformation(extent={{-80,-80},{-60,-60}})));
          Modelica.Blocks.Sources.Step On(
            height=-1,
            offset=1,
            startTime=43200) annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
        equation

          connect(TSet.y, cooTowMod.TSet) annotation (Line(
              points={{-59,70},{-20,70},{-20,8},{-12,8}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1], cooTowMod.port_b_CW) annotation (Line(
              points={{60,0},{10,0}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(souCW.ports[1], cooTowMod.port_a_CW) annotation (Line(
              points={{-30,-40},{-20,-40},{-20,0},{-10,0}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(TCWLeachi.y, souCW.T_in) annotation (Line(
              points={{-59,-10},{-56,-10},{-56,-36},{-52,-36}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TWetBul.y, cooTowMod.TWetBul)
            annotation (Line(
              points={{-59,-70},{-16,-70},{-16,-4},{-12,-4}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(On.y, cooTowMod.On) annotation (Line(
              points={{-59,30},{-36,30},{-36,4},{-12,4}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/BaseClasses/Components/Example/CoolingTowerModule.mos"
                "Simulate and plot"),
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                    100,100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end VSDCoolingTower_foul;

        model Bypass

          extends Modelica.Icons.Example;
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.Pressure dPByp_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal=10
            "Nominal mass flow rate at condenser water wide";
          BuildingControlEmulator.Devices.WaterSide.Bypass byp(
            redeclare package MediumCW = MediumCW,
            dPByp_nominal=dPByp_nominal,
            m_flow_nominal=mCW_flow_nominal)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
          Modelica.Blocks.Sources.Step On(
            height=-1,
            offset=1,
            startTime=1800)  annotation (Placement(transformation(extent={{-80,20},{-60,
                    40}})));
          Buildings.Fluid.Sources.MassFlowSource_T sou1(
            m_flow=mCW_flow_nominal,
            redeclare package Medium = MediumCW,
            T=273.15 + 29.44,
            nPorts=1,
            use_T_in=false) "Source1"
            annotation (Placement(transformation(extent={{80,-22},{60,-2}})));
          Buildings.Fluid.Sources.Boundary_pT   sin1(redeclare package Medium =
                       MediumCW, nPorts=1) "Sink1" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-70,-10})));
          Buildings.Fluid.Sources.MassFlowSource_T sou2(
            m_flow=mCW_flow_nominal,
            redeclare package Medium = MediumCW,
            T=273.15 + 29.44,
            nPorts=1,
            use_T_in=false) "Source1"
            annotation (Placement(transformation(extent={{-80,-62},{-60,-42}})));
          Buildings.Fluid.Sources.Boundary_pT   sin2(redeclare package Medium =
                       MediumCW, nPorts=1) "Sink1" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={70,-52})));
          Buildings.Fluid.FixedResistances.PressureDrop       res(
            redeclare package Medium = MediumCW,
            m_flow_nominal=mCW_flow_nominal,
            dp_nominal=dPByp_nominal)
            annotation (Placement(transformation(extent={{-30,-20},{-50,0}})));
        equation

          connect(sou1.ports[1], byp.port_a1) annotation (Line(
              points={{60,-12},{40,-12},{40,4},{10,4}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(sou2.ports[1], byp.port_a2) annotation (Line(
              points={{-60,-52},{-16,-52},{-16,-4},{-10,-4}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(sin2.ports[1], byp.port_b2) annotation (Line(
              points={{60,-52},{20,-52},{20,-4},{10,-4}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(On.y, byp.yBypVal) annotation (Line(
              points={{-59,30},{-40,30},{-40,8},{-12,8}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sin1.ports[1], res.port_b) annotation (Line(
              points={{-60,-10},{-50,-10}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(res.port_a, byp.port_b1) annotation (Line(
              points={{-30,-10},{-20,-10},{-20,4},{-10,4}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/BaseClasses/Components/Example/Bypass.mos"
                "Simulate and plot"),
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            experiment(StopTime=3600),
            __Dymola_experimentSetupOutput);
        end Bypass;

        model Boiler
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;

          extends Modelica.Icons.Example;
         package MediumHW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.TemperatureDifference dTHW_nominal=20
            "Temperature difference at chilled water side";
          parameter Modelica.Units.SI.Pressure dPHW_nominal=6000
            "Pressure difference at chilled water side";
          parameter Modelica.Units.SI.Temperature THW_nominal=273.15 + 80
            "Temperature at chilled water side";
          parameter Modelica.Units.SI.MassFlowRate mHW_flow_nominal=3000000/
              dTHW_nominal/4200 "Nominal mass flow rate at chilled water side";
          parameter Real BoilerCurve[:] = {0.8}
            "Chiller operation Curve(need p(a=ChillerCurve, y=1)=1)";
          parameter Real k = 1 "Gain of the PID controller";
          parameter Real Ti = 60 "Integration time of the PID controller";

          BuildingControlEmulator.Devices.WaterSide.Boiler boi(
            redeclare package MediumHW = MediumHW,
            dPHW_nominal=dPHW_nominal,
            mHW_flow_nominal=mHW_flow_nominal,
            THW=THW_nominal,
            dTHW_nominal=dTHW_nominal,
            GaiPi=k,
            tIntPi=Ti,
            eta=BoilerCurve,
            conPI(k=0.1))                                                                                      "Compressor"
            annotation (Placement(transformation(extent={{-10,-30},{10,-10}})));

          Buildings.Fluid.Sources.MassFlowSource_T souHW(
            nPorts=1,
            use_T_in=true,
            T=273.15 + 11.11,
            redeclare package Medium = MediumHW,
            m_flow=mHW_flow_nominal) "Source for CHW"
            annotation (Placement(transformation(extent={{48,10},{28,30}})));
          Buildings.Fluid.Sources.Boundary_pT sinHW(nPorts=1, redeclare package
              Medium =                                                                   MediumHW)
            "Sink for HW"
            annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={70,-28})));
          Modelica.Blocks.Sources.Constant THWSet(k=273.15 + 80)
            annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
          Modelica.Blocks.Sources.Sine THWEntcom(
            f=1/86400,
            amplitude=10,
            offset=273.15 + 70)
            annotation (Placement(transformation(extent={{80,14},{60,34}})));
          Modelica.Blocks.Sources.Step On(height=1, startTime=3600)
            annotation (Placement(transformation(extent={{-80,22},{-60,42}})));
        equation

          connect(sinHW.ports[1],boi. port_b_CHW)
            annotation (Line(
              points={{60,-28},{10,-28}},
              color={255,0,0},
              thickness=1));
          connect(THWEntcom.y, souHW.T_in)
            annotation (Line(
              points={{59,24},{50,24}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(On.y,boi. On) annotation (Line(
              points={{-59,32},{-54,32},{-54,-26},{-30,-26},{-30,-25},{-12,-25}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(souHW.ports[1],boi. port_a_HW)
            annotation (Line(
              points={{28,20},{10,20},{10,-12}},
              color={255,0,0},
              thickness=1));
          connect(THWSet.y, boi.THWSet) annotation (Line(
              points={{-59,70},{-20,70},{-20,-17},{-12,-17}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/BaseClasses/Components/Example/Compressor.mos"
                "Simulate and plot"),
            Documentation(info="<html>
<p>This model is designed to test how the compressor module works under different load condition. In this test, the temperature of condenser water entering the compressor is fixed as 29.44 C while the temperature of chilled water would be changed by time(sine function).</p>
</html>"),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end Boiler;

        model Boiler_foul
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;

          extends Modelica.Icons.Example;
         package MediumHW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.TemperatureDifference dTHW_nominal=20
            "Temperature difference at chilled water side";
          parameter Modelica.Units.SI.Pressure dPHW_nominal=6000
            "Pressure difference at chilled water side";
          parameter Modelica.Units.SI.Temperature THW_nominal=273.15 + 80
            "Temperature at chilled water side";
          parameter Modelica.Units.SI.MassFlowRate mHW_flow_nominal=3000000/
              dTHW_nominal/4200 "Nominal mass flow rate at chilled water side";
          parameter Real BoilerCurve[:] = {0.8}
            "Chiller operation Curve(need p(a=ChillerCurve, y=1)=1)";
          parameter Real k = 1 "Gain of the PID controller";
          parameter Real Ti = 60 "Integration time of the PID controller";

          BuildingControlEmulator.Devices.WaterSide.Boiler boi(
            redeclare package MediumHW = MediumHW,
            dPHW_nominal=dPHW_nominal,
            mHW_flow_nominal=mHW_flow_nominal,
            THW=THW_nominal,
            dTHW_nominal=dTHW_nominal,
            GaiPi=k,
            tIntPi=Ti,
            eta=BoilerCurve,
            conPI(k=0.1),
            boi(eps=0.7))                                                                                      "Compressor"
            annotation (Placement(transformation(extent={{-10,-30},{10,-10}})));

          Buildings.Fluid.Sources.MassFlowSource_T souHW(
            nPorts=1,
            use_T_in=true,
            T=273.15 + 11.11,
            redeclare package Medium = MediumHW,
            m_flow=mHW_flow_nominal) "Source for CHW"
            annotation (Placement(transformation(extent={{48,10},{28,30}})));
          Buildings.Fluid.Sources.Boundary_pT sinHW(nPorts=1, redeclare package
              Medium =                                                                   MediumHW)
            "Sink for HW"
            annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={70,-28})));
          Modelica.Blocks.Sources.Constant THWSet(k=273.15 + 80)
            annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
          Modelica.Blocks.Sources.Sine THWEntcom(
            f=1/86400,
            amplitude=10,
            offset=273.15 + 70)
            annotation (Placement(transformation(extent={{80,14},{60,34}})));
          Modelica.Blocks.Sources.Step On(height=1, startTime=3600)
            annotation (Placement(transformation(extent={{-80,22},{-60,42}})));
        equation

          connect(sinHW.ports[1],boi. port_b_CHW)
            annotation (Line(
              points={{60,-28},{10,-28}},
              color={255,0,0},
              thickness=1));
          connect(THWEntcom.y, souHW.T_in)
            annotation (Line(
              points={{59,24},{50,24}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(On.y,boi. On) annotation (Line(
              points={{-59,32},{-54,32},{-54,-26},{-30,-26},{-30,-25},{-12,-25}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(souHW.ports[1],boi. port_a_HW)
            annotation (Line(
              points={{28,20},{10,20},{10,-12}},
              color={255,0,0},
              thickness=1));
          connect(THWSet.y, boi.THWSet) annotation (Line(
              points={{-59,70},{-20,70},{-20,-17},{-12,-17}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/BaseClasses/Components/Example/Compressor.mos"
                "Simulate and plot"),
            Documentation(info="<html>
<p>This model is designed to test how the compressor module works under different load condition. In this test, the temperature of condenser water entering the compressor is fixed as 29.44 C while the temperature of chilled water would be changed by time(sine function).</p>
</html>"),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end Boiler_foul;

        model Building
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=10
            "Nominal mass flow rate ";
          parameter Modelica.Units.SI.Pressure dP_nominal=1000
            "Nominal Pressure difference";
          parameter Real v_flow_rate[:] = {0,m_flow_nominal/996,2*m_flow_nominal/996};
          parameter Real pressure[:] = {2*dP_nominal,dP_nominal,0};
          parameter Real Motor_eta[:] = {1,1,1} "Motor efficiency";
          parameter Real Hydra_eta[:] = {1,1,1} "Hydraulic efficiency";
          BuildingControlEmulator.Devices.WaterSide.Building bui(
            m_flow_nominal=m_flow_nominal,
            redeclare package Medium = Medium,
            tIntPi=60,
            GaiPi=0.1,
            dP_nominal=dP_nominal*0.999,
            TBuiSetPoi=273.15 + 11.12)
            annotation (Placement(transformation(extent={{20,-10},{40,10}})));
          BuildingControlEmulator.Devices.FlowMover.VariableSpeedMover pumVarSpe(
            redeclare package Medium = Medium,
            HydEff=Hydra_eta,
            MotEff=Motor_eta,
            VolFloCur=v_flow_rate,
            PreCur=pressure,
            TimCon=60,
            k=1,
            Ti=60)
            annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
          Buildings.Fluid.Sources.Boundary_pT sou(
            redeclare package Medium = Medium,
            use_p_in=false,
            nPorts=2,
            T(displayUnit="K") = 273.15 + 5.56)  annotation (Placement(transformation(extent={{
                    -90,-12},{-70,8}}, rotation=0)));
          Modelica.Blocks.Sources.BooleanExpression
                                           On(y=true)
            annotation (Placement(transformation(extent={{-90,64},{-70,84}})));
          Modelica.Blocks.Sources.Ramp CooLoa(
            height=4200*m_flow_nominal*5,
            duration=18000,
            startTime=0)
            annotation (Placement(transformation(extent={{-30,60},{-10,80}})));
          Modelica.Blocks.Sources.RealExpression PreSetPoi(y=dP_nominal)
            annotation (Placement(transformation(extent={{-88,30},{-68,50}})));
        equation

          connect(sou.ports[1], pumVarSpe.port_a) annotation (Line(
              points={{-70,0},{-40,0}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(pumVarSpe.port_b, bui.port_a) annotation (Line(
              points={{-20,0},{20,0}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(bui.port_b, sou.ports[2]) annotation (Line(
              points={{40,0},{60,0},{60,-40},{-60,-40},{-60,-4},{-70,-4}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(CooLoa.y, bui.Loa) annotation (Line(
              points={{-9,70},{10,70},{10,4},{19.1,4}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(On.y, pumVarSpe.On) annotation (Line(
              points={{-69,74},{-52,74},{-52,6},{-42,6}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(bui.dP, pumVarSpe.Mea) annotation (Line(
              points={{41,6},{54,6},{54,-24},{-52,-24},{-52,-6},{-42,-6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(PreSetPoi.y, pumVarSpe.SetPoi) annotation (Line(
              points={{-67,40},{-48,40},{-48,2},{-42,2}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/BaseClasses/Components/Example/Building.mos"
                "Simulate and plot"),
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            experiment(StopTime=21600),
            __Dymola_experimentSetupOutput);
        end Building;
      annotation (Documentation(info="<html>
<p>This package contains examples for the use of models that can be found in Chiller.BaseClasses.ChillerComponents.</p>
</html>"));
      end Examples;
    annotation (Documentation(info="<html>
<p>This package contains component models that are used to construct the chillers with two compressors.</p>
</html>"));
    end WaterSide;

    package Fault

      model TemSensorDev
        extends BaseClasses.TemperatureTwoPort;
        Modelica.Blocks.Interfaces.RealOutput T(final quantity="ThermodynamicTemperature",
                                                final unit="K",
                                                displayUnit = "degC",
                                                min = 0,
                                                start=T_start)
          "Temperature of the passing fluid"
             annotation (Placement(transformation(
              origin={0,110},
              extent={{10,-10},{-10,10}},
              rotation=270)));

        parameter Modelica.Units.SI.TemperatureDifference dt=0
          "Constant deviation of temperature measurement";
        parameter Modelica.Units.SI.Time FauTime=0 "Time when faults start to occur";

      equation

        T = noEvent(if time>FauTime then T_real + dt else T_real);
          annotation (Placement(transformation(
              origin={0,110},
              extent={{10,-10},{-10,10}},
              rotation=270)));
      end TemSensorDev;

      model TemSensorDrift
        extends BaseClasses.TemperatureTwoPort;
        Modelica.Blocks.Interfaces.RealOutput T(final quantity="ThermodynamicTemperature",
                                                final unit="K",
                                                displayUnit = "degC",
                                                min = 0,
                                                start=T_start)
          "Temperature of the passing fluid"
             annotation (Placement(transformation(
              origin={0,110},
              extent={{10,-10},{-10,10}},
              rotation=270)));

        parameter Modelica.Units.SI.TemperatureDifference dt=0
          "Constant deviation of temperature measurement";
        parameter Modelica.Units.SI.Time FauTime=0 "Time when faults start to occur";
        parameter Modelica.Units.SI.Time DraftTime=0 "Length of the drift period";

        Modelica.Blocks.Continuous.FirstOrder firstOrder(T=DraftTime)
          annotation (Placement(transformation(extent={{-54,42},{-34,62}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=noEvent(if time > FauTime then dt else 0))
          annotation (Placement(transformation(extent={{-90,42},{-70,62}})));
      equation

        T = T_real + firstOrder.y;
        connect(realExpression.y, firstOrder.u)
          annotation (Line(points={{-69,52},{-62.5,52},{-56,52}}, color={0,0,127},
            pattern=LinePattern.Dash));
          annotation (Placement(transformation(
              origin={0,110},
              extent={{10,-10},{-10,10}},
              rotation=270)));
      end TemSensorDrift;

      model PreSensorDev
        extends BaseClasses.Pressure;
        parameter Real dp = 0 "Constant deviation ratio of pressure measurement";
        parameter Modelica.Units.SI.Time FauTime=0 "Time when faults start to occur";
        Modelica.Blocks.Interfaces.RealOutput p(final quantity="AbsolutePressure",
                                                final unit="Pa",
                                                min=0) "Pressure at port"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation

        p = noEvent(if time>FauTime then p_real*(1+dp) else p_real);

        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
      end PreSensorDev;

      model PreSensorDrift
        extends BaseClasses.Pressure;
        parameter Modelica.Units.SI.Pressure dp=0
          "Constant deviation of pressure measurement";
        parameter Modelica.Units.SI.Time FauTime=0 "Time when faults start to occur";
        parameter Modelica.Units.SI.Time DraftTime=0 "Length of the drift period";
          Modelica.Blocks.Continuous.FirstOrder firstOrder(T=DraftTime)
          annotation (Placement(transformation(extent={{-56,42},{-36,62}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=noEvent(if time >
              FauTime then dp else 0))
          annotation (Placement(transformation(extent={{-90,42},{-70,62}})));
        Modelica.Blocks.Interfaces.RealOutput p(final quantity="AbsolutePressure",
                                                final unit="Pa",
                                                min=0) "Pressure at port"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation

        p =  p_real + firstOrder.y;
        connect(realExpression.y, firstOrder.u)
          annotation (Line(
            points={{-69,52},{-58,52}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
      end PreSensorDrift;

      model TwoWayStuck "Two way valve with equal percentage flow characteristics"
        extends Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValveKv(phi=if homotopyInitialization then homotopy(actual=
              Buildings.Fluid.Actuators.BaseClasses.equalPercentage(
              noEvent(if time>FauTime then y_stuck else y_actual),
              R,
              l,
              delta0), simplified=l + noEvent(if time>FauTime then y_stuck else y_actual)*(1 - l)) else Buildings.Fluid.Actuators.BaseClasses.equalPercentage(
              noEvent(if time>FauTime then y_stuck else y_actual),
              R,
              l,
              delta0));
        parameter Real R=50 "Rangeability, R=50...100 typically";
        parameter Real delta0=0.01
          "Range of significant deviation from equal percentage law";
        parameter Real y_stuck = 0
          "Stuck postion";
        parameter Modelica.Units.SI.Time FauTime=0 "Time when faults start to occur";

      initial equation
        // Since the flow model Buildings.Fluid.BaseClasses.FlowModels.basicFlowFunction_m_flow computes
        // 1/k^2, the parameter l must not be zero.
        assert(l > 0, "Valve leakage parameter l must be bigger than zero.");
        assert(l < 1/R, "Wrong parameters in valve model.\n"
                      + "  Rangeability R = " + String(R) + "\n"
                      + "  Leakage flow l = " + String(l) + "\n"
                      + "  Must have l < 1/R = " + String(1/R));
        annotation (
          defaultComponentName="val",
          Documentation(info="<html>
<p>
Two way valve with an equal percentage valve opening characteristic.
</p><p>
This model is based on the partial valve model
<a href=\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\">
Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve</a>.
Check this model for more information, such
as the regularization near the origin.
</p>
</html>",       revisions="<html>
<ul>
<li>
April 4, 2014, by Michael Wetter:<br/>
Moved the assignment of the flow function <code>phi</code>
to the model instantiation because in its base class,
the keyword <code>input</code>
has been added to the variable <code>phi</code>.
</li>
<li>
March 27, 2014 by Michael Wetter:<br/>
Revised model for implementation of new valve model that computes the flow function
based on a table.
</li>
<li>
February 20, 2012 by Michael Wetter:<br/>
Renamed parameter <code>dp_nominal</code> to <code>dpValve_nominal</code>,
and added new parameter <code>dpFixed_nominal</code>.
See
<a href=\"modelica://Buildings.Fluid.Actuators.UsersGuide\">
Buildings.Fluid.Actuators.UsersGuide</a>.
</li>
<li>
February 14, 2012 by Michael Wetter:<br/>
Added filter to approximate the travel time of the actuator.
</li>
<li>
March 25, 2011, by Michael Wetter:<br/>
Added homotopy method.
</li>
<li>
June 5, 2008 by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"),       Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                extent={{-74,20},{-36,-24}},
                lineColor={255,255,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%%")}));
      end TwoWayStuck;

      model TwoWayLeak "Two way valve with equal percentage flow characteristics"
        extends Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValveKv(phi=if homotopyInitialization then homotopy(actual=
              Buildings.Fluid.Actuators.BaseClasses.equalPercentage(
              noEvent(if time>FauTime then max(y_leak,y_actual) else y_actual),
              R,
              l,
              delta0), simplified=l + noEvent(if time>FauTime then max(y_leak,y_actual) else y_actual)*(1 - l)) else Buildings.Fluid.Actuators.BaseClasses.equalPercentage(
              noEvent(if time>FauTime then max(y_leak,y_actual) else y_actual),
              R,
              l,
              delta0));
        parameter Real R=50 "Rangeability, R=50...100 typically";
        parameter Real delta0=0.01
          "Range of significant deviation from equal percentage law";
        parameter Real y_leak = 0
          "Stuck postion";
        parameter Modelica.Units.SI.Time FauTime=0 "Time when faults start to occur";

      initial equation
        // Since the flow model Buildings.Fluid.BaseClasses.FlowModels.basicFlowFunction_m_flow computes
        // 1/k^2, the parameter l must not be zero.
        assert(l > 0, "Valve leakage parameter l must be bigger than zero.");
        assert(l < 1/R, "Wrong parameters in valve model.\n"
                      + "  Rangeability R = " + String(R) + "\n"
                      + "  Leakage flow l = " + String(l) + "\n"
                      + "  Must have l < 1/R = " + String(1/R));
        annotation (
          defaultComponentName="val",
          Documentation(info="<html>
<p>
Two way valve with an equal percentage valve opening characteristic.
</p><p>
This model is based on the partial valve model
<a href=\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\">
Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve</a>.
Check this model for more information, such
as the regularization near the origin.
</p>
</html>",       revisions="<html>
<ul>
<li>
April 4, 2014, by Michael Wetter:<br/>
Moved the assignment of the flow function <code>phi</code>
to the model instantiation because in its base class,
the keyword <code>input</code>
has been added to the variable <code>phi</code>.
</li>
<li>
March 27, 2014 by Michael Wetter:<br/>
Revised model for implementation of new valve model that computes the flow function
based on a table.
</li>
<li>
February 20, 2012 by Michael Wetter:<br/>
Renamed parameter <code>dp_nominal</code> to <code>dpValve_nominal</code>,
and added new parameter <code>dpFixed_nominal</code>.
See
<a href=\"modelica://Buildings.Fluid.Actuators.UsersGuide\">
Buildings.Fluid.Actuators.UsersGuide</a>.
</li>
<li>
February 14, 2012 by Michael Wetter:<br/>
Added filter to approximate the travel time of the actuator.
</li>
<li>
March 25, 2011, by Michael Wetter:<br/>
Added homotopy method.
</li>
<li>
June 5, 2008 by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"),       Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}}), graphics={Text(
                extent={{-74,20},{-36,-24}},
                lineColor={255,255,255},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                textString="%%")}));
      end TwoWayLeak;

      model FloSensorDev
        extends BaseClasses.MassFlowRate;
        parameter Real dm = 0 "Constant deviation ratio of flow measurement";
        parameter Modelica.Units.SI.Time FauTime=0 "Time when faults start to occur";
        Modelica.Blocks.Interfaces.RealOutput m_flow(quantity="MassFlowRate",
                                                     final unit="kg/s")
          "Mass flow rate from port_a to port_b" annotation (Placement(
              transformation(
              origin={0,110},
              extent={{10,-10},{-10,10}},
              rotation=270)));
      equation

        m_flow = noEvent(if time>FauTime then m_flow_real*(1+dm) else m_flow_real);

          annotation (Placement(transformation(extent={{100,-10},{120,10}})),
                    Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
      end FloSensorDev;

      model dPreSensorDev
        extends BaseClasses.RelativePressure;
        parameter Real dp = 0 "Constant deviation ratio of pressure measurement";
        parameter Modelica.Units.SI.Time FauTime=0 "Time when faults start to occur";
        Modelica.Blocks.Interfaces.RealOutput p_rel(final quantity="PressureDifference",
                                                    final unit="Pa",
                                                    displayUnit="Pa")
          "Relative pressure of port_a minus port_b" annotation (Placement(transformation(
              origin={0,-90},
              extent={{10,-10},{-10,10}},
              rotation=90)));

      equation

        p_rel = noEvent(if time>FauTime then p_real*(1+dp) else p_real);

        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)));
      end dPreSensorDev;

      model conPI "\"PI Controller\""

        parameter Real k(min=0, unit="1") = 1 "Gain of controller";
        parameter Real fauFac = 10 "Gain of controller";
        parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
          "Time constant of Integrator block";

        Modelica.Blocks.Interfaces.BooleanInput On
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Math.BooleanToReal booleanToReal
          annotation (Placement(transformation(extent={{-72,50},{-52,70}})));
        Modelica.Blocks.Interfaces.RealOutput y "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Continuous.PI PI(k=k*fauFac, T=Ti/fauFac)
          annotation (Placement(transformation(extent={{-8,-30},{12,-10}})));
        Modelica.Blocks.Interfaces.RealInput SetPoi
          "Connector of setpoint input signal"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealInput Mea
          "Connector of measurement input signal"
          annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{40,-10},{60,10}})));
        Modelica.Blocks.Math.Add add(k1=conPID.revAct, k2=-conPID.revAct)
          annotation (Placement(transformation(extent={{-54,-30},{-34,-10}})));
        BaseClasses.PIreverse conPID
          annotation (Placement(transformation(extent={{-48,6},{-28,26}})));
      equation
        connect(On, booleanToReal.u) annotation (Line(
            points={{-120,60},{-90,60},{-74,60}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(PI.y, product.u2) annotation (Line(
            points={{13,-20},{28,-20},{28,-6},{38,-6}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(booleanToReal.y, product.u1) annotation (Line(
            points={{-51,60},{28,60},{28,6},{38,6}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(product.y, y) annotation (Line(
            points={{61,0},{110,0}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(SetPoi, add.u1) annotation (Line(points={{-120,0},{-70,0},{-70,-14},{-56,
                -14}}, color={0,0,127}));
        connect(add.u2, Mea) annotation (Line(points={{-56,-26},{-70,-26},{-70,-60},{-120,
                -60}}, color={0,0,127}));
        connect(add.y, PI.u)
          annotation (Line(points={{-33,-20},{-10,-20}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,127,255},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-66,50},{62,-48}},
                lineColor={0,127,255},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                textString="PI")}),            Diagram(coordinateSystem(
                preserveAspectRatio=false)));
      end conPI;

      package BaseClasses

        model TemperatureTwoPort "Ideal two port temperature sensor"
          extends Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor;
          Real T_real
            "Temperature of the passing fluid";
          parameter Modelica.Units.SI.Temperature T_start=Medium.T_default
            "Initial or guess value of output (= state)"
            annotation (Dialog(group="Initialization"));

          parameter Boolean transferHeat = false
            "if true, temperature T converges towards TAmb when no flow"
            annotation(Evaluate=true, Dialog(group="Heat transfer"));
          parameter Modelica.Units.SI.Temperature TAmb=Medium.T_default
            "Fixed ambient temperature for heat transfer"
            annotation (Dialog(enable=transferHeat, group="Heat transfer"));
          parameter Modelica.Units.SI.Time tauHeaTra(min=1) = 1200
            "Time constant for heat transfer, default 20 minutes"
            annotation (Dialog(enable=transferHeat, group="Heat transfer"));

        protected
          parameter Real tauHeaTraInv(final unit = "1/s")=
            if tauHeaTra<1E-10 then 0 else 1/tauHeaTra
            "Dummy parameter to avoid division by tauHeaTra";
          parameter Real ratTau = if dynamic then tauHeaTra/tau else 1
            "Ratio of tau";
          Medium.Temperature TMed(start=T_start)
            "Medium temperature to which the sensor is exposed";
          Medium.Temperature T_a_inflow "Temperature of inflowing fluid at port_a";
          Medium.Temperature T_b_inflow
            "Temperature of inflowing fluid at port_b, or T_a_inflow if uni-directional flow";
        initial equation
          if dynamic then
            if initType == Modelica.Blocks.Types.Init.SteadyState then
              der(T_real) = 0;
             elseif initType == Modelica.Blocks.Types.Init.InitialState or
                   initType == Modelica.Blocks.Types.Init.InitialOutput then
              T_real = T_start;
            end if;
          end if;
        equation
          if allowFlowReversal then
             T_a_inflow = Medium.temperature(state=
                            Medium.setState_phX(p=port_b.p, h=port_b.h_outflow, X=port_b.Xi_outflow));
             T_b_inflow = Medium.temperature(state=
                            Medium.setState_phX(p=port_a.p, h=port_a.h_outflow, X=port_a.Xi_outflow));
             TMed = Modelica.Fluid.Utilities.regStep(
                      x=port_a.m_flow,
                      y1=T_a_inflow,
                      y2=T_b_inflow,
                      x_small=m_flow_small);
          else
             TMed = Medium.temperature(state=
                      Medium.setState_phX(p=port_b.p, h=port_b.h_outflow, X=port_b.Xi_outflow));
             T_a_inflow = TMed;
             T_b_inflow = TMed;
          end if;
          // Output signal of sensor
          if dynamic then
            if transferHeat then
              der(T_real) = (TMed-T_real)*k*tauInv + (TAmb-T_real)*tauHeaTraInv/(ratTau*k+1);
            else
              der(T_real) = (TMed-T_real)*k*tauInv;
            end if;
          else
            T_real = TMed;
          end if;
        annotation (defaultComponentName="senTem",
            Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
                 graphics={
                Line(points={{-100,0},{92,0}}, color={0,128,255}),
                Ellipse(
                  extent={{-20,-58},{20,-20}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={191,0,0},
                  fillPattern=FillPattern.Solid),
                Line(points={{-40,60},{-12,60}}),
                Line(points={{-40,30},{-12,30}}),
                Line(points={{-40,0},{-12,0}}),
                Rectangle(
                  extent={{-12,60},{12,-24}},
                  lineColor={191,0,0},
                  fillColor={191,0,0},
                  fillPattern=FillPattern.Solid),
                Polygon(
                  points={{-12,60},{-12,80},{-10,86},{-6,88},{0,90},{6,88},{10,86},{12,
                      80},{12,60},{-12,60}},
                  lineColor={0,0,0},
                  lineThickness=0.5),
                Text(
                  extent={{102,140},{-18,90}},
                  lineColor={0,0,0},
                  textString="T"),
                Line(
                  points={{-12,60},{-12,-25}},
                  thickness=0.5),
                Line(
                  points={{12,60},{12,-24}},
                  thickness=0.5),
                Line(points={{0,100},{0,50}}, color={0,0,127}),
            Line(
            origin={-77.5,-22.3333},
            points={{43.5,8.3333},{37.5,0.3333},{21.5,-3.6667},{37.5,-17.6667},{7.5,-17.6667},
                      {19.5,-37.6667},{3.5,-38.3333},{-2.5,-48.3333}},
              smooth=Smooth.Bezier,
              visible=transferHeat),
                Polygon(
                  points={{-90,-80},{-84,-66},{-76,-74},{-90,-80}},
                  lineColor={0,0,0},
                  fillPattern=FillPattern.Solid,
                  fillColor={0,0,0},
                  visible=transferHeat)}),
            Documentation(info="<html>
<p>
This model outputs the temperature of the medium in the flow
between its fluid ports. The sensor does not influence the fluid.
</p>
<h4>Typical use and important parameters</h4>
<p>
If the parameter <code>tau</code> is non-zero, then its output <i>T</i>
converges to the temperature of the incoming fluid using
a first order differential equation.
Setting <code>tau=0</code> is <i>not</i> recommend. See
<a href=\"modelica://Buildings.Fluid.Sensors.UsersGuide\">
Buildings.Fluid.Sensors.UsersGuide</a> for an explanation.
</p>
<p>
If <code>transferHeat = true</code>, then heat transfer with the ambient is
approximated and <i>T</i> converges towards the fixed ambient
temperature <i>T<sub>Amb</sub></i> using a first order approximation
with a time constant of <code>tauHeaTra</code>
when the flow rate is small.
Note that no energy is exchanged with the fluid as the
sensor does not influence the fluid temperature.
</p>
<p>
Setting <code>transferHeat = true</code> is useful, for example,
if the sensor is used to measure the fluid temperature in
a system with on/off control on the mass flow rate.
If <code>transferHeat</code> were <code>false</code>, then the sensor output <i>T</i>
would remain constant if the mass flow rate is set to zero, and hence
the controller may never switch the mass flow rate on again.
</p>
<p>
In general, applications in which the sensor output is not used to switch
the mass flow rate on should set <code>transferHeat=false</code>.
</p>
</html>",         revisions="<html>
<ul>
<li>June 30, 2020 by Sen Huang:</li>
<p>Added a interface for implement various faults. </p>
<li>October 23, 2017 by Filip Jorissen:<br>Revised implementation of equations when <code>transferHeat=true</code>. See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/840\">#840</a>. </li>
<li>January 12, 2016 by Filip Jorissen:<br>Removed parameter <code>tauInv</code> since this now exists in <a href=\"modelica://Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor\">Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor</a>. </li>
<li>June 19, 2015 by Michael Wetter:<br>Revised model and documentation. </li>
<li>June 18, 2015 by Filip Jorissen:<br>Added option for simulating thermal losses. </li>
<li>June 3, 2011 by Michael Wetter:<br>Revised implementation to add dynamics in such a way that the time constant increases as the mass flow rate tends to zero. This significantly improves the numerics. </li>
<li>February 26, 2010 by Michael Wetter:<br>Set start attribute for temperature output. Prior to this change, the output was 0 at initial time, which caused the plot of the output to use 0 Kelvin as the lower value of the ordinate. </li>
<li>September 10, 2008, by Michael Wetter:<br>First implementation, based on <a href=\"modelica://Buildings.Fluid.Sensors.Temperature\">Buildings.Fluid.Sensors.Temperature</a>. </li>
</ul>
</html>"));
        end TemperatureTwoPort;

        model Pressure "Ideal pressure sensor"
          extends Buildings.Fluid.Sensors.BaseClasses.PartialAbsoluteSensor;
          extends Modelica.Icons.RoundSensor;
          Real p_real;
        equation
          p_real = port.p;
          annotation (defaultComponentName="senPre",
          Icon(coordinateSystem(
                preserveAspectRatio=false,
                extent={{-100,-100},{100,100}},
                grid={1,1}), graphics={
                Line(points={{70,0},{100,0}}, color={0,0,127}),
                Line(points={{0,-70},{0,-100}}, color={0,127,255}),
                Text(
                  extent={{-150,80},{150,120}},
                  textString="%name",
                  lineColor={0,0,255}),
                Text(
                  extent={{151,-20},{57,-50}},
                  lineColor={0,0,0},
                  textString="p")}),
            Documentation(info="<html>
<p>
This model outputs the absolute pressure of the fluid connected to its port.
The sensor is ideal, i.e., it does not influence the fluid.
</p>
</html>",
        revisions="<html>
<ul>
<li>June 30, 2020 by Sen Huang:</li>
<p>Added a interface for implement various faults. </p>
<li>May 9, 2017, by Filip Jorissen:<br>Changed output quantity to <code>AbsolutePressure</code>. See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/770\">#770</a>. </li>
<li>September 29, 2009, by Michael Wetter:<br>First implementation, based on <code>Modelica.Fluid</code>. </li>
</ul>
</html>"));
        end Pressure;

        model MassFlowRate "Ideal sensor for mass flow rate"
          extends Buildings.Fluid.Sensors.BaseClasses.PartialFlowSensor(
            final m_flow_nominal = 0,
            final m_flow_small = 0);
          extends Modelica.Icons.RoundSensor;
          Real m_flow_real;

        equation
          m_flow_real = port_a.m_flow;
        annotation (defaultComponentName="senMasFlo",
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
                graphics={
                Line(points={{70,0},{100,0}}, color={0,128,255}),
                Text(
                  extent={{162,120},{2,90}},
                  lineColor={0,0,0},
                  textString="m_flow"),
                Line(points={{0,100},{0,70}}, color={0,0,127}),
                Line(points={{-100,0},{-70,0}}, color={0,128,255})}),
          Documentation(info="<html>
<p>
This model outputs the mass flow rate flowing from
<code>port_a</code> to <code>port_b</code>.
The sensor is ideal, i.e., it does not influence the fluid.
</p>
</html>",
        revisions="<html>
<ul>
<li>
September 29, 2009, by Michael Wetter:<br/>
First implementation.
Implementation is based on <code>Modelica.Fluid</code>.
</li>
</ul>
</html>"));
        end MassFlowRate;

        model RelativePressure "Ideal relative pressure sensor"
          extends Modelica.Icons.RectangularSensor;
          replaceable package Medium =
            Modelica.Media.Interfaces.PartialMedium "Medium in the sensor"  annotation (
              choicesAllMatching = true);

          Modelica.Fluid.Interfaces.FluidPort_a port_a(m_flow(min=0),
                                        p(start=Medium.p_default),
                                        redeclare package Medium = Medium)
            "Fluid connector of stream a"
            annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_b(m_flow(min=0),
                                        p(start=Medium.p_default),
                                        redeclare package Medium = Medium)
            "Fluid connector of stream b"
            annotation (Placement(transformation(extent={{110,-12},{90,8}}), iconTransformation(extent={{110,-10},{90,10}})));

          Real p_real;
        equation
          // Zero flow equations for connectors
          port_a.m_flow = 0;
          port_b.m_flow = 0;

          // No contribution of specific quantities
          port_a.h_outflow = 0;
          port_b.h_outflow = 0;
          port_a.Xi_outflow = zeros(Medium.nXi);
          port_b.Xi_outflow = zeros(Medium.nXi);
          port_a.C_outflow  = zeros(Medium.nC);
          port_b.C_outflow  = zeros(Medium.nC);

          // Relative pressure
          p_real = port_a.p - port_b.p;
          annotation (defaultComponentName="senRelPre",
            Icon(graphics={
                Line(points={{-100,0},{-70,0}}, color={0,127,255}),
                Line(points={{70,0},{100,0}}, color={0,127,255}),
                Line(points={{0,-30},{0,-80}}, color={0,0,127}),
                Text(
                  extent={{-150,40},{150,80}},
                  textString="%name",
                  lineColor={0,0,255}),
                Text(
                  extent={{130,-70},{4,-100}},
                  lineColor={0,0,0},
                  textString="p_rel"),
                Line(
                  points={{32,3},{-58,3}},
                  color={0,128,255}),
                Polygon(
                  points={{22,18},{62,3},{22,-12},{22,18}},
                  lineColor={0,128,255},
                  fillColor={0,128,255},
                  fillPattern=FillPattern.Solid)}),
            Documentation(info="<html>
<p>
The relative pressure <code>port_a.p - port_b.p</code> is determined between
the two ports of this component and is provided as output signal. The
sensor should be connected in parallel with other equipment, no flow
through the sensor is allowed.
</p>
</html>",
        revisions="<html>
<ul>
<li>
February 19, 2016, by Michael Wetter:<br/>
Corrected the quantity of the output signal from <code>Pressure</code>
to <code>PressureDifference</code>.
This was needed for the model
<a href=\"modelica://Buildings.Fluid.Movers.FlowControlled_m_flow\">
Buildings.Fluid.Movers.FlowControlled_m_flow</a>
when revising it for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/417\">
issue 417</a>.
</li>
<li>
September 29, 2009, by Michael Wetter:<br/>
First implementation, based on <code>Modelica.Fluid</code>.
</li>
</ul>
</html>"));
        end RelativePressure;

        model PIreverse

            parameter Boolean reverseAction = false
            "Set to true for throttling the water flow rate through a cooling coil controller";

          final parameter Real revAct = if reverseAction then -1 else 1
            "Switch for sign for reverse action";
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end PIreverse;
      end BaseClasses;

      package Examples
      extends Modelica.Icons.ExamplesPackage;

        model TemSensorDev
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium for water";

          Buildings.Fluid.Sources.MassFlowSource_T souW(
            redeclare package Medium = Medium,
            T=273.15 + 20,
            use_T_in=true,
            nPorts=1,
            m_flow=1) "Source for water"
            annotation (Placement(transformation(extent={{58,-30},{38,-10}})));
          Modelica.Blocks.Sources.Sine sine(
            amplitude=2.5,
            offset=275.15 + 7.5,
            f=1/86400)
            annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
          Buildings.Fluid.Sources.Boundary_pT sinW(redeclare package Medium = Medium,
              nPorts=1) "Sink for water" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,-20})));
          BuildingControlEmulator.Devices.Fault.TemSensorDev temSensorDev(
            m_flow_nominal=1,
            redeclare package Medium = Medium,
            dt=2,
            FauTime=64300)
            annotation (Placement(transformation(extent={{-20,-30},{0,-10}})));
        equation
          connect(sine.y, souW.T_in) annotation (Line(
              points={{61,-50},{80,-50},{80,-16},{60,-16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(souW.ports[1], temSensorDev.port_b) annotation (Line(
              points={{38,-20},{20,-20},{0,-20}},
              color={0,127,255},
              thickness=1));
          connect(temSensorDev.port_a, sinW.ports[1]) annotation (Line(
              points={{-20,-20},{-64,-20}},
              color={0,127,255},
              thickness=1));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end TemSensorDev;

        model TemSensorDrift
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium for water";

          Buildings.Fluid.Sources.MassFlowSource_T souW(
            redeclare package Medium = Medium,
            T=273.15 + 20,
            use_T_in=true,
            nPorts=1,
            m_flow=1) "Source for water"
            annotation (Placement(transformation(extent={{58,-30},{38,-10}})));
          Modelica.Blocks.Sources.Sine sine(
            amplitude=2.5,
            offset=275.15 + 7.5,
            f=1/86400)
            annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
          Buildings.Fluid.Sources.Boundary_pT sinW(redeclare package Medium = Medium,
              nPorts=1) "Sink for water" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,-20})));
          BuildingControlEmulator.Devices.Fault.TemSensorDrift
                                                             temSensorDev(
            m_flow_nominal=1,
            redeclare package Medium = Medium,
            dt=2,
            FauTime=14300,
            DraftTime=20000)
            annotation (Placement(transformation(extent={{-20,-30},{0,-10}})));
        equation
          connect(sine.y, souW.T_in) annotation (Line(
              points={{61,-50},{80,-50},{80,-16},{60,-16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(souW.ports[1], temSensorDev.port_b) annotation (Line(
              points={{38,-20},{20,-20},{0,-20}},
              color={0,127,255},
              thickness=1));
          connect(temSensorDev.port_a, sinW.ports[1]) annotation (Line(
              points={{-20,-20},{-64,-20}},
              color={0,127,255},
              thickness=1));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end TemSensorDrift;

        model PreSensorDev
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium for water";

          Buildings.Fluid.Sources.Boundary_pT      souW(
            redeclare package Medium = Medium,
            T=273.15 + 20,
            use_p_in=true,
            nPorts=1) "Source for water"
            annotation (Placement(transformation(extent={{12,-28},{-8,-8}})));
          Modelica.Blocks.Sources.Sine sine(
            f=1/86400,
            amplitude=2000,
            offset=100000)
            annotation (Placement(transformation(extent={{-6,-58},{14,-38}})));
          BuildingControlEmulator.Devices.Fault.PreSensorDev preSensorDev(
            redeclare package Medium = Medium,
            dp= 0.1,
            FauTime=43200)
            annotation (Placement(transformation(extent={{-42,4},{-22,24}})));
        equation
          connect(sine.y, souW.p_in) annotation (Line(
              points={{15,-48},{34,-48},{34,-10},{14,-10}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(preSensorDev.port, souW.ports[1]) annotation (Line(
              points={{-32,4},{-32,-18},{-8,-18}},
              color={0,127,255},
              thickness=1));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end PreSensorDev;

        model PreSensorDrift
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium for water";

          Buildings.Fluid.Sources.Boundary_pT      souW(
            redeclare package Medium = Medium,
            T=273.15 + 20,
            use_p_in=true,
            nPorts=1) "Source for water"
            annotation (Placement(transformation(extent={{12,-28},{-8,-8}})));
          Modelica.Blocks.Sources.Sine sine(
            f=1/86400,
            amplitude=2000,
            offset=100000)
            annotation (Placement(transformation(extent={{-6,-58},{14,-38}})));
          BuildingControlEmulator.Devices.Fault.PreSensorDrift preSensorDev(
            redeclare package Medium = Medium,
            dp(displayUnit="Pa") = 200,
            FauTime=43200,
            DraftTime=40000)
            annotation (Placement(transformation(extent={{-42,4},{-22,24}})));
        equation
          connect(sine.y, souW.p_in) annotation (Line(
              points={{15,-48},{34,-48},{34,-10},{14,-10}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(preSensorDev.port, souW.ports[1]) annotation (Line(
              points={{-32,4},{-32,-18},{-8,-18}},
              color={0,127,255},
              thickness=1));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end PreSensorDrift;

        model TwoWayStuck
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium for water";

          Buildings.Obsolete.Fluid.Sources.FixedBoundary souW(
            redeclare package Medium = Medium,
            T=273.15 + 20,
            p(displayUnit="Pa") = 100000 + 100,
            nPorts=1) "Source for water"
            annotation (Placement(transformation(extent={{-70,-30},{-50,-10}})));
          Buildings.Obsolete.Fluid.Sources.FixedBoundary sinW(
            redeclare package Medium = Medium,
            T=273.15 + 20,
            p(displayUnit="Pa") = 100000,
            nPorts=1) "Source for water"
            annotation (Placement(transformation(extent={{46,-30},{26,-10}})));
          BuildingControlEmulator.Devices.Fault.TwoWayStuck val(
            m_flow_nominal=1,
            dpValve_nominal=100,
            redeclare package Medium = Medium,
            FauTime=86400*0.5,
            y_stuck=0.5)
            annotation (Placement(transformation(extent={{-20,-30},{0,-10}})));
          Modelica.Blocks.Sources.Ramp sine(duration=86400, offset=0)
            annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        equation
          connect(souW.ports[1], val.port_a) annotation (Line(
              points={{-50,-20},{-36,-20},{-20,-20}},
              color={0,127,255},
              thickness=1));
          connect(val.port_b, sinW.ports[1]) annotation (Line(
              points={{0,-20},{26,-20}},
              color={0,127,255},
              thickness=1));
          connect(sine.y, val.y) annotation (Line(
              points={{-39,30},{-10,30},{-10,-8}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400));
        end TwoWayStuck;

        model TwoWayLeak
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium for water";

          Buildings.Obsolete.Fluid.Sources.FixedBoundary souW(
            redeclare package Medium = Medium,
            T=273.15 + 20,
            p(displayUnit="Pa") = 100000 + 100,
            nPorts=1) "Source for water"
            annotation (Placement(transformation(extent={{-70,-30},{-50,-10}})));
          Buildings.Obsolete.Fluid.Sources.FixedBoundary sinW(
            redeclare package Medium = Medium,
            T=273.15 + 20,
            p(displayUnit="Pa") = 100000,
            nPorts=1) "Source for water"
            annotation (Placement(transformation(extent={{46,-30},{26,-10}})));
          BuildingControlEmulator.Devices.Fault.TwoWayLeak val(
            m_flow_nominal=1,
            dpValve_nominal=100,
            redeclare package Medium = Medium,
            y_leak=0.5,
            FauTime=86400*0.5)
            annotation (Placement(transformation(extent={{-20,-30},{0,-10}})));
          Modelica.Blocks.Sources.Ramp sine(duration=86400,
            height=-1,
            offset=1)
            annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        equation
          connect(souW.ports[1], val.port_a) annotation (Line(
              points={{-50,-20},{-36,-20},{-20,-20}},
              color={0,127,255},
              thickness=1));
          connect(val.port_b, sinW.ports[1]) annotation (Line(
              points={{0,-20},{26,-20}},
              color={0,127,255},
              thickness=1));
          connect(sine.y, val.y) annotation (Line(
              points={{-39,30},{-10,30},{-10,-8}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400));
        end TwoWayLeak;

        class Chiller
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
           extends Modelica.Icons.Example;
          package MediumCHW = Buildings.Media.Water "Medium for chilled water";
          package MediumCW = Buildings.Media.Water "Medium for condenser water";
          parameter Modelica.Units.SI.Pressure dPCHW_nominal=1000
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.Pressure dPCW_nominal=1000
            "Pressure difference at the condenser water wide";

          parameter Modelica.Units.SI.Temperature TCW_start=273.15 + 27
            "The start temperature of condenser water side";
          parameter Modelica.Units.SI.Temperature TCHW_start=273.15 + 5
            "The start temperature of chilled water side";

          BuildingControlEmulator.Devices.WaterSide.Chiller                 chi(
            per=per,
            redeclare package MediumCHW = MediumCHW,
            redeclare package MediumCW = MediumCW,
            redeclare BuildingControlEmulator.Devices.Fault.TemSensorDev senTCHWLea(    dt=2,
            FauTime=64300),
            dPCHW_nominal=dPCHW_nominal,
            dPCW_nominal=dPCW_nominal,
            mCHW_flow_nominal=per.mEva_flow_nominal,
            mCW_flow_nominal=per.mCon_flow_nominal,
            TCW_start=TCW_start,
            TCHW_start=TCHW_start)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-4,2})));
           parameter Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_23XL_724kW_6_04COP_Vanes
                                                                       per
            "Performance data"
            annotation (choicesAllMatching = true,
                        Placement(transformation(extent={{40,66},{60,86}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCHW(
            nPorts=1,
            redeclare package Medium = MediumCHW,
            m_flow=per.mEva_flow_nominal,
            T=273.15 + 20,
            use_T_in=true) "Source for CHW"
            annotation (Placement(transformation(extent={{58,-30},{38,-10}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            nPorts=1,
            redeclare package Medium = MediumCW,
            use_T_in=false,
            T=273.15 + 21.11,
            m_flow=per.mCon_flow_nominal) "Source for CHW"
            annotation (Placement(transformation(extent={{-80,18},{-60,38}})));
          Buildings.Fluid.Sources.Boundary_pT sinCHW(redeclare package Medium =
                MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,-20})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(nPorts=1, redeclare package
              Medium =
                MediumCW) "Sink for CW" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={48,28})));
          Modelica.Blocks.Sources.Constant       On(k=1)
            annotation (Placement(transformation(extent={{-80,46},{-60,66}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLea(
            allowFlowReversal=true,
            redeclare package Medium = MediumCHW,
            m_flow_nominal=per.mEva_flow_nominal) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-40,-20})));
          Modelica.Blocks.Sources.RealExpression TCHWSet(y=273.15 + 5.56)
            annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Modelica.Blocks.Sources.Sine sine(
            amplitude=1.5,
            offset=275.15 + 5.56,
            f=1/86400)
            annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
        equation
          connect(sinCHW.ports[1], senTCHWLea.port_b) annotation (Line(
              points={{-64,-20},{-64,-20},{-50,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CHW, senTCHWLea.port_a) annotation (Line(
              points={{-12,-8},{-12,-20},{-30,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CHW, souCHW.ports[1]) annotation (Line(
              points={{4,-8},{4,-20},{38,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CW, sinCW.ports[1]) annotation (Line(
              points={{4,12},{4,28},{38,28}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CW, souCW.ports[1]) annotation (Line(
              points={{-12,12},{-10,12},{-10,28},{-60,28}},
              color={0,127,255},
              thickness=1));
          connect(On.y, chi.On) annotation (Line(
              points={{-59,56},{-9,56},{-9,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(TCHWSet.y, chi.TCHWSet) annotation (Line(
              points={{-59,80},{-1,80},{-1,14}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(sine.y, souCHW.T_in) annotation (Line(
              points={{61,-50},{80,-50},{80,-16},{60,-16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (experiment(StopTime=86400, __Dymola_Algorithm="Dassl"));
        end Chiller;

        model MultiChillers "Test model for MultiChillerSystem"
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;

          Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_19XR_742kW_5_42COP_VSD
            datChi[3] annotation (Placement(transformation(extent={{-12,42},{8,62}})));

          package MediumCHW = Buildings.Media.Water "Medium model";
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.TemperatureDifference dTCHW_nominal=5.56
            "Temperature difference at the chilled water side";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference at the condenser water wide";
          parameter Modelica.Units.SI.Pressure dPCHW_nominal=91166
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.Pressure dPCW_nominal=92661
            "Pressure difference at the condenser water wide";
          parameter Modelica.Units.SI.Temperature TCHW_nominal=273.15 + 5.56
            "Temperature at the chilled water side";
          parameter Modelica.Units.SI.Temperature TCW_nominal=273.15 + 29.44
            "Temperature at the condenser water wide";
          parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal[:]={-datChi[1].QEva_flow_nominal
              /4200/5.56 for i in linspace(
              1,
              3,
              3)} "Nominal mass flow rate at the chilled water side";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={
              mCHW_flow_nominal[1]*(datChi[1].COP_nominal + 1)/datChi[1].COP_nominal
              for i in linspace(
              1,
              3,
              3)} "Nominal mass flow rate at the condenser water wide";

          BuildingControlEmulator.Subsystems.Chiller.MultiChillers mulChiSys(
            redeclare package MediumCHW = MediumCHW,
            redeclare package MediumCW = MediumCW,
            dPCHW_nominal=dPCHW_nominal,
            dPCW_nominal=dPCW_nominal,
            mCHW_flow_nominal=mCHW_flow_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            TCW_start=273.15 + 29.44,
            TCHW_start=273.15 + 5.56,
            n=3,
            per=datChi,
            ch(redeclare BuildingControlEmulator.Devices.Fault.TemSensorDev senTCHWLea))
            annotation (Placement(transformation(extent={{-8,-12},{12,8}})));

          Modelica.Blocks.Sources.Step OnA(height=1, startTime=0) annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
          Modelica.Blocks.Sources.Step OnB(          startTime=21600,
            height=1,
            offset=0)                                                 annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Modelica.Blocks.Sources.Step OnC(          startTime=43200,
            height=1,
            offset=0)                                                 annotation (Placement(transformation(extent={{80,70},{60,90}})));
          Modelica.Blocks.Sources.Constant TCHWSet(k=273.15 + 5.56)
            annotation (Placement(transformation(extent={{80,30},{60,50}})));
          Buildings.Obsolete.Fluid.Sources.FixedBoundary sinCW(redeclare
              package Medium =
                MediumCW, nPorts=1) "Sink for CW" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-70,4})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            redeclare package Medium = MediumCW,
            nPorts=1,
            m_flow=sum(mCW_flow_nominal),
            use_m_flow_in=true,
            use_T_in=false,
            T(displayUnit="K") = 273.15 + 21.11) "Source for CW"
            annotation (Placement(transformation(extent={{-48,-50},{-28,-30}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCHW(
            use_T_in=true,
            redeclare package Medium = MediumCHW,
            nPorts=1,
            m_flow=sum(mCW_flow_nominal),
            use_m_flow_in=true,
            T=298.15) "Source for CHW"
            annotation (Placement(transformation(extent={{42,-24},{22,-4}})));
          Buildings.Obsolete.Fluid.Sources.FixedBoundary sinCHW(redeclare
              package Medium =
                MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={70,-50})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLeaChi(
              redeclare package Medium = MediumCHW, m_flow_nominal=sum(mCHW_flow_nominal),
            T_start=273.15 + 5.56)
            annotation (Placement(transformation(extent={{20,-60},{40,-40}})));
          Modelica.Blocks.Sources.Sine TCHWEntChi(
            f=1/21600,
            amplitude=2,
            offset=273.15 + 5.56 + 2)
            annotation (Placement(transformation(extent={{80,-22},{60,-2}})));
          Modelica.Blocks.Sources.RealExpression mCW_flow(y=(OnA.y + OnB.y + OnC.y)*mCW_flow_nominal[1])
            annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
          Modelica.Blocks.Sources.RealExpression mCHW_flow(y=(OnA.y + OnB.y + OnC.y)*mCHW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,2},{60,22}})));

        equation

          connect(TCHWSet.y, mulChiSys.TCHWSet) annotation (Line(
              points={{59,40},{-20,40},{-20,2},{-8.9,2}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1], mulChiSys.port_b_CW)
            annotation (Line(
              points={{-60,4},{-36,4},{-36,6},{-8,6}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(souCW.ports[1], mulChiSys.port_a_CW)
            annotation (Line(
              points={{-28,-40},{-20,-40},{-20,-10},{-8,-10}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(TCHWEntChi.y,souCHW. T_in)
            annotation (Line(
              points={{59,-12},{52,-12},{52,-10},{44,-10}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(senTCHWLeaChi.port_b,sinCHW. ports[1])
            annotation (Line(
              points={{40,-50},{60,-50}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(souCHW.ports[1], mulChiSys.port_a_CHW)
            annotation (Line(
              points={{22,-14},{18,-14},{18,6},{12,6}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(mulChiSys.port_b_CHW,senTCHWLeaChi. port_a)
            annotation (Line(
              points={{12,-10},{16,-10},{16,-50},{20,-50}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(mCW_flow.y, souCW.m_flow_in)
            annotation (Line(
              points={{-59,-60},{-54,-60},{-54,-32},{-50,-32}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mCHW_flow.y, souCHW.m_flow_in)
            annotation (Line(
              points={{59,12},{52,12},{52,-6},{44,-6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(OnA.y, mulChiSys.On[1]) annotation (Line(
              points={{-59,40},{-44,40},{-44,-5.4},{-8.9,-5.4}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, mulChiSys.On[2]) annotation (Line(
              points={{-59,80},{-44,80},{-28,80},{-28,-6},{-8.9,-6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnC.y, mulChiSys.On[3]) annotation (Line(
              points={{59,80},{8,80},{8,90},{-36,90},{-36,-6.6},{-8.9,-6.6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/Chiller/Example/MultiChillerSystem.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end MultiChillers;

        model MultiHeterChillers "Test model for MultiChillerSystem"
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;

          Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_19XR_742kW_5_42COP_VSD
            datChi[3] annotation (Placement(transformation(extent={{-12,42},{8,62}})));

          package MediumCHW = Buildings.Media.Water "Medium model";
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.TemperatureDifference dTCHW_nominal=5.56
            "Temperature difference at the chilled water side";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference at the condenser water wide";
          parameter Modelica.Units.SI.Pressure dPCHW_nominal=91166
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.Pressure dPCW_nominal=92661
            "Pressure difference at the condenser water wide";
          parameter Modelica.Units.SI.Temperature TCHW_nominal=273.15 + 5.56
            "Temperature at the chilled water side";
          parameter Modelica.Units.SI.Temperature TCW_nominal=273.15 + 29.44
            "Temperature at the condenser water wide";
          parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal[:]={-datChi[1].QEva_flow_nominal
              /4200/5.56 for i in linspace(
              1,
              3,
              3)} "Nominal mass flow rate at the chilled water side";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={
              mCHW_flow_nominal[1]*(datChi[1].COP_nominal + 1)/datChi[1].COP_nominal
              for i in linspace(
              1,
              3,
              3)} "Nominal mass flow rate at the condenser water wide";

          BuildingControlEmulator.Subsystems.Chiller.MultiHeterChillers mulChiSys(
            redeclare package MediumCHW = MediumCHW,
            redeclare package MediumCW = MediumCW,
            dPCHW_nominal=dPCHW_nominal,
            dPCW_nominal=dPCW_nominal,
            mCHW_flow_nominal=mCHW_flow_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            TCW_start=273.15 + 29.44,
            TCHW_start=273.15 + 5.56,
            n=1,
            m=2,
            per=datChi,
            ch1(redeclare BuildingControlEmulator.Devices.Fault.TemSensorDev senTCHWLea(
                  dt=-2, FauTime=20000)))
            annotation (Placement(transformation(extent={{-10,-12},{10,8}})));
          Modelica.Blocks.Sources.Step OnA(height=1, startTime=0) annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
          Modelica.Blocks.Sources.Step OnB(          startTime=21600,
            height=1,
            offset=0)                                                 annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Modelica.Blocks.Sources.Step OnC(          startTime=43200,
            height=1,
            offset=0)                                                 annotation (Placement(transformation(extent={{80,70},{60,90}})));
          Modelica.Blocks.Sources.Constant TCHWSet(k=273.15 + 5.56)
            annotation (Placement(transformation(extent={{80,30},{60,50}})));
          Buildings.Obsolete.Fluid.Sources.FixedBoundary sinCW(redeclare
              package Medium =
                MediumCW, nPorts=1) "Sink for CW" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-70,4})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            redeclare package Medium = MediumCW,
            nPorts=1,
            m_flow=sum(mCW_flow_nominal),
            use_m_flow_in=true,
            use_T_in=false,
            T(displayUnit="K") = 273.15 + 21.11) "Source for CW"
            annotation (Placement(transformation(extent={{-48,-50},{-28,-30}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCHW(
            use_T_in=true,
            redeclare package Medium = MediumCHW,
            nPorts=1,
            m_flow=sum(mCW_flow_nominal),
            use_m_flow_in=true,
            T=298.15) "Source for CHW"
            annotation (Placement(transformation(extent={{42,-24},{22,-4}})));
          Buildings.Obsolete.Fluid.Sources.FixedBoundary sinCHW(redeclare
              package Medium =
                MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={70,-50})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLeaChi(
              redeclare package Medium = MediumCHW, m_flow_nominal=sum(mCHW_flow_nominal),
            T_start=273.15 + 5.56)
            annotation (Placement(transformation(extent={{20,-60},{40,-40}})));
          Modelica.Blocks.Sources.Sine TCHWEntChi(
            f=1/21600,
            amplitude=2,
            offset=273.15 + 5.56 + 2)
            annotation (Placement(transformation(extent={{80,-22},{60,-2}})));
          Modelica.Blocks.Sources.RealExpression mCW_flow(y=(OnA.y + OnB.y + OnC.y)*mCW_flow_nominal[1])
            annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
          Modelica.Blocks.Sources.RealExpression mCHW_flow(y=(OnA.y + OnB.y + OnC.y)*mCHW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,2},{60,22}})));

        equation

          connect(TCHWSet.y, mulChiSys.TCHWSet) annotation (Line(
              points={{59,40},{-20,40},{-20,2},{-10.9,2}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1], mulChiSys.port_b_CW)
            annotation (Line(
              points={{-60,4},{-36,4},{-36,6},{-10,6}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(souCW.ports[1], mulChiSys.port_a_CW)
            annotation (Line(
              points={{-28,-40},{-20,-40},{-20,-10},{-10,-10}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(TCHWEntChi.y,souCHW. T_in)
            annotation (Line(
              points={{59,-12},{52,-12},{52,-10},{44,-10}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(senTCHWLeaChi.port_b,sinCHW. ports[1])
            annotation (Line(
              points={{40,-50},{60,-50}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(souCHW.ports[1], mulChiSys.port_a_CHW)
            annotation (Line(
              points={{22,-14},{18,-14},{18,6},{10,6}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(mulChiSys.port_b_CHW,senTCHWLeaChi. port_a)
            annotation (Line(
              points={{10,-10},{16,-10},{16,-50},{20,-50}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(mCW_flow.y, souCW.m_flow_in)
            annotation (Line(
              points={{-59,-60},{-54,-60},{-54,-32},{-50,-32}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mCHW_flow.y, souCHW.m_flow_in)
            annotation (Line(
              points={{59,12},{52,12},{52,-6},{44,-6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(OnA.y, mulChiSys.On[1]) annotation (Line(
              points={{-59,40},{-44,40},{-44,-5.4},{-10.9,-5.4}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, mulChiSys.On[2]) annotation (Line(
              points={{-59,80},{-44,80},{-28,80},{-28,-6},{-10.9,-6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnC.y, mulChiSys.On[3]) annotation (Line(
              points={{59,80},{8,80},{8,90},{-36,90},{-36,-6.6},{-10.9,-6.6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/Chiller/Example/MultiChillerSystem.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end MultiHeterChillers;

        model MultiCoolingHeterTowers
          import ChillerPlantSystem = WaterSide.Plant;
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.Power P_nominal[:]={30000 for i in linspace(
              1,
              3,
              3)} "Nominal power (at y=1)";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference between the outlet and inlet of the cooling tower";
          parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal=4.44
            "Nominal approach temperature";
          parameter Modelica.Units.SI.Temperature TWetBul_nominal=273.15 + 25
            "Nominal wet bulb temperature";
          parameter Modelica.Units.SI.Pressure dP_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={10 for i in
              linspace(
              1,
              3,
              3)} "Nominal mass flow rate at condenser water wide";
          parameter Real GaiPi=1 "Gain of the PI controller";
          parameter Real tIntPi=60 "Integration time of the PI controller";
          parameter Real v_flow_rate[3,:]={{0.3,0.6,1},{0.3,0.6,1},{0.3,0.6,1}} "Volume flow rate ratio";
          parameter Real eta[3,:]={{0.6,0.7,1},{0.6,0.7,1},{0.6,0.7,1}} "Fan efficiency";
          parameter Modelica.Units.SI.Pressure dPByp_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          BuildingControlEmulator.Subsystems.CoolingTower.MultiHeterCoolingTowers
            cooTow(
            redeclare package MediumCW = MediumCW,
            P_nominal=P_nominal,
            dTCW_nominal=dTCW_nominal,
            dP_nominal=dP_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            GaiPi=GaiPi,
            tIntPi=tIntPi,
            v_flow_rate=v_flow_rate,
            TCW_start=273.15 + 29.44,
            dTApp_nominal=dTApp_nominal,
            TWetBul_nominal=TWetBul_nominal,
            eta=eta,
            n=1,
            m=2,
            ct1(redeclare BuildingControlEmulator.Devices.Fault.TemSensorDev senTCWLea(
                  dt=-2, FauTime=20000)))
            annotation (Placement(transformation(extent={{-20,2},{0,22}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            use_T_in=true,
            redeclare package Medium = MediumCW,
            T=273.15 + 29.44,
            nPorts=1,
            use_m_flow_in=true) "Source for CW"
            annotation (Placement(transformation(extent={{40,14},{20,34}})));
          Buildings.Obsolete.Fluid.Sources.FixedBoundary sinCW(redeclare
              package Medium =
                MediumCW, nPorts=1) "Sink for CW" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={30,-70})));
          Modelica.Blocks.Sources.Constant TWetBul(k=273.15 + 20)   annotation (Placement(transformation(extent={{-80,-80},
                    {-60,-60}})));
          Modelica.Blocks.Sources.Constant TCWSet(k=273.15 + 29.44)
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
          Modelica.Blocks.Sources.Step OnA(
            offset=1,
            startTime=21600,
            height=0)
            annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
          Modelica.Blocks.Sources.Step OnB(
            height=-1,
            offset=1,
            startTime=43200)
            annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
          Modelica.Blocks.Sources.Step OnC(
            height=-1,
            offset=1,
            startTime=64800)
            annotation (Placement(transformation(extent={{80,40},{60,60}})));
          Modelica.Blocks.Sources.Sine TCWLeaChi(
            f=1/21600,
            amplitude=17.31,
            offset=273.15 + 17.31)
            annotation (Placement(transformation(extent={{80,-40},{60,-20}})));
          Modelica.Blocks.Sources.RealExpression mCHW_flow(y=(OnA.y + OnB.y + OnC.y)*mCW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,14},{60,34}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEntChi(
              redeclare package Medium = MediumCW, m_flow_nominal=sum(mCW_flow_nominal))
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={10,-30})));
        equation

          connect(TWetBul.y, cooTow.TWetBul) annotation (Line(
              points={{-59,-70},{-32,-70},{-32,6},{-20.9,6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWSet.y, cooTow.TCWSet) annotation (Line(
              points={{-59,-30},{-40,-30},{-40,19.9},{-20.9,19.9}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWLeaChi.y, souCW.T_in) annotation (Line(
              points={{59,-30},{50,-30},{50,28},{42,28}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mCHW_flow.y, souCW.m_flow_in) annotation (Line(
              points={{59,24},{50,24},{50,32},{42,32}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1],senTCWEntChi. port_b) annotation (Line(
              points={{20,-70},{10,-70},{10,-40}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(OnA.y, cooTow.On[1]) annotation (Line(
              points={{-59,10},{-44,10},{-44,15.3},{-20.9,15.3}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, cooTow.On[2]) annotation (Line(
              points={{-59,48},{-42,48},{-42,15.9},{-20.9,15.9}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnC.y, cooTow.On[3]) annotation (Line(
              points={{59,50},{14,50},{-32,50},{-32,16.5},{-20.9,16.5}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(cooTow.port_a_CW, souCW.ports[1]) annotation (Line(
              points={{-20,12},{-28,12},{-28,24},{10,24},{20,24}},
              color={0,127,255},
              thickness=1));
          connect(cooTow.port_b_CW, senTCWEntChi.port_a)
            annotation (Line(
              points={{0,12},{10,12},{10,-20}},
              color={0,127,255},
              thickness=1));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/CoolingTower/Example/CoolingTowerWithBypass.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end MultiCoolingHeterTowers;

        model HeterCoolingTowersWithBypass
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.Power P_nominal[:]={30000 for i in linspace(
              1,
              3,
              3)} "Nominal power (at y=1)";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference between the outlet and inlet of the cooling tower";
          parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal=4.44
            "Nominal approach temperature";
          parameter Modelica.Units.SI.Temperature TWetBul_nominal=273.15 + 25
            "Nominal wet bulb temperature";
          parameter Modelica.Units.SI.Pressure dP_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={10 for i in
              linspace(
              1,
              3,
              3)} "Nominal mass flow rate at condenser water wide";
          parameter Real GaiPi=1 "Gain of the PI controller";
          parameter Real tIntPi=60 "Integration time of the PI controller";
          parameter Real v_flow_rate[3,:]={{0.3,0.6,1},{0.3,0.6,1},{0.3,0.6,1}} "Volume flow rate ratio";
          parameter Real eta[3,:]={{0.6,0.7,1},{0.6,0.7,1},{0.6,0.7,1}} "Fan efficiency";
          parameter Modelica.Units.SI.Pressure dPByp_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          BuildingControlEmulator.Subsystems.CoolingTower.CoolingTowersWithBypass
            cooTow(
            redeclare package MediumCW = MediumCW,
            P_nominal=P_nominal,
            dTCW_nominal=dTCW_nominal,
            dP_nominal=dP_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            v_flow_rate=v_flow_rate,
            TCW_start=273.15 + 29.44,
            dTApp_nominal=dTApp_nominal,
            TWetBul_nominal=TWetBul_nominal,
            eta=eta,
            dPByp_nominal(displayUnit="Pa") = 1000,
            TCWLowSet=288.71,
            n=3,
            redeclare BuildingControlEmulator.Subsystems.CoolingTower.MultiHeterCoolingTowers
            mulCooTowSys(n=1,m=2, ct1(redeclare BuildingControlEmulator.Devices.Fault.TemSensorDev senTCWLea(
                  dt=-2, FauTime=20000))))
            annotation (Placement(transformation(extent={{-20,2},{0,22}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            use_T_in=true,
            redeclare package Medium = MediumCW,
            T=273.15 + 29.44,
            nPorts=1,
            use_m_flow_in=true) "Source for CW"
            annotation (Placement(transformation(extent={{40,14},{20,34}})));
          Buildings.Obsolete.Fluid.Sources.FixedBoundary sinCW(redeclare
              package Medium =
                MediumCW, nPorts=1) "Sink for CW" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={30,-70})));
          Modelica.Blocks.Sources.Constant TWetBul(k=273.15 + 20)   annotation (Placement(transformation(extent={{-80,-80},
                    {-60,-60}})));
          Modelica.Blocks.Sources.Constant TCWSet(k=273.15 + 29.44)
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
          Modelica.Blocks.Sources.Step OnA(
            offset=1,
            startTime=21600,
            height=0)
            annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
          Modelica.Blocks.Sources.Step OnB(
            height=-1,
            offset=1,
            startTime=43200)
            annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
          Modelica.Blocks.Sources.Step OnC(
            height=-1,
            offset=1,
            startTime=64800)
            annotation (Placement(transformation(extent={{80,40},{60,60}})));
          Modelica.Blocks.Sources.Sine TCWLeaChi(
            f=1/21600,
            amplitude=17.31,
            offset=273.15 + 17.31)
            annotation (Placement(transformation(extent={{80,-40},{60,-20}})));
          Modelica.Blocks.Sources.RealExpression mCHW_flow(y=(OnA.y + OnB.y + OnC.y)*mCW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,14},{60,34}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEntChi(
              redeclare package Medium = MediumCW, m_flow_nominal=sum(mCW_flow_nominal))
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={10,-30})));
        equation

          connect(TWetBul.y, cooTow.TWetBul) annotation (Line(
              points={{-59,-70},{-32,-70},{-32,6},{-20.9,6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWSet.y, cooTow.TCWSet) annotation (Line(
              points={{-59,-30},{-40,-30},{-40,12},{-20.9,12}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWLeaChi.y, souCW.T_in) annotation (Line(
              points={{59,-30},{50,-30},{50,28},{42,28}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mCHW_flow.y, souCW.m_flow_in) annotation (Line(
              points={{59,24},{50,24},{50,32},{42,32}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1],senTCWEntChi. port_b) annotation (Line(
              points={{20,-70},{10,-70},{10,-40}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(OnA.y, cooTow.On[1]) annotation (Line(
              points={{-59,10},{-44,10},{-44,17.4},{-20.9,17.4}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, cooTow.On[2]) annotation (Line(
              points={{-59,48},{-42,48},{-42,18},{-20.9,18}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnC.y, cooTow.On[3]) annotation (Line(
              points={{59,50},{14,50},{-32,50},{-32,18.6},{-20.9,18.6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(souCW.ports[1], cooTow.port_a)
            annotation (Line(
              points={{20,24},{0,24},{0,18}},
              color={0,127,255},
              thickness=1));
          connect(cooTow.port_b, senTCWEntChi.port_a)
            annotation (Line(
              points={{0,4},{0,-8},{10,-8},{10,-20}},
              color={0,127,255},
              thickness=1));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/CoolingTower/Example/CoolingTowerWithBypass.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end HeterCoolingTowersWithBypass;

        model HeterCoolingTowersWithBypassValveStuck
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.Power P_nominal[:]={30000 for i in linspace(
              1,
              3,
              3)} "Nominal power (at y=1)";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference between the outlet and inlet of the cooling tower";
          parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal=4.44
            "Nominal approach temperature";
          parameter Modelica.Units.SI.Temperature TWetBul_nominal=273.15 + 25
            "Nominal wet bulb temperature";
          parameter Modelica.Units.SI.Pressure dP_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={10 for i in
              linspace(
              1,
              3,
              3)} "Nominal mass flow rate at condenser water wide";
          parameter Real GaiPi=1 "Gain of the PI controller";
          parameter Real tIntPi=60 "Integration time of the PI controller";
          parameter Real v_flow_rate[3,:]={{0.3,0.6,1},{0.3,0.6,1},{0.3,0.6,1}} "Volume flow rate ratio";
          parameter Real eta[3,:]={{0.6,0.7,1},{0.6,0.7,1},{0.6,0.7,1}} "Fan efficiency";
          parameter Modelica.Units.SI.Pressure dPByp_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          BuildingControlEmulator.Subsystems.CoolingTower.CoolingTowersWithBypass
            cooTow(
            redeclare package MediumCW = MediumCW,
            P_nominal=P_nominal,
            dTCW_nominal=dTCW_nominal,
            dP_nominal=dP_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            v_flow_rate=v_flow_rate,
            TCW_start=273.15 + 29.44,
            dTApp_nominal=dTApp_nominal,
            TWetBul_nominal=TWetBul_nominal,
            eta=eta,
            dPByp_nominal(displayUnit="Pa") = 1000,
            TCWLowSet=288.71,
            n=3,
            byp(redeclare BuildingControlEmulator.Devices.Fault.TwoWayStuck valByp(y_stuck=0.7,FauTime=86400/2)))
            annotation (Placement(transformation(extent={{-20,2},{0,22}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            use_T_in=true,
            redeclare package Medium = MediumCW,
            T=273.15 + 29.44,
            nPorts=1,
            use_m_flow_in=true) "Source for CW"
            annotation (Placement(transformation(extent={{40,14},{20,34}})));
          Buildings.Obsolete.Fluid.Sources.FixedBoundary sinCW(redeclare
              package Medium =
                MediumCW, nPorts=1) "Sink for CW" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={30,-70})));
          Modelica.Blocks.Sources.Constant TWetBul(k=273.15 + 20)   annotation (Placement(transformation(extent={{-80,-80},
                    {-60,-60}})));
          Modelica.Blocks.Sources.Constant TCWSet(k=273.15 + 29.44)
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
          Modelica.Blocks.Sources.Step OnA(
            offset=1,
            startTime=21600,
            height=0)
            annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
          Modelica.Blocks.Sources.Step OnB(
            height=-1,
            offset=1,
            startTime=43200)
            annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
          Modelica.Blocks.Sources.Step OnC(
            height=-1,
            offset=1,
            startTime=64800)
            annotation (Placement(transformation(extent={{80,40},{60,60}})));
          Modelica.Blocks.Sources.Sine TCWLeaChi(
            f=1/21600,
            amplitude=17.31,
            offset=273.15 + 17.31)
            annotation (Placement(transformation(extent={{80,-40},{60,-20}})));
          Modelica.Blocks.Sources.RealExpression mCHW_flow(y=(OnA.y + OnB.y + OnC.y)*mCW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,14},{60,34}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEntChi(
              redeclare package Medium = MediumCW, m_flow_nominal=sum(mCW_flow_nominal))
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={10,-30})));
        equation

          connect(TWetBul.y, cooTow.TWetBul) annotation (Line(
              points={{-59,-70},{-32,-70},{-32,6},{-20.9,6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWSet.y, cooTow.TCWSet) annotation (Line(
              points={{-59,-30},{-40,-30},{-40,12},{-20.9,12}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWLeaChi.y, souCW.T_in) annotation (Line(
              points={{59,-30},{50,-30},{50,28},{42,28}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mCHW_flow.y, souCW.m_flow_in) annotation (Line(
              points={{59,24},{50,24},{50,32},{42,32}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1],senTCWEntChi. port_b) annotation (Line(
              points={{20,-70},{10,-70},{10,-40}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(OnA.y, cooTow.On[1]) annotation (Line(
              points={{-59,10},{-44,10},{-44,17.4},{-20.9,17.4}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, cooTow.On[2]) annotation (Line(
              points={{-59,48},{-42,48},{-42,18},{-20.9,18}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnC.y, cooTow.On[3]) annotation (Line(
              points={{59,50},{14,50},{-32,50},{-32,18.6},{-20.9,18.6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(souCW.ports[1], cooTow.port_a)
            annotation (Line(
              points={{20,24},{0,24},{0,18}},
              color={0,127,255},
              thickness=1));
          connect(cooTow.port_b, senTCWEntChi.port_a)
            annotation (Line(
              points={{0,4},{0,-8},{10,-8},{10,-20}},
              color={0,127,255},
              thickness=1));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/CoolingTower/Example/CoolingTowerWithBypass.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end HeterCoolingTowersWithBypassValveStuck;

        model MultiHeterChillers_drift "Test model for MultiChillerSystem"
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;

          Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_19XR_742kW_5_42COP_VSD
            datChi[3] annotation (Placement(transformation(extent={{-12,42},{8,62}})));

          package MediumCHW = Buildings.Media.Water "Medium model";
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.TemperatureDifference dTCHW_nominal=5.56
            "Temperature difference at the chilled water side";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference at the condenser water wide";
          parameter Modelica.Units.SI.Pressure dPCHW_nominal=91166
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.Pressure dPCW_nominal=92661
            "Pressure difference at the condenser water wide";
          parameter Modelica.Units.SI.Temperature TCHW_nominal=273.15 + 5.56
            "Temperature at the chilled water side";
          parameter Modelica.Units.SI.Temperature TCW_nominal=273.15 + 29.44
            "Temperature at the condenser water wide";
          parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal[:]={-datChi[1].QEva_flow_nominal
              /4200/5.56 for i in linspace(
              1,
              3,
              3)} "Nominal mass flow rate at the chilled water side";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={
              mCHW_flow_nominal[1]*(datChi[1].COP_nominal + 1)/datChi[1].COP_nominal
              for i in linspace(
              1,
              3,
              3)} "Nominal mass flow rate at the condenser water wide";

          BuildingControlEmulator.Subsystems.Chiller.MultiHeterChillers mulChiSys(
            redeclare package MediumCHW = MediumCHW,
            redeclare package MediumCW = MediumCW,
            dPCHW_nominal=dPCHW_nominal,
            dPCW_nominal=dPCW_nominal,
            mCHW_flow_nominal=mCHW_flow_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            TCW_start=273.15 + 29.44,
            TCHW_start=273.15 + 5.56,
            n=1,
            m=2,
            per=datChi,
            ch1(redeclare BuildingControlEmulator.Devices.Fault.TemSensorDrift senTCHWLea(
                  dt=-2, FauTime=20000,
                DraftTime=1800)))
            annotation (Placement(transformation(extent={{-10,-12},{10,8}})));
          Modelica.Blocks.Sources.Step OnA(height=1, startTime=0) annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
          Modelica.Blocks.Sources.Step OnB(          startTime=21600,
            height=1,
            offset=0)                                                 annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Modelica.Blocks.Sources.Step OnC(          startTime=43200,
            height=1,
            offset=0)                                                 annotation (Placement(transformation(extent={{80,70},{60,90}})));
          Modelica.Blocks.Sources.Constant TCHWSet(k=273.15 + 5.56)
            annotation (Placement(transformation(extent={{80,30},{60,50}})));
          Buildings.Obsolete.Fluid.Sources.FixedBoundary sinCW(redeclare
              package Medium =
                MediumCW, nPorts=1) "Sink for CW" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-70,4})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            redeclare package Medium = MediumCW,
            nPorts=1,
            m_flow=sum(mCW_flow_nominal),
            use_m_flow_in=true,
            use_T_in=false,
            T(displayUnit="K") = 273.15 + 21.11) "Source for CW"
            annotation (Placement(transformation(extent={{-48,-50},{-28,-30}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCHW(
            use_T_in=true,
            redeclare package Medium = MediumCHW,
            nPorts=1,
            m_flow=sum(mCW_flow_nominal),
            use_m_flow_in=true,
            T=298.15) "Source for CHW"
            annotation (Placement(transformation(extent={{42,-24},{22,-4}})));
          Buildings.Obsolete.Fluid.Sources.FixedBoundary sinCHW(redeclare
              package Medium =
                MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={70,-50})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLeaChi(
              redeclare package Medium = MediumCHW, m_flow_nominal=sum(mCHW_flow_nominal),
            T_start=273.15 + 5.56)
            annotation (Placement(transformation(extent={{20,-60},{40,-40}})));
          Modelica.Blocks.Sources.Sine TCHWEntChi(
            f=1/21600,
            amplitude=2,
            offset=273.15 + 5.56 + 2)
            annotation (Placement(transformation(extent={{80,-22},{60,-2}})));
          Modelica.Blocks.Sources.RealExpression mCW_flow(y=(OnA.y + OnB.y + OnC.y)*mCW_flow_nominal[1])
            annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
          Modelica.Blocks.Sources.RealExpression mCHW_flow(y=(OnA.y + OnB.y + OnC.y)*mCHW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,2},{60,22}})));

        equation

          connect(TCHWSet.y, mulChiSys.TCHWSet) annotation (Line(
              points={{59,40},{-20,40},{-20,2},{-10.9,2}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1], mulChiSys.port_b_CW)
            annotation (Line(
              points={{-60,4},{-36,4},{-36,6},{-10,6}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(souCW.ports[1], mulChiSys.port_a_CW)
            annotation (Line(
              points={{-28,-40},{-20,-40},{-20,-10},{-10,-10}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(TCHWEntChi.y,souCHW. T_in)
            annotation (Line(
              points={{59,-12},{52,-12},{52,-10},{44,-10}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(senTCHWLeaChi.port_b,sinCHW. ports[1])
            annotation (Line(
              points={{40,-50},{60,-50}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(souCHW.ports[1], mulChiSys.port_a_CHW)
            annotation (Line(
              points={{22,-14},{18,-14},{18,6},{10,6}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(mulChiSys.port_b_CHW,senTCHWLeaChi. port_a)
            annotation (Line(
              points={{10,-10},{16,-10},{16,-50},{20,-50}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(mCW_flow.y, souCW.m_flow_in)
            annotation (Line(
              points={{-59,-60},{-54,-60},{-54,-32},{-50,-32}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mCHW_flow.y, souCHW.m_flow_in)
            annotation (Line(
              points={{59,12},{52,12},{52,-6},{44,-6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(OnA.y, mulChiSys.On[1]) annotation (Line(
              points={{-59,40},{-44,40},{-44,-5.4},{-10.9,-5.4}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, mulChiSys.On[2]) annotation (Line(
              points={{-59,80},{-44,80},{-28,80},{-28,-6},{-10.9,-6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnC.y, mulChiSys.On[3]) annotation (Line(
              points={{59,80},{8,80},{8,90},{-36,90},{-36,-6.6},{-10.9,-6.6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/Chiller/Example/MultiChillerSystem.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end MultiHeterChillers_drift;

        model FloSensorDev
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium for water";

          Buildings.Fluid.Sources.MassFlowSource_T souW(
            redeclare package Medium = Medium,
            T=273.15 + 20,
            use_T_in=true,
            m_flow=1,
            nPorts=1) "Source for water"
            annotation (Placement(transformation(extent={{58,-30},{38,-10}})));
          Modelica.Blocks.Sources.Sine sine(
            amplitude=2.5,
            offset=275.15 + 7.5,
            f=1/86400)
            annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
          Buildings.Fluid.Sources.Boundary_pT sinW(redeclare package Medium = Medium,
              nPorts=1) "Sink for water" annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,-20})));
          BuildingControlEmulator.Devices.Fault.FloSensorDev floSensorDev(
            redeclare package Medium = Medium,
            FauTime=14300,
            dm=0.1)
            annotation (Placement(transformation(extent={{0,-30},{-20,-10}})));
        equation
          connect(sine.y, souW.T_in) annotation (Line(
              points={{61,-50},{80,-50},{80,-16},{60,-16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(floSensorDev.port_a, souW.ports[1]) annotation (Line(
              points={{0,-20},{20,-20},{38,-20}},
              color={0,127,255},
              thickness=1));
          connect(floSensorDev.port_b, sinW.ports[1]) annotation (Line(
              points={{-20,-20},{-64,-20}},
              color={0,127,255},
              thickness=1));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400));
        end FloSensorDev;

        model dPreSemsorDev
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium for water";

          Buildings.Obsolete.Fluid.Sources.FixedBoundary souW(
            redeclare package Medium = Medium,
            T=273.15 + 20,
            p(displayUnit="Pa") = 100000 + 100,
            nPorts=1) "Source for water"
            annotation (Placement(transformation(extent={{-70,-30},{-50,-10}})));
          Buildings.Obsolete.Fluid.Sources.FixedBoundary sinW(
            redeclare package Medium = Medium,
            T=273.15 + 20,
            p(displayUnit="Pa") = 100000,
            nPorts=1) "Source for water"
            annotation (Placement(transformation(extent={{46,-30},{26,-10}})));
          BuildingControlEmulator.Devices.Fault.TwoWayStuck val(
            m_flow_nominal=1,
            dpValve_nominal=100,
            redeclare package Medium = Medium,
            FauTime=86400*0.5,
            y_stuck=0.5)
            annotation (Placement(transformation(extent={{-20,-30},{0,-10}})));
          Modelica.Blocks.Sources.Ramp sine(duration=86400, offset=0)
            annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
          BuildingControlEmulator.Devices.Fault.dPreSensorDev dPreSensorDev(
            redeclare package Medium = Medium,
            dp=0.1,
            FauTime=14300)
            annotation (Placement(transformation(extent={{-14,-60},{6,-40}})));
        equation
          connect(souW.ports[1], val.port_a) annotation (Line(
              points={{-50,-20},{-50,-20},{-20,-20}},
              color={0,127,255},
              thickness=1));
          connect(val.port_b, sinW.ports[1]) annotation (Line(
              points={{0,-20},{26,-20}},
              color={0,127,255},
              thickness=1));
          connect(sine.y, val.y) annotation (Line(
              points={{-39,30},{-10,30},{-10,-8}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(dPreSensorDev.port_a, val.port_a) annotation (Line(points={{-14,-50},
                  {-26,-50},{-26,-20},{-20,-20}}, color={0,127,255}));
          connect(dPreSensorDev.port_b, val.port_b) annotation (Line(points={{6,-50},{
                  12,-50},{12,-30},{0,-30},{0,-20}}, color={0,127,255}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400));
        end dPreSemsorDev;

        class PIController
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
           extends Modelica.Icons.Example;
          package MediumCHW = Buildings.Media.Water "Medium for chilled water";
          package MediumCW = Buildings.Media.Water "Medium for condenser water";
          parameter Modelica.Units.SI.Pressure dPCHW_nominal=1000
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.Pressure dPCW_nominal=1000
            "Pressure difference at the condenser water wide";

          parameter Modelica.Units.SI.Temperature TCW_start=273.15 + 27
            "The start temperature of condenser water side";
          parameter Modelica.Units.SI.Temperature TCHW_start=273.15 + 5
            "The start temperature of chilled water side";

          BuildingControlEmulator.Devices.WaterSide.Chiller                 chi(
            per=per,
            redeclare package MediumCHW = MediumCHW,
            redeclare package MediumCW = MediumCW,
            redeclare BuildingControlEmulator.Devices.Fault.conPI conPI(
              k=0.1,
              fauFac=0.01,
              Ti=60),
            dPCHW_nominal=dPCHW_nominal,
            dPCW_nominal=dPCW_nominal,
            mCHW_flow_nominal=per.mEva_flow_nominal,
            mCW_flow_nominal=per.mCon_flow_nominal,
            TCW_start=TCW_start,
            TCHW_start=TCHW_start)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-2,4})));
           parameter Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_23XL_724kW_6_04COP_Vanes
                                                                       per
            "Performance data"
            annotation (choicesAllMatching = true,
                        Placement(transformation(extent={{40,66},{60,86}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCHW(
            nPorts=1,
            redeclare package Medium = MediumCHW,
            m_flow=per.mEva_flow_nominal,
            T=273.15 + 20,
            use_T_in=true) "Source for CHW"
            annotation (Placement(transformation(extent={{58,-30},{38,-10}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            nPorts=1,
            redeclare package Medium = MediumCW,
            use_T_in=false,
            T=273.15 + 21.11,
            m_flow=per.mCon_flow_nominal) "Source for CHW"
            annotation (Placement(transformation(extent={{-80,18},{-60,38}})));
          Buildings.Fluid.Sources.Boundary_pT sinCHW(redeclare package Medium =
                MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,-20})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(nPorts=1, redeclare package
              Medium =
                MediumCW) "Sink for CW" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={48,28})));
          Modelica.Blocks.Sources.Constant       On(k=1)
            annotation (Placement(transformation(extent={{-80,46},{-60,66}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLea(
            allowFlowReversal=true,
            redeclare package Medium = MediumCHW,
            m_flow_nominal=per.mEva_flow_nominal) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-40,-20})));
          Modelica.Blocks.Sources.RealExpression TCHWSet(y=273.15 + 5.56)
            annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Modelica.Blocks.Sources.Sine sine(
            amplitude=1.5,
            offset=275.15 + 5.56,
            f=1/86400)
            annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
        equation
          connect(sinCHW.ports[1], senTCHWLea.port_b) annotation (Line(
              points={{-64,-20},{-64,-20},{-50,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CHW, senTCHWLea.port_a) annotation (Line(
              points={{-10,-6},{-10,-20},{-30,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CHW, souCHW.ports[1]) annotation (Line(
              points={{6,-6},{6,-20},{38,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CW, sinCW.ports[1]) annotation (Line(
              points={{6,14},{6,28},{38,28}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CW, souCW.ports[1]) annotation (Line(
              points={{-10,14},{-10,28},{-60,28}},
              color={0,127,255},
              thickness=1));
          connect(On.y, chi.On) annotation (Line(
              points={{-59,56},{-7,56},{-7,16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(TCHWSet.y, chi.TCHWSet) annotation (Line(
              points={{-59,80},{1,80},{1,16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(sine.y, souCHW.T_in) annotation (Line(
              points={{61,-50},{80,-50},{80,-16},{60,-16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (experiment(StopTime=86400, __Dymola_Algorithm="Dassl"));
        end PIController;

        class PIController_norm
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
           extends Modelica.Icons.Example;
          package MediumCHW = Buildings.Media.Water "Medium for chilled water";
          package MediumCW = Buildings.Media.Water "Medium for condenser water";
          parameter Modelica.Units.SI.Pressure dPCHW_nominal=1000
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.Pressure dPCW_nominal=1000
            "Pressure difference at the condenser water wide";

          parameter Modelica.Units.SI.Temperature TCW_start=273.15 + 27
            "The start temperature of condenser water side";
          parameter Modelica.Units.SI.Temperature TCHW_start=273.15 + 5
            "The start temperature of chilled water side";

          BuildingControlEmulator.Devices.WaterSide.Chiller                 chi(
            per=per,
            redeclare package MediumCHW = MediumCHW,
            redeclare package MediumCW = MediumCW,
            dPCHW_nominal=dPCHW_nominal,
            dPCW_nominal=dPCW_nominal,
            mCHW_flow_nominal=per.mEva_flow_nominal,
            mCW_flow_nominal=per.mCon_flow_nominal,
            TCW_start=TCW_start,
            TCHW_start=TCHW_start,
            conPI(k=0.1, Ti=60))
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-4,4})));
           parameter Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_23XL_724kW_6_04COP_Vanes
                                                                       per
            "Performance data"
            annotation (choicesAllMatching = true,
                        Placement(transformation(extent={{40,66},{60,86}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCHW(
            nPorts=1,
            redeclare package Medium = MediumCHW,
            m_flow=per.mEva_flow_nominal,
            T=273.15 + 20,
            use_T_in=true) "Source for CHW"
            annotation (Placement(transformation(extent={{58,-30},{38,-10}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            nPorts=1,
            redeclare package Medium = MediumCW,
            use_T_in=false,
            T=273.15 + 21.11,
            m_flow=per.mCon_flow_nominal) "Source for CHW"
            annotation (Placement(transformation(extent={{-80,18},{-60,38}})));
          Buildings.Fluid.Sources.Boundary_pT sinCHW(redeclare package Medium =
                MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,-20})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(nPorts=1, redeclare package
              Medium =
                MediumCW) "Sink for CW" annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={48,28})));
          Modelica.Blocks.Sources.Constant       On(k=1)
            annotation (Placement(transformation(extent={{-80,46},{-60,66}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLea(
            allowFlowReversal=true,
            redeclare package Medium = MediumCHW,
            m_flow_nominal=per.mEva_flow_nominal) annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-40,-20})));
          Modelica.Blocks.Sources.RealExpression TCHWSet(y=273.15 + 5.56)
            annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Modelica.Blocks.Sources.Sine sine(
            amplitude=1.5,
            offset=275.15 + 5.56,
            f=1/86400)
            annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
        equation
          connect(sinCHW.ports[1], senTCHWLea.port_b) annotation (Line(
              points={{-64,-20},{-64,-20},{-50,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CHW, senTCHWLea.port_a) annotation (Line(
              points={{-12,-6},{-12,-20},{-30,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CHW, souCHW.ports[1]) annotation (Line(
              points={{4,-6},{4,-20},{38,-20}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_b_CW, sinCW.ports[1]) annotation (Line(
              points={{4,14},{4,28},{38,28}},
              color={0,127,255},
              thickness=1));
          connect(chi.port_a_CW, souCW.ports[1]) annotation (Line(
              points={{-12,14},{-12,28},{-60,28}},
              color={0,127,255},
              thickness=1));
          connect(On.y, chi.On) annotation (Line(
              points={{-59,56},{-9,56},{-9,16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(TCHWSet.y, chi.TCHWSet) annotation (Line(
              points={{-59,80},{-1,80},{-1,16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(sine.y, souCHW.T_in) annotation (Line(
              points={{61,-50},{80,-50},{80,-16},{60,-16}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (experiment(StopTime=86400, __Dymola_Algorithm="Dassl"));
        end PIController_norm;
      end Examples;
    end Fault;
  end Devices;

  package Subsystems

    package AirHanUnit

      package BaseClasses

        model DuaFanAirHanUnit

          replaceable package MediumAir =
              Modelica.Media.Interfaces.PartialMedium "Medium for the air";
          replaceable package MediumWat =
              Modelica.Media.Interfaces.PartialMedium "Medium for the water";
          parameter Real UA "Rated heat exchange coefficients";
          parameter Modelica.Units.SI.MassFlowRate mAirFloRat "mass flow rate for air";
          parameter Modelica.Units.SI.MassFlowRate mWatFloRat
            "mass flow rate for water";
          parameter Modelica.Units.SI.Pressure PreDroCoiAir
            "Pressure drop in the air side";
          parameter Modelica.Units.SI.Pressure PreDroMixingBoxAir
            "Pressure drop in the air side";
          parameter Modelica.Units.SI.Pressure PreDroWat
            "Pressure drop in the water side";
          parameter Real Coi_k(min=0, unit="1") = 1 "Gain of controller";
          parameter Modelica.Units.SI.Time Coi_Ti(min=Modelica.Constants.small) = 0.5
            "Time constant of Integrator block";
          parameter Modelica.Units.SI.Efficiency eps(max=1) = 1
            "Heat exchanger effectiveness";

          parameter Modelica.Units.SI.MassFlowRate mFreAirFloRat
            "mass flow rate for fresh air";
          parameter Modelica.Units.SI.Temperature TemEcoHig
            "the highest temeprature when the economizer is on";
          parameter Modelica.Units.SI.Temperature TemEcoLow
            "the lowest temeprature when the economizer is on";
          parameter Real MixingBoxDamMin "the minimum damper postion";
          parameter Real MixingBox_k(min=0, unit="1") = 1 "Gain of controller";
          parameter Modelica.Units.SI.Time MixingBox_Ti(min=Modelica.Constants.small)=
               0.5 "Time constant of Integrator block";

          parameter Real Fan_k(min=0, unit="1") = 1 "Gain of controller";
          parameter Modelica.Units.SI.Time Fan_Ti(min=Modelica.Constants.small) = 0.5
            "Time constant of Integrator block";
          parameter Modelica.Units.SI.Time waitTime(min=0) = 0
            "Wait time before transition fires";
          parameter Real Fan_SpeRat
              "Speed ratio";
          parameter Integer numTemp(min=1) = 1
              "The size of the temeprature vector";
          parameter Real HydEff[:] "Hydraulic efficiency";
          parameter Real MotEff[:] "Motor efficiency";
          parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]
            "Volume flow rate curve";
          parameter Modelica.Units.SI.Pressure SupPreCur[:] "Supply Fan Pressure curve";
          parameter Modelica.Units.SI.Pressure RetPreCur[:] "Return Fan Pressure curve";

          Devices.FlowMover.BaseClasses.WithoutMotor retFan(redeclare package
              Medium = MediumAir,
            HydEff=HydEff,
            MotEff=MotEff,
            VolFloCur=VolFloCur,
            TimCon=1,
            PreCur=RetPreCur)                               annotation (Placement(transformation(extent={{-10,-90},{-30,-70}})));

          Devices.FlowMover.VAVSupplyFan supFan(redeclare package Medium = MediumAir,
            TimCon=1,
            k=Fan_k,
            Ti=Fan_Ti,
            waitTime=waitTime,
            SpeRat=Fan_SpeRat,
            numTemp=numTemp,
            HydEff=HydEff,
            MotEff=MotEff,
            VolFloCur=VolFloCur,
            PreCur=SupPreCur)                   annotation (Placement(transformation(extent={{18,-10},
                    {38,10}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_b_Air(redeclare package
              Medium = MediumAir)
            "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{90,-10},{110,10}})));
          Devices.AirSide.Coil.CooCoil
                               cooCoil(redeclare package MediumAir = MediumAir, redeclare
              package MediumWat = MediumWat,
            mAirFloRat=mAirFloRat,
            mWatFloRat=mWatFloRat,
            PreDroAir=PreDroCoiAir,
            PreDroWat=PreDroWat,
            k=Coi_k,
            Ti=Coi_Ti,
            UA=UA*1.2*eps)
            annotation (Placement(transformation(extent={{-2,-2},{-20,18}})));
          Devices.AirSide.MixingBox.MixingBox
                                      mixingBox(mTotAirFloRat=mAirFloRat, redeclare
              package Medium = MediumAir,
            PreDro=PreDroMixingBoxAir,
            mFreAirFloRat=mFreAirFloRat,
            TemHig=TemEcoHig,
            TemLow=TemEcoLow,
            DamMin=MixingBoxDamMin,
            k=MixingBox_k,
            Ti=MixingBox_Ti)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-60,0})));
          Modelica.Fluid.Interfaces.FluidPort_a port_a_Wat(redeclare package
              Medium =  MediumWat)
            "Fluid connector a (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{10,90},{30,110}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_b_Wat(redeclare package
              Medium = MediumWat)
            "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{-50,90},{-30,110}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_Exh_Air(redeclare package
              Medium =  MediumAir)
            "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{-112,-10},{-92,10}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_Fre_Air(redeclare package
              Medium = MediumAir)
            "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_a_Air(redeclare package
              Medium =  MediumAir)
            "Fluid connector a (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{90,-90},{110,-70}})));
          Modelica.Blocks.Interfaces.BooleanInput On
            annotation (Placement(transformation(extent={{-120,-110},{-100,-90}})));
          Modelica.Blocks.Interfaces.RealInput DisTemPSetPoi "Connector of setpoint input signal" annotation (Placement(transformation(extent={{-120,
                    -30},{-100,-10}})));
          Modelica.Blocks.Interfaces.RealInput PreSetPoi
            "Connector of setpoint input signal"                                              annotation (Placement(transformation(extent={{-120,-70},{-100,-50}})));
          Modelica.Blocks.Interfaces.RealInput PreMea "Connector of measurement input signal" annotation (Placement(transformation(extent={{-120,84},
                    {-100,104}})));
          Modelica.Blocks.Interfaces.RealInput CooTempSetPoi[numTemp]
            "Connector of setpoint input signal"
            annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
          Modelica.Blocks.Interfaces.RealInput ZonTemp[numTemp] "Connector of setpoint input signal" annotation (Placement(transformation(extent={{-120,
                    -50},{-100,-30}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTemDisAir(redeclare
              package Medium =
                MediumAir, m_flow_nominal=mAirFloRat)
            annotation (Placement(transformation(extent={{72,-10},{92,10}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=100000)
            annotation (Placement(transformation(extent={{40,66},{60,86}})));
          Modelica.Blocks.Math.Add add(k2=-1)
            annotation (Placement(transformation(extent={{50,40},{30,60}})));
          Modelica.Blocks.Interfaces.RealInput HeaTempSetPoi[numTemp]
            "Connector of setpoint input signal"
            annotation (Placement(transformation(extent={{-120,70},{-100,90}})));
          Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
            annotation (Placement(transformation(extent={{-34,-58},{-14,-38}})));
          Modelica.Blocks.Interfaces.RealInput TOut "outdoor air temperature"
            annotation (Placement(transformation(extent={{-120,-90},{-100,-70}})));
          Modelica.Blocks.Interfaces.RealOutput TSupAir(
            final unit="K",
            final displayUnit="degC",
            final quantity="ThermodynamicTemperature")
            "AHU supply air temperature"
            annotation (Placement(transformation(extent={{100,30},{120,50}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTemMixAir(redeclare
              package Medium =
                       MediumAir, m_flow_nominal=mAirFloRat)
            annotation (Placement(transformation(extent={{-44,-10},{-24,10}})));
          Modelica.Blocks.Interfaces.RealOutput TMixAir(
            final unit="K",
            final displayUnit="degC",
            final quantity="ThermodynamicTemperature") "Mixing air temperature"
            annotation (Placement(transformation(extent={{100,18},{120,38}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTemDisAir1(redeclare
              package Medium =
                       MediumAir, m_flow_nominal=mAirFloRat)
            annotation (Placement(transformation(extent={{72,-90},{92,-70}})));
          Modelica.Blocks.Interfaces.RealOutput TRetAir "AHU return air temperature"
            annotation (Placement(transformation(extent={{100,-64},{120,-44}})));
          Buildings.Fluid.Sensors.VolumeFlowRate senVolFloSupAir(
            redeclare package Medium = MediumAir,
            m_flow_nominal=mAirFloRat,
            tau=1) annotation (Placement(transformation(extent={{44,-10},{64,10}})));
          Modelica.Blocks.Interfaces.RealOutput V_flowSupAir(
            final min=0,
            final unit = "m3/s",
            final quantity = "VolumeFlowRate") "Supply air volume flow rate"
            annotation (Placement(transformation(extent={{100,6},{120,26}})));
          Buildings.Fluid.Sensors.VolumeFlowRate senVolFloSupAir1(
            redeclare package Medium = MediumAir,
            m_flow_nominal=mAirFloRat,
            tau=1) annotation (Placement(transformation(extent={{34,-90},{54,-70}})));
          Modelica.Blocks.Interfaces.RealOutput V_flowRetAir
            "Return air volume flow rate "
            annotation (Placement(transformation(extent={{100,-76},{120,-56}})));
          Modelica.Blocks.Sources.RealExpression yDamOutAirMea(y=mixingBox.mixBox.valFre.y)
            annotation (Placement(transformation(extent={{40,84},{60,104}})));
          Modelica.Blocks.Interfaces.RealOutput yDamOutAir(
            final min=0,
            final max=1,
            final unit="1")
            "AHU OA damper position measurement"
            annotation (Placement(transformation(extent={{100,84},{120,104}})));
          Modelica.Blocks.Sources.RealExpression PFanTot(y=supFan.P + retFan.P)
            annotation (Placement(transformation(extent={{-34,-42},{-14,-22}})));
          Modelica.Blocks.Interfaces.RealOutput PFan "Total fan power"
            annotation (Placement(transformation(extent={{100,-38},{120,-18}})));
          Modelica.Blocks.Interfaces.RealOutput TSupCHW(
            final unit="K",
            final displayUnit="degC",
            final quantity="ThermodynamicTemperature")
            "AHU supply chilled water temperature"
            annotation (Placement(transformation(extent={{100,70},{120,90}})));
          Modelica.Blocks.Interfaces.RealOutput TRetCHW(
            final unit="K",
            final displayUnit="degC",
            final quantity="ThermodynamicTemperature")
            "AHU return chilled water temperature"
            annotation (Placement(transformation(extent={{100,-24},{120,-4}})));
          Modelica.Blocks.Sources.RealExpression TSupCHWMea(y=cooCoil.coi.temEntWat.T)
            annotation (Placement(transformation(extent={{72,70},{92,90}})));
          Modelica.Blocks.Sources.RealExpression TRetCHWMea(y=cooCoil.coi.temLeaWat.T)
            annotation (Placement(transformation(extent={{72,-24},{92,-4}})));
          Modelica.Blocks.Sources.RealExpression yCooValMea(y=cooCoil.val.y)
            annotation (Placement(transformation(extent={{70,-50},{90,-30}})));
          Modelica.Blocks.Interfaces.RealOutput yCooVal
            "AHU cooling coil valve position measurement" annotation (Placement(
                transformation(extent={{100,-50},{120,-30}})));
          Buildings.Fluid.Sensors.VolumeFlowRate senVolFloOutAir(
            redeclare package Medium = MediumAir,
            m_flow_nominal=mAirFloRat,
            tau=1) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-80,30})));
          Modelica.Blocks.Interfaces.RealOutput V_flowOutAir(
            final min=0,
            final unit="m3/s",
            final quantity="VolumeFlowRate") "Outdoor air volume flow rate"
            annotation (Placement(transformation(extent={{100,50},{120,70}})));
          Buildings.Utilities.IO.SignalExchange.Overwrite oveSpeRetFan(
              description="AHU return fan speed control signal", u(
              min=0,
              max=1,
              unit="1"))
            annotation (Placement(transformation(extent={{48,-56},{64,-40}})));
        equation
          connect(cooCoil.port_b_Air, supFan.port_a) annotation (Line(
              points={{-1.82,0},{18,0}},
              color={0,140,72},
              thickness=0.5));
          connect(mixingBox.SetPoi, DisTemPSetPoi) annotation (Line(
              points={{-60,-12},{-60,-20},{-110,-20}},
              color={0,0,127}));
          connect(cooCoil.SetPoi, DisTemPSetPoi) annotation (Line(
              points={{-0.2,6},{6,6},{6,-20},{-110,-20}},
              color={0,0,127}));
          connect(supFan.Temp, ZonTemp) annotation (Line(
              points={{16,-6},{16,-40},{-110,-40}},
              color={0,0,127}));
          connect(supFan.PreSetPoi, PreSetPoi) annotation (Line(
              points={{16,2},{12,2},{12,-60},{-110,-60}},
              color={0,0,127}));
          connect(port_Exh_Air, mixingBox.port_Exh) annotation (Line(
              points={{-102,0},{-82,0},{-82,-6},{-70,-6}},
              color={0,140,72},
              thickness=0.5));
          connect(mixingBox.port_Ret, retFan.port_b) annotation (Line(
              points={{-50,-5.8},{-42,-5.8},{-42,-80},{-30,-80}},
              color={0,140,72},
              thickness=0.5));
          connect(port_b_Air, senTemDisAir.port_b) annotation (Line(
              points={{100,0},{92,0}},
              color={0,127,255},
              thickness=1));
          connect(PreMea, add.u1) annotation (Line(
              points={{-110,94},{-20,94},{-20,68},{68,68},{68,56},{52,56}},
              color={0,0,127}));
          connect(realExpression.y, add.u2) annotation (Line(
              points={{61,76},{80,76},{80,44},{52,44}},
              color={0,0,127}));
          connect(add.y, supFan.PreMea) annotation (Line(
              points={{29,50},{10,50},{10,-10},{16,-10}},
              color={0,0,127}));
          connect(supFan.HeaTempSetPoi, HeaTempSetPoi) annotation (Line(
              points={{16,10},{12,10},{12,80},{-110,80}},
              color={0,0,127}));
          connect(supFan.CooTempSetPoi, CooTempSetPoi) annotation (Line(
              points={{16,-2},{-46,-2},{-46,40},{-110,40}},
              color={0,0,127}));
          connect(booleanExpression.y, cooCoil.On) annotation (Line(points={{-13,-48},{
                  8,-48},{8,12},{-0.2,12}}, color={255,0,255}));
          connect(mixingBox.Tout, TOut) annotation (Line(
              points={{-54,-12},{-54,-80},{-110,-80}},
              color={0,0,127}));
          connect(On, mixingBox.On) annotation (Line(points={{-110,-100},{-68,-100},{
                  -68,-12}}, color={255,0,255}));
          connect(On, supFan.On) annotation (Line(points={{-110,-100},{4,-100},{4,6},{16,
                  6}},     color={255,0,255}));
          connect(senTemDisAir.T, TSupAir)
            annotation (Line(points={{82,11},{82,40},{110,40}}, color={0,0,127}));
          connect(senTemMixAir.port_b, cooCoil.port_a_Air) annotation (Line(
              points={{-24,0},{-20,0}},
              color={0,140,72},
              thickness=0.5));
          connect(mixingBox.port_Sup, senTemMixAir.port_a) annotation (Line(
              points={{-49.8,6},{-48,6},{-48,0},{-44,0}},
              color={0,140,72},
              thickness=0.5));
          connect(senTemMixAir.T, TMixAir)
            annotation (Line(points={{-34,11},{-34,28},{110,28}}, color={0,0,127}));
          connect(senTemDisAir1.T, TRetAir)
            annotation (Line(points={{82,-69},{82,-54},{110,-54}}, color={0,0,127}));
          connect(senVolFloSupAir.port_b, senTemDisAir.port_a)
            annotation (Line(points={{64,0},{72,0}}, color={0,127,255}));
          connect(senVolFloSupAir.port_a, supFan.port_b)
            annotation (Line(points={{44,0},{38,0}}, color={0,127,255}));
          connect(senVolFloSupAir.V_flow, V_flowSupAir) annotation (Line(points={{54,11},
                  {56,11},{56,16},{110,16}}, color={0,0,127}));
          connect(senVolFloSupAir1.port_b, senTemDisAir1.port_a)
            annotation (Line(points={{54,-80},{72,-80}}, color={0,127,255}));
          connect(senTemDisAir1.port_b, port_a_Air)
            annotation (Line(points={{92,-80},{100,-80}}, color={0,127,255}));
          connect(senVolFloSupAir1.port_a, retFan.port_a)
            annotation (Line(points={{34,-80},{-10,-80}}, color={0,127,255}));
          connect(senVolFloSupAir1.V_flow, V_flowRetAir)
            annotation (Line(points={{44,-69},{44,-66},{110,-66}}, color={0,0,127}));
          connect(yDamOutAirMea.y, yDamOutAir)
            annotation (Line(points={{61,94},{110,94}}, color={0,0,127}));
          connect(PFanTot.y, PFan) annotation (Line(points={{-13,-32},{44,-32},
                  {44,-28},{110,-28}},
                              color={0,0,127}));
          connect(cooCoil.port_a_Wat, port_a_Wat) annotation (Line(
              points={{-2,16},{20,16},{20,100}},
              color={0,127,255},
              thickness=1));
          connect(cooCoil.port_b_Wat, port_b_Wat) annotation (Line(
              points={{-20,16},{-40,16},{-40,100}},
              color={0,127,255},
              thickness=1));
          connect(TSupCHWMea.y, TSupCHW)
            annotation (Line(points={{93,80},{110,80}}, color={0,0,127}));
          connect(TRetCHWMea.y, TRetCHW)
            annotation (Line(points={{93,-14},{110,-14}}, color={0,0,127}));
          connect(yCooValMea.y, yCooVal)
            annotation (Line(points={{91,-40},{110,-40}}, color={0,0,127}));
          connect(senVolFloOutAir.port_b, mixingBox.port_Fre) annotation (Line(
                points={{-80,20},{-80,6},{-70,6}}, color={0,127,255}));
          connect(senVolFloOutAir.port_a, port_Fre_Air) annotation (Line(points=
                 {{-80,40},{-80,60},{-100,60}}, color={0,127,255}));
          connect(senVolFloOutAir.V_flow, V_flowOutAir) annotation (Line(points=
                 {{-69,30},{80,30},{80,60},{110,60}}, color={0,0,127}));
          connect(supFan.yRet, oveSpeRetFan.u) annotation (Line(points={{39,
                  -8.2},{42,-8.2},{42,-48},{46.4,-48}}, color={0,0,127}));
          connect(oveSpeRetFan.y, retFan.u) annotation (Line(points={{64.8,-48},
                  {72,-48},{72,-74},{-9,-74}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(points={{-80,-80},{90,-80}}, color={255,170,170},
                  thickness=0.5),
                Line(points={{-80,0},{-80,-80}}, color={255,170,170},
                  thickness=0.5),
                Line(points={{-92,0},{-80,0}}, color={255,170,170},
                  thickness=0.5),
                Line(points={{-90,60},{-60,60}}, color={0,255,255},
                  thickness=0.5),
                Line(points={{-60,60},{-60,0}}, color={0,255,255},
                  thickness=0.5),
                Line(points={{-60,0},{-70,0}}, color={0,255,255},
                  thickness=0.5),
                Line(points={{-80,0},{-70,0}}, color={255,170,170}),
                Line(points={{-40,90},{-40,20}}, color={0,0,255},
                  thickness=1),
                Rectangle(
                  extent={{-30,28},{12,-10}},
                  lineColor={0,255,255},
                  lineThickness=0.5,
                  fillColor={170,255,255},
                  fillPattern=FillPattern.Solid),
                Line(points={{20,90},{20,20}}, color={0,0,255},
                  thickness=1),
                Rectangle(extent={{-100,100},{100,-100}}, pattern=LinePattern.None),
                Line(points={{20,20},{-40,20}}, color={0,0,255},
                  thickness=1),
                Line(points={{-60,0},{100,0}}, color={0,255,255},
                  thickness=0.5),
                Text(
                  extent={{-156,-148},{144,-108}},
                  textString="%name",
                  textColor={0,0,255})}),                                Diagram(
                coordinateSystem(preserveAspectRatio=false), graphics={
                Text(
                  extent={{-146,300},{154,340}},
                  textString="%name",
                  textColor={0,0,255})}));
        end DuaFanAirHanUnit;

        model DuaFanAirHanUnitDX

          replaceable package MediumAir =
              Modelica.Media.Interfaces.PartialMedium                             "Medium for the air";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat "mass flow rate for air";
          parameter Modelica.Units.SI.Pressure PreDroCoiAir
            "Pressure drop in the air side";
          parameter Modelica.Units.SI.Pressure PreDroMixingBoxAir
            "Pressure drop in the air side";

          parameter Modelica.Units.SI.MassFlowRate mFreAirFloRat
            "mass flow rate for fresh air";
          parameter Modelica.Units.SI.Temperature TemEcoHig
            "the highest temeprature when the economizer is on";
          parameter Modelica.Units.SI.Temperature TemEcoLow
            "the lowest temeprature when the economizer is on";
          parameter Real MixingBoxDamMin "the minimum damper postion";
          parameter Real MixingBox_k(min=0, unit="1") = 1 "Gain of controller";
          parameter Modelica.Units.SI.Time MixingBox_Ti(min=Modelica.Constants.small)=
               0.5 "Time constant of Integrator block";

          parameter Real Fan_k(min=0, unit="1") = 1 "Gain of controller";
          parameter Modelica.Units.SI.Time Fan_Ti(min=Modelica.Constants.small) = 0.5
            "Time constant of Integrator block";
          parameter Modelica.Units.SI.Time waitTime(min=0) = 0
            "Wait time before transition fires";
          parameter Real Fan_SpeRat
              "Speed ratio";
          parameter Integer numTemp(min=1) = 1
              "The size of the temeprature vector";
          parameter Real HydEff[:] "Hydraulic efficiency";
          parameter Real MotEff[:] "Motor efficiency";
          parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]
            "Volume flow rate curve";
          parameter Modelica.Units.SI.Pressure SupPreCur[:] "Supply Fan Pressure curve";
          parameter Modelica.Units.SI.Pressure RetPreCur[:] "Return Fan Pressure curve";
          parameter Modelica.Units.SI.Time minOffTim(min=0) = 0 "Minimum off time";
          parameter Modelica.Units.SI.Time minOnTim(min=0) = 0 "Minimum on time";
          parameter Real dT
              "Temperature control deadband";

          Devices.FlowMover.BaseClasses.WithoutMotor retFan(redeclare package
              Medium =                                                                 MediumAir,
            HydEff=HydEff,
            MotEff=MotEff,
            VolFloCur=VolFloCur,
            TimCon=60,
            PreCur=RetPreCur)                               annotation (Placement(transformation(extent={{-10,-90},{-30,-70}})));

          Devices.FlowMover.VAVSupplyFan supFan(redeclare package Medium = MediumAir,
            TimCon=60,
            k=Fan_k,
            Ti=Fan_Ti,
            waitTime=waitTime,
            SpeRat=Fan_SpeRat,
            numTemp=numTemp,
            HydEff=HydEff,
            MotEff=MotEff,
            VolFloCur=VolFloCur,
            PreCur=SupPreCur)                   annotation (Placement(transformation(extent={{28,-10},{48,10}})));
          Modelica.Fluid.Interfaces.FluidPort_b port_b_Air(redeclare package
              Medium =                                                                MediumAir)
            "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{90,-10},{110,10}})));
          Devices.AirSide.Coil.DxCoil
                               dxCoil( redeclare package MediumAir = MediumAir,
            mAirFloRat=mAirFloRat,
            PreDroAir=PreDroCoiAir,
            minOffTim=minOffTim,
            minOnTim=minOnTim,
            dT=dT,
            datCoi=datCoi)
            annotation (Placement(transformation(extent={{-2,-2},{-20,18}})));
          Devices.AirSide.MixingBox.MixingBox
                                      mixingBox(mTotAirFloRat=mAirFloRat, redeclare
              package Medium =                                                                       MediumAir,
            PreDro=PreDroMixingBoxAir,
            mFreAirFloRat=mFreAirFloRat,
            TemHig=TemEcoHig,
            TemLow=TemEcoLow,
            DamMin=MixingBoxDamMin,
            k=MixingBox_k,
            Ti=MixingBox_Ti)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-60,0})));
          Modelica.Fluid.Interfaces.FluidPort_b port_Exh_Air(redeclare package
              Medium =                                                                  MediumAir)
            "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{-112,-10},{-92,10}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_Fre_Air(redeclare package
              Medium =                                                                  MediumAir)
            "Fluid connector b (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
          Modelica.Fluid.Interfaces.FluidPort_a port_a_Air(redeclare package
              Medium =                                                                MediumAir)
            "Fluid connector a (positive design flow direction is from port_a to port_b)"
            annotation (Placement(transformation(extent={{90,-90},{110,-70}})));
          Modelica.Blocks.Interfaces.BooleanInput On
            annotation (Placement(transformation(extent={{-120,-110},{-100,-90}})));
          Modelica.Blocks.Interfaces.RealInput DisTemPSetPoi "Connector of setpoint input signal" annotation (Placement(transformation(extent={{-120,
                    -30},{-100,-10}})));
          Modelica.Blocks.Interfaces.RealInput PreSetPoi
            "Connector of setpoint input signal"                                              annotation (Placement(transformation(extent={{-120,-70},{-100,-50}})));
          Modelica.Blocks.Interfaces.RealInput PreMea
            "Connector of measurement input signal"                                           annotation (Placement(transformation(extent={{120,50},{100,70}})));
          Modelica.Blocks.Interfaces.RealInput CooTempSetPoi[numTemp]
            "Connector of setpoint input signal"
            annotation (Placement(transformation(extent={{-120,30},{-100,50}})));
          Modelica.Blocks.Interfaces.RealInput ZonTemp[numTemp] "Connector of setpoint input signal" annotation (Placement(transformation(extent={{120,-70},{100,-50}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTemDisAir(redeclare
              package Medium =
                MediumAir, m_flow_nominal=mAirFloRat)
            annotation (Placement(transformation(extent={{72,-10},{92,10}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=100000)
            annotation (Placement(transformation(extent={{42,66},{62,86}})));
          Modelica.Blocks.Math.Add add(k2=-1)
            annotation (Placement(transformation(extent={{60,40},{40,60}})));
          Modelica.Blocks.Interfaces.RealInput HeaTempSetPoi[numTemp]
            "Connector of setpoint input signal"
            annotation (Placement(transformation(extent={{-120,70},{-100,90}})));
          replaceable parameter
            Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.DXCoil datCoi
            constrainedby
            Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.DXCoil
            "Performance data"
            annotation (Placement(transformation(extent={{-38,64},{-26,76}})));
          Modelica.Blocks.Interfaces.RealInput TOut
            "Connector of measurement input signal"
            annotation (Placement(transformation(extent={{120,-42},{100,-22}})));
        equation
          connect(dxCoil.port_a_Air, mixingBox.port_Sup) annotation (Line(
              points={{-20,0},{-49.8,0},{-49.8,6}},
              color={0,127,255},
              thickness=1));
          connect(dxCoil.port_b_Air, supFan.port_a) annotation (Line(
              points={{-1.82,0},{28,0}},
              color={0,127,255},
              thickness=1));
          connect(mixingBox.port_Fre, port_Fre_Air) annotation (Line(
              points={{-70,6},{-70,60},{-100,60}},
              color={0,127,255},
              thickness=1));
          connect(retFan.port_a, port_a_Air) annotation (Line(
              points={{-10,-80},{46,-80},{100,-80}},
              color={0,127,255},
              thickness=1));
          connect(mixingBox.On, On) annotation (Line(points={{-68,-12},{-68,-12},{-68,-100},{-110,-100}},
                               color={255,0,255},
              pattern=LinePattern.Dash));
          connect(dxCoil.On, On) annotation (Line(
              points={{-0.2,16},{10,16},{10,-32},{-80,-32},{-80,-100},{-110,-100}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(supFan.On, On) annotation (Line(
              points={{26,6},{10,6},{10,-32},{-80,-32},{-80,-100},{-110,-100}},
              color={255,0,255},
              pattern=LinePattern.Dash));
          connect(supFan.yRet, retFan.u) annotation (Line(
              points={{49,-8.2},{60,-8.2},{60,-74},{-9,-74}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(mixingBox.SetPoi, DisTemPSetPoi) annotation (Line(
              points={{-60,-12},{-60,-20},{-110,-20}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(dxCoil.SetPoi, DisTemPSetPoi) annotation (Line(
              points={{-0.2,12},{6,12},{6,-20},{-110,-20}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(supFan.Temp, ZonTemp) annotation (Line(
              points={{26,-6},{16,-6},{16,-60},{110,-60}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(supFan.PreSetPoi, PreSetPoi) annotation (Line(
              points={{26,2},{12,2},{12,-60},{-110,-60}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(port_Exh_Air, mixingBox.port_Exh) annotation (Line(
              points={{-102,0},{-80,0},{-80,-6},{-70,-6}},
              color={0,127,255},
              thickness=1));
          connect(mixingBox.port_Ret, retFan.port_b) annotation (Line(
              points={{-50,-5.8},{-40,-5.8},{-40,-80},{-30,-80}},
              color={0,127,255},
              thickness=1));
          connect(port_b_Air, senTemDisAir.port_b) annotation (Line(
              points={{100,0},{92,0}},
              color={0,127,255},
              thickness=1));
          connect(senTemDisAir.port_a, supFan.port_b) annotation (Line(
              points={{72,0},{48,0}},
              color={0,127,255},
              thickness=1));
          connect(PreMea, add.u1) annotation (Line(
              points={{110,60},{86,60},{86,56},{62,56}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(realExpression.y, add.u2) annotation (Line(
              points={{63,76},{80,76},{80,44},{62,44}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(add.y, supFan.PreMea) annotation (Line(
              points={{39,50},{32,50},{32,-30},{20,-30},{20,-10},{26,-10}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(supFan.HeaTempSetPoi, HeaTempSetPoi) annotation (Line(
              points={{26,10},{12,10},{12,80},{-110,80}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(supFan.CooTempSetPoi, CooTempSetPoi) annotation (Line(
              points={{26,-2},{-46,-2},{-46,40},{-110,40}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(dxCoil.Mea, senTemDisAir.T) annotation (Line(
              points={{-0.2,8},{22,8},{22,22},{82,22},{82,11},{82,11}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(dxCoil.TConIn, TOut) annotation (Line(
              points={{-0.2,4},{4,4},{4,-32},{110,-32}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(mixingBox.Tout, TOut) annotation (Line(
              points={{-54,-12},{-54,-68},{42,-68},{42,-32},{110,-32}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(points={{-80,-80},{90,-80}}, color={255,170,170},
                  thickness=0.5),
                Line(points={{-80,0},{-80,-80}}, color={255,170,170},
                  thickness=0.5),
                Line(points={{-92,0},{-80,0}}, color={255,170,170},
                  thickness=0.5),
                Line(points={{-90,60},{-60,60}}, color={0,255,255},
                  thickness=0.5),
                Line(points={{-60,60},{-60,0}}, color={0,255,255},
                  thickness=0.5),
                Line(points={{-60,0},{-70,0}}, color={0,255,255},
                  thickness=0.5),
                Line(points={{-80,0},{-70,0}}, color={255,170,170}),
                Line(points={{-40,90},{-40,20}}, color={0,0,255},
                  thickness=1),
                Rectangle(
                  extent={{-30,28},{12,-10}},
                  lineColor={0,255,255},
                  lineThickness=0.5,
                  fillColor={170,255,255},
                  fillPattern=FillPattern.Solid),
                Line(points={{20,90},{20,20}}, color={0,0,255},
                  thickness=1),
                Rectangle(extent={{-100,100},{100,-100}}, pattern=LinePattern.None),
                Line(points={{20,20},{-40,20}}, color={0,0,255},
                  thickness=1),
                Line(points={{-60,0},{100,0}}, color={0,255,255},
                  thickness=0.5)}),                                      Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end DuaFanAirHanUnitDX;

        model OccCon "Occupied Controller"

          parameter Real start_time;
          parameter Real end_time;

          Modelica.Blocks.Sources.BooleanExpression
                                                 booleanExpression(y=(mod(time,86400) > start_time*3600) and (mod(time,86400) < end_time*3600))
            annotation (Placement(transformation(extent={{-12,-10},{8,10}})));
          Modelica.Blocks.Interfaces.BooleanOutput Occ annotation (Placement(transformation(extent={{100,-20},{140,20}})));
        equation
          connect(booleanExpression.y, Occ) annotation (Line(points={{9,0},{120,0}}, color={255,0,255}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-42,38},{44,-46}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.None,
                  textString="Occ")}), Diagram(coordinateSystem(preserveAspectRatio=false)));
        end OccCon;

        model SetPoi "SetPoint Controller"
          parameter Integer n=2 "dimenison of the setpoint vector";
          parameter Real setpoint_on[n] "the values of setpoint during 'on' period";
          parameter Real setpoint_off[n] "the values of setpoint during 'off' period";

          Modelica.Blocks.Sources.RealExpression realExpression[n](y=noEvent(if Occ then setpoint_on else setpoint_off))
            annotation (Placement(transformation(extent={{-12,-10},{8,10}})));
          Modelica.Blocks.Interfaces.BooleanInput  Occ
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Interfaces.RealOutput SetPoi[n]
            annotation (Placement(transformation(extent={{100,-20},{140,20}})));
        equation
          connect(realExpression.y, SetPoi) annotation (Line(points={{9,0},{120,0}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-42,38},{44,-46}},
                  lineColor={0,0,0},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.None,
                  textString="SetPo"),
                Text(
                  extent={{-142,122},{158,162}},
                  textString="%name",
                  textColor={0,0,255})}),
                                       Diagram(coordinateSystem(preserveAspectRatio=false)));
        end SetPoi;

        package Examples
              extends Modelica.Icons.ExamplesPackage;
          model DualFanAirHanUnit
            extends Modelica.Icons.Example;
            package MediumAir = Buildings.Media.Air "Medium model";
            package MediumWat = Buildings.Media.Water "Medium model";
            parameter Modelica.Units.SI.MassFlowRate mAirFloRat=18.3*1.2
              "mass flow rate for air";
            parameter Modelica.Units.SI.MassFlowRate mWatFloRat=18.3*1.2*11.1/6.67/4.2
              "mass flow rate for water";
            parameter Modelica.Units.SI.Pressure PreDroCoiAir=50
              "Pressure drop in the air side";
            parameter Modelica.Units.SI.Pressure PreDroMixingBoxAir=100
              "Pressure drop in the air side";
            parameter Modelica.Units.SI.Pressure PreDroWat=79712
              "Pressure drop in the water side";
            parameter Real Coi_k(min=0, unit="1") = 1 "Gain of controller";
            parameter Modelica.Units.SI.Time Coi_Ti(min=Modelica.Constants.small) = 0.5
              "Time constant of Integrator block";

            parameter Modelica.Units.SI.MassFlowRate mFreAirFloRat=18.3*1.2*0.5
              "mass flow rate for fresh air";
            parameter Modelica.Units.SI.Temperature TemEcoHig=273.15 + 15.58
              "the highest temeprature when the economizer is on";
            parameter Modelica.Units.SI.Temperature TemEcoLow=273.15 + 0
              "the lowest temeprature when the economizer is on";
            parameter Real MixingBoxDamMin = 0.3 "the minimum damper postion";
            parameter Real MixingBox_k(min=0, unit="1") = 1 "Gain of controller";
            parameter Modelica.Units.SI.Time MixingBox_Ti(min=Modelica.Constants.small)=
                 0.5 "Time constant of Integrator block";

            parameter Real Fan_k(min=0, unit="1") = 1 "Gain of controller";
            parameter Modelica.Units.SI.Time Fan_Ti(min=Modelica.Constants.small) = 0.5
              "Time constant of Integrator block";
            parameter Modelica.Units.SI.Time waitTime(min=0) = 0
              "Wait time before transition fires";
            parameter Real Fan_SpeRat = 0.9
                "Speed ratio";
            parameter Integer numTemp(min=1) = 1
                "The size of the temeprature vector";
            parameter Real HydEff[:] = {0.93*0.65,0.93*0.7,0.93,0.93*0.6} "Hydraulic efficiency";
            parameter Real MotEff[:] = {0.6045*0.65,0.6045*0.7,0.6045,0.6045*0.6} "Motor efficiency";
            parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]={10,15,20,20*2}*0.1
              "Volume flow rate curve";
            parameter Modelica.Units.SI.Pressure SupPreCur[:]={900,700,500,500*0.5}
              "Pressure curve";
            parameter Modelica.Units.SI.Pressure RetPreCur[:]={200,150,100,50}
              "Pressure curve";
            DuaFanAirHanUnit duaFanAirHanUnit(redeclare package MediumAir = MediumAir, redeclare
                package MediumWat =                                                                                  MediumWat,
              mAirFloRat=mAirFloRat,
              mWatFloRat=mWatFloRat,
              PreDroCoiAir=PreDroCoiAir,
              PreDroMixingBoxAir=PreDroMixingBoxAir,
              PreDroWat=PreDroWat,
              mFreAirFloRat=mFreAirFloRat,
              TemEcoHig=TemEcoHig,
              TemEcoLow=TemEcoLow,
              MixingBoxDamMin=MixingBoxDamMin,
              Fan_SpeRat=Fan_SpeRat,
              HydEff=HydEff,
              MotEff=MotEff,
              VolFloCur=VolFloCur,
              SupPreCur=SupPreCur,
              RetPreCur=RetPreCur,
              Coi_k=1,
              Coi_Ti=60,
              MixingBox_Ti=60,
              Fan_Ti=60,
              UA=-mAirFloRat*(1000*17)/Buildings.Fluid.HeatExchangers.BaseClasses.lmtd(
                  273.15 + 6,
                  273.15 + 12,
                  273.15 + 30,
                  273.15 + 12.88))            annotation (Placement(transformation(extent={{-14,26},{14,50}})));
            Buildings.Fluid.Sources.Boundary_pT souWat(
              nPorts=1,
              redeclare package Medium = MediumWat,
              p(displayUnit="Pa") = 100000 + PreDroWat,
              T=279.15)
              annotation (Placement(transformation(extent={{36,78},{16,98}})));
            Buildings.Fluid.Sources.Boundary_pT sinWat(
              nPorts=1,
              p(displayUnit="Pa") = 100000,
              redeclare package Medium = MediumWat,
              T=293.15) annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
            Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
              redeclare package Medium = MediumAir,
              m_flow_nominal=mAirFloRat,
              dpValve_nominal=353,
              use_inputFilter=false,
              init=Modelica.Blocks.Types.Init.NoInit)
              annotation (Placement(transformation(extent={{46,-10},{66,10}})));
            Buildings.Fluid.FixedResistances.PressureDrop res(
              dp_nominal=100,
              redeclare package Medium = MediumAir,
              m_flow_nominal=mAirFloRat)         annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={38,20})));
            Buildings.Fluid.MixingVolumes.MixingVolume
                                                   vol(
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              nPorts=2,
              redeclare package Medium = MediumAir,
              m_flow_nominal=mAirFloRat,
              V=10)  annotation (Placement(transformation(extent={{-6,-78},{14,-58}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTem(redeclare package
                Medium =                                                                 MediumAir, m_flow_nominal=mAirFloRat)
              annotation (Placement(transformation(extent={{-54,-90},{-34,-70}})));
            Devices.Control.conPI pI(
              conPID(reverseAction=true),
              Ti=60,
              k=0.01) annotation (Placement(transformation(extent={{-40,-40},{-20,-20}})));
            Modelica.Blocks.Sources.BooleanExpression On(y=true) annotation (Placement(transformation(extent={{-98,22},{-78,42}})));
            Modelica.Blocks.Sources.RealExpression realExpression(y=273.15 + 24)
              annotation (Placement(transformation(extent={{-78,-78},{-58,-58}})));
            Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare
                package Medium =                                                          MediumAir)
              annotation (Placement(transformation(extent={{64,50},{44,70}})));
            Modelica.Blocks.Sources.RealExpression TSupSetPoi(y=273.15 + 12.88)
              annotation (Placement(transformation(extent={{-98,42},{-78,62}})));
            Modelica.Blocks.Sources.RealExpression CoolSetPoi(y=273.15 + 24)
              annotation (Placement(transformation(extent={{-102,-2},{-82,18}})));
            Modelica.Blocks.Sources.RealExpression PreSetPoi(y=353) annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
            Modelica.Blocks.Sources.Ramp ramp(
              duration=12*3600,
              height=mAirFloRat*10*1000,
              offset=0)                    annotation (Placement(transformation(extent={{40,-70},{60,-50}})));
            Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow
              annotation (Placement(transformation(extent={{-34,-64},{-22,-52}})));
            Buildings.Utilities.Psychrometrics.X_pTphi x_pTphi(use_p_in=false)
              annotation (Placement(transformation(extent={{-106,102},{-86,122}})));
            Modelica.Blocks.Sources.RealExpression TOut(y=273.15 + 20) annotation (Placement(transformation(extent={{-138,102},{-118,122}})));
            Modelica.Blocks.Sources.RealExpression RH(y=0.6) annotation (Placement(transformation(extent={{-140,76},{-120,96}})));
            Buildings.Fluid.Sources.Boundary_pT
                                            souAir(
              nPorts=3,
              p(displayUnit="Pa"),
              X={0.02,1 - 0.02},
              use_X_in=true,
              redeclare package Medium = MediumAir,
              use_C_in=false,
              use_T_in=true)
              annotation (Placement(transformation(extent={{-96,68},{-76,88}})));
            Modelica.Blocks.Sources.RealExpression TZ(y=vol.T) annotation (Placement(transformation(extent={{-106,-50},{-86,-30}})));
            Modelica.Blocks.Sources.RealExpression HeaSetPoi(y=273.15 + 20)
              annotation (Placement(transformation(extent={{-102,-30},{-82,-10}})));
          equation
            connect(duaFanAirHanUnit.port_b_Wat, sinWat.ports[1])
              annotation (Line(
                points={{-5.6,50},{-12,50},{-12,90},{-20,90}},
                color={0,127,255},
                thickness=1));
            connect(duaFanAirHanUnit.port_a_Wat, souWat.ports[1])
              annotation (Line(
                points={{2.8,50},{6,50},{10,50},{10,88},{16,88}},
                color={0,127,255},
                thickness=1));
            connect(vol.ports[1], senTem.port_b)
              annotation (Line(
                points={{2,-78},{2,-80},{-34,-80}},
                color={0,127,255},
                thickness=1));
            connect(senTem.port_a, duaFanAirHanUnit.port_a_Air)
              annotation (Line(
                points={{-54,-80},{-80,-80},{-80,0},{14,0},{14,28.4}},
                color={0,127,255},
                thickness=1));
            connect(pI.y, val.y) annotation (Line(
                points={{-19,-30},{-19,-30},{72,-30},{72,20},{56,20},{56,12}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(On.y, duaFanAirHanUnit.On)
              annotation (Line(
                points={{-77,32},{-48,32},{-48,26},{-15.4,26}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(pI.On, duaFanAirHanUnit.On) annotation (Line(
                points={{-42,-24},{-66,-24},{-66,32},{-48,32},{-48,26},{-15.4,26}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(realExpression.y, pI.SetPoi)
              annotation (Line(
                points={{-57,-68},{-50,-68},{-50,-30},{-42,-30}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(duaFanAirHanUnit.port_b_Air, res.port_a)
              annotation (Line(
                points={{14,38},{38,38},{38,30}},
                color={0,127,255},
                thickness=1));
            connect(res.port_b, val.port_a) annotation (Line(
                points={{38,10},{38,0},{46,0}},
                color={0,127,255},
                thickness=1));
            connect(val.port_b, vol.ports[2])
              annotation (Line(
                points={{66,0},{80,0},{80,-78},{6,-78}},
                color={0,127,255},
                thickness=1));
            connect(senRelPre.p_rel, duaFanAirHanUnit.PreMea) annotation (Line(
                points={{54,51},{54,44},{44,44},{44,45.2},{15.4,45.2}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(duaFanAirHanUnit.ZonTemp[1], senTem.T) annotation (Line(
                points={{15.4,30.8},{22,30.8},{22,-46},{-44,-46},{-44,-69}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(duaFanAirHanUnit.DisTemPSetPoi, TSupSetPoi.y)
              annotation (Line(
                points={{-15.4,35.6},{-58,35.6},{-58,52},{-77,52}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(PreSetPoi.y, duaFanAirHanUnit.PreSetPoi) annotation (Line(
                points={{-39,-10},{-30,-10},{-20,-10},{-20,30.8},{-15.4,30.8}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(prescribedHeatFlow.port, vol.heatPort)
              annotation (Line(points={{-22,-58},{-18,-58},{-12,-58},{-12,-68},{-6,-68}}, color={191,0,0}));
            connect(ramp.y, prescribedHeatFlow.Q_flow) annotation (Line(
                points={{61,-60},{68,-60},{70,-60},{70,-42},{-40,-42},{-40,-58},{-34,-58}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(senRelPre.port_a, val.port_a)
              annotation (Line(points={{64,60},{70,60},{70,28},{44,28},{44,4},{38,4},{38,0},{46,0}}, color={0,127,255}));
            connect(TOut.y, x_pTphi.T) annotation (Line(points={{-117,112},{-108,112}}, color={0,0,127}));
            connect(RH.y, x_pTphi.phi) annotation (Line(points={{-119,86},{-112,86},{-112,106},{-108,106}}, color={0,0,127}));
            connect(souAir.ports[1], duaFanAirHanUnit.port_Exh_Air)
              annotation (Line(points={{-76,80.6667},{-46,80.6667},{-46,38},{-14.28,38}}, color={0,127,255}));
            connect(duaFanAirHanUnit.port_Fre_Air, souAir.ports[2])
              annotation (Line(points={{-14,45.2},{-44,45.2},{-44,78},{-76,78}}, color={0,127,255}));
            connect(x_pTphi.X, souAir.X_in)
              annotation (Line(points={{-85,112},{-74,112},{-74,94},{-108,94},{-108,74},{-98,74}}, color={0,0,127}));
            connect(senRelPre.port_b, souAir.ports[3])
              annotation (Line(points={{44,60},{-16,60},{-16,75.3333},{-76,75.3333}}, color={0,127,255}));
            connect(TZ.y, pI.Mea) annotation (Line(
                points={{-85,-40},{-74,-40},{-74,-38},{-42,-38},{-42,-36}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(souAir.T_in, TOut.y) annotation (Line(points={{-98,82},{-117,82},{-117,112}}, color={0,0,127}));
            connect(HeaSetPoi.y, duaFanAirHanUnit.HeaTempSetPoi[1]) annotation (Line(
                points={{-81,-20},{-30,-20},{-30,47.6},{-15.4,47.6}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(CoolSetPoi.y, duaFanAirHanUnit.CooTempSetPoi[1]) annotation (Line(
                points={{-81,8},{-38,8},{-38,42.8},{-15.4,42.8}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(duaFanAirHanUnit.TOut, x_pTphi.T) annotation (Line(
                points={{-15.4,28.4},{-48,28.4},{-48,18},{-112,18},{-112,112},{-108,112}},
                color={0,0,127},
                pattern=LinePattern.Dash));

            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=86400, __Dymola_Algorithm="Cvode"));
          end DualFanAirHanUnit;

          model DualFanAirHanUnitDX
            extends Modelica.Icons.Example;
            package MediumAir = Buildings.Media.Air "Medium model";
            parameter Modelica.Units.SI.MassFlowRate mAirFloRat=1.2*0.944
              "mass flow rate for air";
            parameter Modelica.Units.SI.Pressure PreDroCoiAir=50
              "Pressure drop in the air side";
            parameter Modelica.Units.SI.Pressure PreDroMixingBoxAir=100
              "Pressure drop in the air side";

            parameter Modelica.Units.SI.MassFlowRate mFreAirFloRat=1.2*0.944*0.5
              "mass flow rate for fresh air";
            parameter Modelica.Units.SI.Temperature TemEcoHig=273.15 + 15.58
              "the highest temeprature when the economizer is on";
            parameter Modelica.Units.SI.Temperature TemEcoLow=273.15 + 0
              "the lowest temeprature when the economizer is on";
            parameter Real MixingBoxDamMin = 0.3 "the minimum damper postion";
            parameter Real MixingBox_k(min=0, unit="1") = 1 "Gain of controller";
            parameter Modelica.Units.SI.Time MixingBox_Ti(min=Modelica.Constants.small)=
                 0.5 "Time constant of Integrator block";

            parameter Real Fan_k(min=0, unit="1") = 1 "Gain of controller";
            parameter Modelica.Units.SI.Time Fan_Ti(min=Modelica.Constants.small) = 0.5
              "Time constant of Integrator block";
            parameter Modelica.Units.SI.Time waitTime(min=0) = 0
              "Wait time before transition fires";
            parameter Real Fan_SpeRat = 0.9
                "Speed ratio";
            parameter Integer numTemp(min=1) = 1
                "The size of the temeprature vector";
            parameter Real HydEff[:] = {0.93*0.65,0.93*0.7,0.93,0.93*0.6} "Hydraulic efficiency";
            parameter Real MotEff[:] = {0.6045*0.65,0.6045*0.7,0.6045,0.6045*0.6} "Motor efficiency";
            parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]={10,15,20,20*2}
              "Volume flow rate curve";
            parameter Modelica.Units.SI.Pressure SupPreCur[:]={900,700,500,500*0.5}
              "Pressure curve";
            parameter Modelica.Units.SI.Pressure RetPreCur[:]={200,150,100,50}
              "Pressure curve";
            DuaFanAirHanUnitDX
                             duaFanAirHanUnitDX(
                                              redeclare package MediumAir = MediumAir,
              mAirFloRat=mAirFloRat,
              PreDroCoiAir=PreDroCoiAir,
              PreDroMixingBoxAir=PreDroMixingBoxAir,
              mFreAirFloRat=mFreAirFloRat,
              TemEcoHig=TemEcoHig,
              TemEcoLow=TemEcoLow,
              MixingBoxDamMin=MixingBoxDamMin,
              Fan_SpeRat=Fan_SpeRat,
              HydEff=HydEff,
              MotEff=MotEff,
              VolFloCur=VolFloCur,
              SupPreCur=SupPreCur,
              RetPreCur=RetPreCur,
              MixingBox_Ti=60,
              Fan_Ti=60,
              minOffTim=300,
              minOnTim=0,
              dT=0.5,
              datCoi=datCoi)                  annotation (Placement(transformation(extent={{-14,26},{14,50}})));
            Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val(
              redeclare package Medium = MediumAir,
              m_flow_nominal=mAirFloRat,
              dpValve_nominal=353,
              init=Modelica.Blocks.Types.Init.NoInit)
              annotation (Placement(transformation(extent={{46,-10},{66,10}})));
            Buildings.Fluid.FixedResistances.PressureDrop res(
              dp_nominal=100,
              redeclare package Medium = MediumAir,
              m_flow_nominal=mAirFloRat)         annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=-90,
                  origin={38,20})));
            Buildings.Fluid.MixingVolumes.MixingVolume
                                                   vol(
              nPorts=2,
              redeclare package Medium = MediumAir,
              m_flow_nominal=mAirFloRat,
              V=10)  annotation (Placement(transformation(extent={{-6,-78},{14,-58}})));
            Buildings.Fluid.Sensors.TemperatureTwoPort senTem(redeclare package
                Medium =                                                                 MediumAir, m_flow_nominal=mAirFloRat)
              annotation (Placement(transformation(extent={{-54,-90},{-34,-70}})));
            Devices.Control.conPI pI(
              conPID(reverseAction=true),
              Ti=60,
              k=0.01) annotation (Placement(transformation(extent={{-40,-40},{-20,-20}})));
            Modelica.Blocks.Sources.BooleanExpression On(y=true) annotation (Placement(transformation(extent={{-98,22},{-78,42}})));
            Modelica.Blocks.Sources.RealExpression realExpression(y=273.15 + 24)
              annotation (Placement(transformation(extent={{-78,-78},{-58,-58}})));
            Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare
                package Medium =                                                          MediumAir)
              annotation (Placement(transformation(extent={{64,50},{44,70}})));
            Modelica.Blocks.Sources.RealExpression TSupSetPoi(y=273.15 + 12.88)
              annotation (Placement(transformation(extent={{-98,42},{-78,62}})));
            Modelica.Blocks.Sources.RealExpression CoolSetPoi(y=273.15 + 24)
              annotation (Placement(transformation(extent={{-102,-2},{-82,18}})));
            Modelica.Blocks.Sources.RealExpression PreSetPoi(y=353) annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
            Modelica.Blocks.Sources.Ramp ramp(
              duration=12*3600,
              height=mAirFloRat*10*1000,
              offset=0)                    annotation (Placement(transformation(extent={{40,-70},{60,-50}})));
            Buildings.HeatTransfer.Sources.PrescribedHeatFlow prescribedHeatFlow
              annotation (Placement(transformation(extent={{-34,-64},{-22,-52}})));
            Buildings.Utilities.Psychrometrics.X_pTphi x_pTphi(use_p_in=false)
              annotation (Placement(transformation(extent={{-106,102},{-86,122}})));
            Modelica.Blocks.Sources.RealExpression TOut(y=273.15 + 20) annotation (Placement(transformation(extent={{-138,102},{-118,122}})));
            Modelica.Blocks.Sources.RealExpression RH(y=0.6) annotation (Placement(transformation(extent={{-140,76},{-120,96}})));
            Buildings.Fluid.Sources.Boundary_pT
                                            souAir(
              nPorts=3,
              p(displayUnit="Pa") = 100000,
              X={0.02,1 - 0.02},
              use_X_in=true,
              redeclare package Medium = MediumAir,
              use_C_in=false,
              use_T_in=true)
              annotation (Placement(transformation(extent={{-96,68},{-76,88}})));
            Modelica.Blocks.Sources.RealExpression TZ(y=vol.T) annotation (Placement(transformation(extent={{-106,-50},{-86,-30}})));
            Modelica.Blocks.Sources.RealExpression HeaSetPoi(y=273.15 + 20)
              annotation (Placement(transformation(extent={{-102,-30},{-82,-10}})));
            parameter
              Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.SingleSpeed.Carrier_Comfort_50ES060
              datCoi(sta={Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.BaseClasses.Stage(
                  spe=1800,
                  nomVal=Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.BaseClasses.NominalValues(
                    Q_flow_nominal=-17500.95,
                    COP_nominal=3.9,
                    SHR_nominal=0.78,
                    m_flow_nominal=1.2*0.944),
                  perCur=Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.BaseClasses.PerformanceCurve(
                    capFunT={1.6380187,-0.0747347,0.0029747,0.0015201,-0.0000519,-0.0004509},
                    capFunFF={0.8185792,0.2831771,-0.1017563},
                    EIRFunT={-0.2209648,0.1033303,-0.0030061,-0.0070657,0.0006322,-0.0002496},
                    EIRFunFF={1.0380778,-0.2013868,0.1633090},
                    TConInMin=273.15 + 23.89,
                    TConInMax=273.15 + 51.67,
                    TEvaInMin=273.15 + 13.89,
                    TEvaInMax=273.15 + 22.22,
                    ffMin=0.875,
                    ffMax=1.125))})
              annotation (Placement(transformation(extent={{22,82},{42,102}})));
          equation
            connect(vol.ports[1], senTem.port_b)
              annotation (Line(
                points={{2,-78},{2,-80},{-34,-80}},
                color={0,127,255},
                thickness=1));
            connect(senTem.port_a, duaFanAirHanUnitDX.port_a_Air)
              annotation (Line(
                points={{-54,-80},{-80,-80},{-80,0},{14,0},{14,28.4}},
                color={0,127,255},
                thickness=1));
            connect(pI.y, val.y) annotation (Line(
                points={{-19,-30},{-19,-30},{72,-30},{72,20},{56,20},{56,12}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(On.y, duaFanAirHanUnitDX.On)
              annotation (Line(
                points={{-77,32},{-48,32},{-48,26},{-15.4,26}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(pI.On, duaFanAirHanUnitDX.On)
              annotation (Line(
                points={{-42,-24},{-66,-24},{-66,32},{-48,32},{-48,26},{-15.4,26}},
                color={255,0,255},
                pattern=LinePattern.Dash));
            connect(realExpression.y, pI.SetPoi)
              annotation (Line(
                points={{-57,-68},{-50,-68},{-50,-30},{-42,-30}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(duaFanAirHanUnitDX.port_b_Air, res.port_a) annotation (Line(
                points={{14,38},{38,38},{38,30}},
                color={0,127,255},
                thickness=1));
            connect(res.port_b, val.port_a) annotation (Line(
                points={{38,10},{38,0},{46,0}},
                color={0,127,255},
                thickness=1));
            connect(val.port_b, vol.ports[2])
              annotation (Line(
                points={{66,0},{80,0},{80,-78},{6,-78}},
                color={0,127,255},
                thickness=1));
            connect(senRelPre.p_rel, duaFanAirHanUnitDX.PreMea)
              annotation (Line(
                points={{54,51},{54,44},{44,44},{44,45.2},{15.4,45.2}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(duaFanAirHanUnitDX.ZonTemp[1], senTem.T)
              annotation (Line(
                points={{15.4,30.8},{22,30.8},{22,-46},{-44,-46},{-44,-69}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(duaFanAirHanUnitDX.DisTemPSetPoi, TSupSetPoi.y)
              annotation (Line(
                points={{-15.4,35.6},{-58,35.6},{-58,52},{-77,52}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(PreSetPoi.y, duaFanAirHanUnitDX.PreSetPoi)
              annotation (Line(
                points={{-39,-10},{-30,-10},{-20,-10},{-20,30.8},{-15.4,30.8}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(prescribedHeatFlow.port, vol.heatPort)
              annotation (Line(points={{-22,-58},{-18,-58},{-12,-58},{-12,-68},{-6,-68}}, color={191,0,0}));
            connect(ramp.y, prescribedHeatFlow.Q_flow) annotation (Line(
                points={{61,-60},{68,-60},{70,-60},{70,-42},{-40,-42},{-40,-58},{-34,-58}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(senRelPre.port_a, val.port_a)
              annotation (Line(points={{64,60},{70,60},{70,28},{44,28},{44,4},{38,4},{38,0},{46,0}}, color={0,127,255}));
            connect(TOut.y, x_pTphi.T) annotation (Line(points={{-117,112},{-108,112}}, color={0,0,127}));
            connect(RH.y, x_pTphi.phi) annotation (Line(points={{-119,86},{-112,86},{-112,106},{-108,106}}, color={0,0,127}));
            connect(souAir.ports[1], duaFanAirHanUnitDX.port_Exh_Air)
              annotation (Line(points={{-76,80.6667},{-46,80.6667},{-46,38},{-14.28,38}}, color={0,127,255}));
            connect(duaFanAirHanUnitDX.port_Fre_Air, souAir.ports[2]) annotation (Line(points={{-14,45.2},{-44,45.2},{-44,78},{-76,78}}, color={0,127,255}));
            connect(x_pTphi.X, souAir.X_in)
              annotation (Line(points={{-85,112},{-74,112},{-74,94},{-108,94},{-108,74},{-98,74}}, color={0,0,127}));
            connect(senRelPre.port_b, souAir.ports[3])
              annotation (Line(points={{44,60},{-16,60},{-16,75.3333},{-76,75.3333}}, color={0,127,255}));
            connect(TZ.y, pI.Mea) annotation (Line(
                points={{-85,-40},{-74,-40},{-74,-38},{-42,-38},{-42,-36}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(souAir.T_in, TOut.y) annotation (Line(points={{-98,82},{-117,82},{-117,112}}, color={0,0,127}));
            connect(HeaSetPoi.y, duaFanAirHanUnitDX.HeaTempSetPoi[1])
              annotation (Line(
                points={{-81,-20},{-30,-20},{-30,47.6},{-15.4,47.6}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(CoolSetPoi.y, duaFanAirHanUnitDX.CooTempSetPoi[1])
              annotation (Line(
                points={{-81,8},{-38,8},{-38,42.8},{-15.4,42.8}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(duaFanAirHanUnitDX.TOut, x_pTphi.T)
              annotation (Line(points={{15.4,34.16},{78,34.16},{78,132},{-114,132},{-114,112},{-108,112}}, color={0,0,127}));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=86400, __Dymola_Algorithm="Cvode"));
          end DualFanAirHanUnitDX;

          model OccCon
            extends Modelica.Icons.Example;
            BuildingControlEmulator.Subsystems.AirHanUnit.BaseClasses.OccCon occCon(
                start_time=5, end_time=18)
              annotation (Placement(transformation(extent={{-10,-12},{10,8}})));
            annotation (experiment(
                StartTime=17280000,
                StopTime=17366400,
                __Dymola_Algorithm="Dassl"));
          end OccCon;

          model SetPoi
            extends Modelica.Icons.Example;
            BuildingControlEmulator.Subsystems.AirHanUnit.BaseClasses.OccCon occCon(
                start_time=5, end_time=18) annotation (Placement(transformation(
                    extent={{-40,-10},{-20,10}})));
            BuildingControlEmulator.Subsystems.AirHanUnit.BaseClasses.SetPoi setPoi(
              n=2,
              setpoint_on={1,2},
              setpoint_off={3,4})
              annotation (Placement(transformation(extent={{10,-10},{30,10}})));
          equation
            connect(occCon.Occ, setPoi.Occ)
              annotation (Line(points={{-18,0},{8,0}}, color={255,0,255}));
            annotation (experiment(
                StartTime=17280000,
                StopTime=17366400,
                __Dymola_Algorithm="Dassl"));
          end SetPoi;
        end Examples;
      end BaseClasses;
    end AirHanUnit;

    package HydDisturbution
      model ThreZonNetWor "\"Three zone system\""
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium "Medium for the air";
        parameter Modelica.Units.SI.Pressure PreDroMai1
          "Pressure drop 1 across the duct";

        parameter Modelica.Units.SI.Pressure PreDroMai2
          "Pressure drop 2 across the main duct";

        parameter Modelica.Units.SI.Pressure PreDroBra1
          "Pressure drop 1 across the duct branch 1";

        parameter Modelica.Units.SI.Pressure PreDroBra2
          "Pressure drop 1 across the duct branch 2";

        parameter Modelica.Units.SI.Pressure PreDroBra3
          "Pressure drop 1 across the duct branch 3";

        parameter Modelica.Units.SI.MassFlowRate mFloRat1
          "mass flow rate for the first branch1";

        parameter Modelica.Units.SI.MassFlowRate mFloRat2
          "mass flow rate for the first branch2";

        parameter Modelica.Units.SI.MassFlowRate mFloRat3
          "mass flow rate for the first branch3";

        Buildings.Fluid.FixedResistances.Junction junSup1(m_flow_nominal={mFloRat1 + mFloRat2 + mFloRat3,-mFloRat2-mFloRat3,-
              mFloRat1}, redeclare package Medium = Medium,
          dp_nominal={PreDroMai1/2,PreDroMai2/2,PreDroBra1/2})
          annotation (Placement(transformation(extent={{-90,30},{-70,50}})));
        Buildings.Fluid.FixedResistances.Junction junRet1(redeclare package
            Medium =                                                                 Medium, m_flow_nominal={mFloRat2 + mFloRat3,-mFloRat1-mFloRat2-mFloRat3,mFloRat1},
          dp_nominal={PreDroMai2/2,PreDroMai1/2,PreDroBra1/2})
                                                      annotation (Placement(transformation(extent={{-70,-70},{-90,-50}})));
        Buildings.Fluid.FixedResistances.Junction junRet2( redeclare package
            Medium =                                                                  Medium, m_flow_nominal={mFloRat3,-mFloRat2-mFloRat3,mFloRat2},
          dp_nominal={PreDroBra3/2,PreDroMai2/2,PreDroBra2/2})
                                                      annotation (Placement(transformation(extent={{10,-70},{-10,-50}})));
        Buildings.Fluid.FixedResistances.Junction junSup2(m_flow_nominal={mFloRat2 + mFloRat3,-mFloRat3,-
              mFloRat2}, redeclare package Medium = Medium,
          dp_nominal={PreDroMai2/2,PreDroBra3/2,PreDroBra2/2})
                            annotation (Placement(transformation(extent={{-10,30},{10,50}})));

        Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
              Medium) "Second port, typically outlet"
                                          annotation (Placement(transformation(extent={{-110,-70},{-90,-50}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
              Medium) "Second port, typically outlet"
                                          annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
        Buildings.Fluid.Sensors.RelativePressure senRelPre(redeclare package
            Medium =                                                                  Medium)
                                                       annotation (Placement(transformation(extent={{-80,-26},{-60,-6}})));
        Modelica.Fluid.Interfaces.FluidPorts_b ports_b[3](redeclare package
            Medium =                                                                 Medium)
          annotation (Placement(transformation(extent={{90,6},{110,86}})));
        Modelica.Fluid.Interfaces.FluidPorts_a ports_a[3](redeclare package
            Medium =                                                                 Medium)
          annotation (Placement(transformation(extent={{90,-102},{110,-22}})));
        Modelica.Blocks.Interfaces.RealOutput p "Pressure at port"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        connect(junSup1.port_2, junSup2.port_1) annotation (Line(
            points={{-70,40},{-10,40}},
            color={0,127,255},
            thickness=1));
        connect(junRet2.port_2, junRet1.port_1)
          annotation (Line(
            points={{-10,-60},{-10,-60},{-70,-60}},
            color={0,127,255},
            thickness=1));
        connect(junRet1.port_2, port_b) annotation (Line(
            points={{-90,-60},{-100,-60}},
            color={0,127,255},
            thickness=1));
        connect(junSup1.port_1, port_a) annotation (Line(
            points={{-90,40},{-100,40}},
            color={0,127,255},
            thickness=1));

        connect(ports_b, ports_b) annotation (Line(points={{100,46},{100,46}}, color={0,127,255}));
        connect(junSup2.port_3, ports_b[2])
          annotation (Line(
            points={{0,30},{0,30},{0,8},{84,8},{84,46},{100,46}},
            color={0,127,255},
            thickness=1));
        connect(junSup1.port_3, ports_b[1])
          annotation (Line(
            points={{-80,30},{-80,30},{-80,0},{90,0},{90,19.3333},{100,19.3333}},
            color={0,127,255},
            thickness=1));
        connect(junRet2.port_3, ports_a[2])
          annotation (Line(
            points={{0,-70},{0,-86},{100,-86},{100,-62}},
            color={0,127,255},
            thickness=1));
        connect(junRet1.port_3, ports_a[1])
          annotation (Line(
            points={{-80,-70},{-80,-70},{-80,-94},{100,-94},{100,-88.6667}},
            color={0,127,255},
            thickness=1));
        connect(junSup2.port_2, ports_b[3])
          annotation (Line(
            points={{10,40},{100,40},{100,72.6667}},
            color={0,127,255},
            thickness=1));
        connect(junRet2.port_1, ports_a[3])
          annotation (Line(
            points={{10,-60},{100,-60},{100,-35.3333}},
            color={0,127,255},
            thickness=1));
        connect(senRelPre.port_a, port_a) annotation (Line(points={{-80,-16},{-94,-16},{-94,40},{-100,40}}, color={0,127,255}));
        connect(senRelPre.port_b, port_b)
          annotation (Line(points={{-60,-16},{-48,-16},{-48,-40},{-94,-40},{-94,-60},{-100,-60}}, color={0,127,255}));
        connect(senRelPre.p_rel, p) annotation (Line(
            points={{-70,-25},{-70,-24},{96,-24},{96,0},{110,0}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Line(points={{-90,40},{80,40}}, color={0,127,255}),
              Line(points={{-90,-60},{80,-60}}, color={0,127,255}),
              Line(points={{80,40},{80,-60}}, color={0,127,255}),
              Line(points={{50,40},{50,-60}}, color={0,127,255}),
              Line(points={{20,40},{20,-60}}, color={0,127,255}),
              Text(
                extent={{-148,106},{152,146}},
                textString="%name",
                textColor={0,0,255})}),                                Diagram(coordinateSystem(preserveAspectRatio=false)));
      end ThreZonNetWor;

      model FivZonNetWor
        replaceable package Medium = Modelica.Media.Interfaces.PartialMedium "Medium for the air";
        parameter Modelica.Units.SI.Pressure PreDroMai1
          "Pressure drop 1 across the duct";

        parameter Modelica.Units.SI.Pressure PreDroMai2
          "Pressure drop 2 across the main duct";

        parameter Modelica.Units.SI.Pressure PreDroMai3
          "Pressure drop 3 across the main duct";

        parameter Modelica.Units.SI.Pressure PreDroMai4
          "Pressure drop 4 across the main duct";

        parameter Modelica.Units.SI.Pressure PreDroBra1
          "Pressure drop 1 across the duct branch 1";

        parameter Modelica.Units.SI.Pressure PreDroBra2
          "Pressure drop 1 across the duct branch 2";

        parameter Modelica.Units.SI.Pressure PreDroBra3
          "Pressure drop 1 across the duct branch 3";

        parameter Modelica.Units.SI.Pressure PreDroBra4
          "Pressure drop 1 across the duct branch 4";

        parameter Modelica.Units.SI.Pressure PreDroBra5
          "Pressure drop 1 across the duct branch 5";

        parameter Modelica.Units.SI.MassFlowRate mFloRat1
          "mass flow rate for the first branch1";

        parameter Modelica.Units.SI.MassFlowRate mFloRat2
          "mass flow rate for the first branch2";

        parameter Modelica.Units.SI.MassFlowRate mFloRat3
          "mass flow rate for the first branch3";

        parameter Modelica.Units.SI.MassFlowRate mFloRat4
          "mass flow rate for the first branch4";

        parameter Modelica.Units.SI.MassFlowRate mFloRat5
          "mass flow rate for the first branch5";

        Buildings.Fluid.FixedResistances.Junction junSup1(
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
                                                          m_flow_nominal={mFloRat1 + mFloRat2 + mFloRat3 + mFloRat4 + mFloRat5,-mFloRat2-mFloRat3-mFloRat4 - mFloRat5,-
              mFloRat1}, redeclare package Medium = Medium,
          dp_nominal={PreDroMai1/2,PreDroMai2/2,PreDroBra1/2})
          annotation (Placement(transformation(extent={{-90,30},{-70,50}})));
        Buildings.Fluid.FixedResistances.Junction junRet1(redeclare package
            Medium =                                                                 Medium,
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,                         m_flow_nominal={mFloRat2 + mFloRat3 + mFloRat4 + mFloRat5,-mFloRat1-mFloRat2-mFloRat3-
              mFloRat4 - mFloRat5,mFloRat1},
          dp_nominal={PreDroMai2/2,PreDroMai1/2,PreDroBra1/2})
                                                      annotation (Placement(transformation(extent={{-70,-70},{-90,-50}})));
        Buildings.Fluid.FixedResistances.Junction junRet2( redeclare package
            Medium =                                                                  Medium,
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,                          m_flow_nominal={mFloRat3 + mFloRat4 + mFloRat5,-mFloRat2-mFloRat3-
              mFloRat4 - mFloRat5,mFloRat2},
          dp_nominal={PreDroMai3/2,PreDroMai2/2,PreDroBra2/2})
                                                      annotation (Placement(transformation(extent={{-30,-70},{-50,-50}})));
        Buildings.Fluid.FixedResistances.Junction junSup2(
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
                                                          m_flow_nominal={mFloRat2 + mFloRat3 + mFloRat4 + mFloRat5,-mFloRat3-mFloRat4 - mFloRat5,-
              mFloRat2}, redeclare package Medium = Medium,
          dp_nominal={PreDroMai2/2,PreDroMai3/2,PreDroBra2/2})
                            annotation (Placement(transformation(extent={{-50,30},{-30,50}})));
        Buildings.Fluid.FixedResistances.Junction junSup3(
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
                                                          m_flow_nominal={mFloRat3 + mFloRat4 + mFloRat5,-mFloRat4 - mFloRat5,-
              mFloRat3}, redeclare package Medium = Medium,
          dp_nominal={PreDroMai3/2,PreDroMai4/2,PreDroBra3/2})
                                                      annotation (Placement(transformation(extent={{-10,30},{10,50}})));
        Buildings.Fluid.FixedResistances.Junction junRet3(redeclare package
            Medium =                                                                 Medium,
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,                         m_flow_nominal={mFloRat4 + mFloRat5,-mFloRat3-
              mFloRat4 - mFloRat5,mFloRat3},
          dp_nominal={PreDroMai4/2,PreDroMai3/2,PreDroBra3/2})
                                                      annotation (Placement(transformation(extent={{10,-50},{-10,-70}})));
        Buildings.Fluid.FixedResistances.Junction junSup4(
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
                                                          m_flow_nominal={mFloRat4 + mFloRat5,-mFloRat5,-mFloRat4}, redeclare
            package Medium =
                     Medium,
          dp_nominal={PreDroMai4/2,PreDroBra5/2,PreDroBra4/2})
                                                      annotation (Placement(transformation(extent={{30,30},{50,50}})));
        Buildings.Fluid.FixedResistances.Junction junRet4(redeclare package
            Medium =                                                                 Medium,
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,                         m_flow_nominal={mFloRat5,-mFloRat4 - mFloRat5,
              mFloRat4},
          dp_nominal={PreDroBra5/2,PreDroMai4/2,PreDroBra4/2})
                                                      annotation (Placement(transformation(extent={{50,-70},{30,-50}})));

        Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
              Medium) "Second port, typically outlet"
                                          annotation (Placement(transformation(extent={{-110,-70},{-90,-50}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
              Medium) "Second port, typically outlet"
                                          annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
        replaceable Buildings.Fluid.Sensors.Pressure         senRelPre(redeclare
            package Medium =                                                                  Medium)
                                                       annotation (Placement(transformation(extent={{34,70},
                  {14,90}})));
        Modelica.Fluid.Interfaces.FluidPorts_b ports_b[5](redeclare package
            Medium =                                                                 Medium)
          annotation (Placement(transformation(extent={{90,6},{110,86}})));
        Modelica.Fluid.Interfaces.FluidPorts_a ports_a[5](redeclare package
            Medium =                                                                 Medium)
          annotation (Placement(transformation(extent={{90,-102},{110,-22}})));
        Modelica.Blocks.Interfaces.RealOutput p "Pressure at port"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        connect(junSup1.port_2, junSup2.port_1) annotation (Line(
            points={{-70,40},{-62,40},{-50,40}},
            color={0,127,255},
            thickness=1));
        connect(junSup2.port_2, junSup3.port_1) annotation (Line(
            points={{-30,40},{-30,40},{-10,40}},
            color={0,127,255},
            thickness=1));
        connect(junSup3.port_2, junSup4.port_1) annotation (Line(
            points={{10,40},{10,40},{30,40}},
            color={0,127,255},
            thickness=1));
        connect(junRet4.port_2, junRet3.port_1) annotation (Line(
            points={{30,-60},{10,-60}},
            color={0,127,255},
            thickness=1));
        connect(junRet3.port_2, junRet2.port_1)
          annotation (Line(
            points={{-10,-60},{-10,-60},{-30,-60}},
            color={0,127,255},
            thickness=1));
        connect(junRet2.port_2, junRet1.port_1)
          annotation (Line(
            points={{-50,-60},{-50,-60},{-70,-60}},
            color={0,127,255},
            thickness=1));
        connect(junRet1.port_2, port_b) annotation (Line(
            points={{-90,-60},{-100,-60}},
            color={0,127,255},
            thickness=1));
        connect(junSup1.port_1, port_a) annotation (Line(
            points={{-90,40},{-100,40}},
            color={0,127,255},
            thickness=1));

        connect(ports_b, ports_b) annotation (Line(points={{100,46},{100,46}}, color={0,127,255}));
        connect(junSup4.port_3, ports_b[4])
          annotation (Line(
            points={{40,30},{40,16},{60,16},{60,62},{100,62}},
            color={0,127,255},
            thickness=1));
        connect(junSup3.port_3, ports_b[3])
          annotation (Line(
            points={{0,30},{0,12},{78,12},{78,46},{100,46}},
            color={0,127,255},
            thickness=1));
        connect(junSup2.port_3, ports_b[2])
          annotation (Line(
            points={{-40,30},{-40,30},{-40,8},{84,8},{84,30},{100,30}},
            color={0,127,255},
            thickness=1));
        connect(junSup1.port_3, ports_b[1])
          annotation (Line(
            points={{-80,30},{-80,30},{-80,0},{90,0},{90,14},{100,14}},
            color={0,127,255},
            thickness=1));
        connect(junRet4.port_1, ports_a[5])
          annotation (Line(
            points={{50,-60},{70,-60},{70,-34},{70,-30},{100,-30}},
            color={0,127,255},
            thickness=1));
        connect(junRet4.port_3, ports_a[4])
          annotation (Line(
            points={{40,-70},{40,-70},{70,-70},{86,-70},{86,-46},{100,-46}},
            color={0,127,255},
            thickness=1));
        connect(junRet2.port_3, ports_a[2])
          annotation (Line(
            points={{-40,-70},{-40,-86},{100,-86},{100,-78}},
            color={0,127,255},
            thickness=1));
        connect(junRet1.port_3, ports_a[1])
          annotation (Line(
            points={{-80,-70},{-80,-70},{-80,-94},{96,-94},{100,-94}},
            color={0,127,255},
            thickness=1));
        connect(junRet3.port_3, ports_a[3])
          annotation (Line(
            points={{0,-50},{0,-38},{82,-38},{82,-62},{100,-62}},
            color={0,127,255},
            thickness=1));
        connect(senRelPre.port, junSup4.port_2) annotation (Line(
            points={{24,70},{24,60},{56,60},{56,40},{50,40}},
            color={0,127,255},
            thickness=1));
        connect(junSup4.port_2, ports_b[5]) annotation (Line(
            points={{50,40},{54,40},{56,40},{56,82},{100,82},{100,78}},
            color={0,127,255},
            thickness=1));
        connect(senRelPre.p, p) annotation (Line(
            points={{13,80},{-20,80},{-20,-20},{96,-20},{96,0},{110,0}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Line(points={{-90,40},{80,40}}, color={0,127,255}),
              Line(points={{-90,-60},{80,-60}}, color={0,127,255}),
              Line(points={{80,40},{80,-60}}, color={0,127,255}),
              Line(points={{50,40},{50,-60}}, color={0,127,255}),
              Line(points={{20,40},{20,-60}}, color={0,127,255}),
              Line(points={{-10,40},{-10,-60}}, color={0,127,255}),
              Line(points={{-40,40},{-40,-60}}, color={0,127,255})}),  Diagram(coordinateSystem(preserveAspectRatio=false)));
      end FivZonNetWor;

      model FivZonVAV
        replaceable package MediumAir = Modelica.Media.Interfaces.PartialMedium
                                                                                "medium for the air";

        replaceable package MediumWat = Modelica.Media.Interfaces.PartialMedium
                                                                                "medium for the water";

        parameter Modelica.Units.SI.Pressure PreAirDroMai1
          "pressure drop 1 across the duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai2
          "Pressure drop 2 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai3
          "Pressure drop 3 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai4
          "Pressure drop 4 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroBra1
          "Pressure drop 1 across the duct branch 1";

        parameter Modelica.Units.SI.Pressure PreAirDroBra2
          "Pressure drop 1 across the duct branch 2";

        parameter Modelica.Units.SI.Pressure PreAirDroBra3
          "Pressure drop 1 across the duct branch 3";

        parameter Modelica.Units.SI.Pressure PreAirDroBra4
          "Pressure drop 1 across the duct branch 4";

        parameter Modelica.Units.SI.Pressure PreAirDroBra5
          "Pressure drop 1 across the duct branch 5";

        parameter Modelica.Units.SI.Pressure PreWatDroMai1
          "Pressure drop 1 across the pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai2
          "Pressure drop 2 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai3
          "Pressure drop 3 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai4
          "Pressure drop 4 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroBra1
          "Pressure drop 1 across the pipe branch 1";

        parameter Modelica.Units.SI.Pressure PreWatDroBra2
          "Pressure drop 1 across the pipe branch 2";

        parameter Modelica.Units.SI.Pressure PreWatDroBra3
          "Pressure drop 1 across the pipe branch 3";

        parameter Modelica.Units.SI.Pressure PreWatDroBra4
          "Pressure drop 1 across the pipe branch 4";

        parameter Modelica.Units.SI.Pressure PreWatDroBra5
          "Pressure drop 1 across the pipe branch 5";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat1
          "mass flow rate for vav 1";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat2
          "mass flow rate for vav 2";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat3
          "mass flow rate for vav 3";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat4
          "mass flow rate for vav 4";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat5
          "mass flow rate for vav 5";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat1
          "mass flow rate for vav 1";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat2
          "mass flow rate for vav 2";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat3
          "mass flow rate for vav 3";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat4
          "mass flow rate for vav 4";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat5
          "mass flow rate for vav 5";

        parameter Modelica.Units.SI.Pressure PreDroAir1
          "Pressure drop in the air side of vav 1";
        parameter Modelica.Units.SI.Pressure PreDroWat1
          "Pressure drop in the water side of vav 1";
        parameter Modelica.Units.SI.Efficiency eps1(max=1) = 0.8
          "Heat exchanger effectiveness of vav 1";

        parameter Modelica.Units.SI.Pressure PreDroAir2
          "Pressure drop in the air side of vav 2";
        parameter Modelica.Units.SI.Pressure PreDroWat2
          "Pressure drop in the water side of vav 2";
        parameter Modelica.Units.SI.Efficiency eps2(max=1) = 0.8
          "Heat exchanger effectiveness of vav 2";

        parameter Modelica.Units.SI.Pressure PreDroAir3
          "Pressure drop in the air side of vav 3";
        parameter Modelica.Units.SI.Pressure PreDroWat3
          "Pressure drop in the water side of vav 3";
        parameter Modelica.Units.SI.Efficiency eps3(max=1) = 0.8
          "Heat exchanger effectiveness of vav 3";

        parameter Modelica.Units.SI.Pressure PreDroAir4
          "Pressure drop in the air side of vav 4";
        parameter Modelica.Units.SI.Pressure PreDroWat4
          "Pressure drop in the water side of vav 4";
        parameter Modelica.Units.SI.Efficiency eps4(max=1) = 0.8
          "Heat exchanger effectiveness of vav 4";

        parameter Modelica.Units.SI.Pressure PreDroAir5
          "Pressure drop in the air side of vav 1";
        parameter Modelica.Units.SI.Pressure PreDroWat5
          "Pressure drop in the water side of vav 1";
        parameter Modelica.Units.SI.Efficiency eps5(max=1) = 0.8
          "Heat exchanger effectiveness of vav 5";

        FivZonNetWor ReheatWatNet(redeclare package Medium = MediumWat,
          PreDroMai1=PreWatDroMai1,
          PreDroMai2=PreWatDroMai2,
          PreDroMai3=PreWatDroMai3,
          PreDroMai4=PreWatDroMai4,
          PreDroBra1=PreWatDroBra1,
          PreDroBra2=PreWatDroBra2,
          PreDroBra3=PreWatDroBra3,
          PreDroBra4=PreWatDroBra4,
          PreDroBra5=PreWatDroBra5,
          mFloRat1=mWatFloRat1,
          mFloRat2=mWatFloRat2,
          mFloRat3=mWatFloRat3,
          mFloRat4=mWatFloRat4,
          mFloRat5=mWatFloRat5)
          annotation (Placement(transformation(extent={{-76,64},{-46,30}})));
        FivZonNetWor AirNetWor(
          redeclare package Medium = MediumAir,
          PreDroMai1=PreAirDroMai1,
          PreDroMai2=PreAirDroMai2,
          PreDroMai3=PreAirDroMai3,
          PreDroMai4=PreAirDroMai4,
          mFloRat1=mAirFloRat1,
          mFloRat2=mAirFloRat2,
          mFloRat3=mAirFloRat3,
          mFloRat4=mAirFloRat4,
          mFloRat5=mAirFloRat5,
          PreDroBra1=PreAirDroBra1,
          PreDroBra2=PreAirDroBra2,
          PreDroBra3=PreAirDroBra3,
          PreDroBra4=PreAirDroBra4,
          PreDroBra5=PreAirDroBra5) annotation (Placement(transformation(extent={{-74,-52},{-44,-18}})));
        Devices.AirSide.Terminal.BaseClasses.VAV_advance_temp_sensor vAV[5](
          redeclare package MediumAir = MediumAir,
          redeclare package MediumWat = MediumWat,
          mAirFloRat={mAirFloRat1,mAirFloRat2,mAirFloRat3,mAirFloRat4,mAirFloRat5},
          mWatFloRat={mWatFloRat1,mWatFloRat2,mWatFloRat3,mWatFloRat4,mWatFloRat5},
          PreDroAir={PreDroAir1,PreDroAir2,PreDroAir3,PreDroAir4,PreDroAir5},
          PreDroWat={PreDroWat1,PreDroWat2,PreDroWat3,PreDroWat4,PreDroWat5},
          eps={eps1,eps2,eps3,eps4,eps5})
          annotation (Placement(transformation(extent={{20,-2},{40,18}})));
        Buildings.Fluid.MixingVolumes.MixingVolume vol[5](
          redeclare package Medium = MediumAir,
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
          nPorts=10,
          m_flow_nominal={mAirFloRat1,mAirFloRat2,mAirFloRat3,mAirFloRat4,mAirFloRat5},
          V=10)     annotation (Placement(transformation(extent={{20,-84},{40,-64}})));
        Buildings.HeatTransfer.Sources.PrescribedHeatFlow fixedHeatFlow[5]
          annotation (Placement(transformation(extent={{-40,-90},{-20,-70}})));
        Modelica.Blocks.Interfaces.RealInput Q_flow[5]
          annotation (Placement(transformation(extent={{-120,-90},{-100,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_Wat(redeclare package
            Medium =
              MediumWat) "Second port, typically outlet"
          annotation (Placement(transformation(extent={{30,90},{50,110}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_Wat(redeclare package
            Medium =
              MediumWat) "Second port, typically outlet"
          annotation (Placement(transformation(extent={{-50,90},{-30,110}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_Air(redeclare package
            Medium =
              MediumAir)
          "Second port, typically outlet"
          annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_Air(redeclare package
            Medium =
              MediumAir)
          "Second port, typically outlet"
          annotation (Placement(transformation(extent={{-110,-70},{-90,-50}})));
        Modelica.Blocks.Interfaces.RealInput AirFlowRatSetPoi[5]
          "Connector of setpoint input signal"
          annotation (Placement(transformation(extent={{-120,90},{-100,110}})));
        Modelica.Blocks.Interfaces.RealInput yVal[5]
          "Actuator position (0: closed, 1: open)"
          annotation (Placement(transformation(extent={{-120,50},{-100,70}})));
        Modelica.Blocks.Interfaces.BooleanInput On[5]
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Modelica.Fluid.Sensors.TemperatureTwoPort temZon[5](redeclare package
            Medium =                                                                   MediumAir)
          annotation (Placement(transformation(extent={{8,-56},{-12,-36}})));
        Modelica.Blocks.Interfaces.RealOutput pre "Pressure at port"
          annotation (Placement(transformation(extent={{100,-50},{120,-30}})));
        Modelica.Blocks.Interfaces.RealOutput TZon[5]
          "Temperature of the passing fluid"
          annotation (Placement(transformation(extent={{100,30},{120,50}})));
        Modelica.Blocks.Sources.RealExpression realExpression[5](y=vol.heatPort.T)
          annotation (Placement(transformation(extent={{44,30},{64,50}})));
      equation

        connect(fixedHeatFlow.port, vol.heatPort) annotation (Line(points={{-20,-80},{
                0,-80},{0,-74},{20,-74}}, color={191,0,0}));
        connect(fixedHeatFlow.Q_flow, Q_flow)
          annotation (Line(points={{-40,-80},{-110,-80}}, color={0,0,127},
            pattern=LinePattern.Dash));
        connect(vAV.port_a_Wat, ReheatWatNet.ports_b) annotation (Line(points={{22,18},
                {22,39.18},{-46,39.18}}, color={255,0,0},
            thickness=1));
        connect(vAV.port_b_Wat, ReheatWatNet.ports_a) annotation (Line(points={{28,18},
                {28,57.54},{-46,57.54}}, color={255,0,0},
            thickness=1));
        connect(vAV.port_a, AirNetWor.ports_b) annotation (Line(points={{20,8},{
                -20,8},{-20,-27.18},{-44,-27.18}},
                                            color={0,140,72},
            thickness=0.5));
        for i in 1:5 loop
          connect(vAV[i].port_b, vol[i].ports[1]);
          connect(temZon[i].port_b, AirNetWor.ports_a[i]);
          connect(temZon[i].port_a, vol[i].ports[2]);
        end for;

        connect(ReheatWatNet.port_b, port_b_Wat) annotation (Line(points={{-76,57.2},{-74,57.2},{-74,64},{40,64},{40,100}},
                                               color={255,0,0},
            thickness=1));
        connect(ReheatWatNet.port_a, port_a_Wat) annotation (Line(points={{-76,40.2},{-76,40.2},{-76,40},{-82,40},{-82,76},
                {-40,76},{-40,100}},                             color={255,0,0},
            thickness=1));
        connect(AirNetWor.port_a, port_a_Air)
          annotation (Line(points={{-74,-28.2},{-88,-28.2},{-88,40},{-100,40}}, color={0,140,72},
            thickness=0.5));

        connect(AirNetWor.port_b, port_b_Air)
          annotation (Line(points={{-74,-45.2},{-80,-45.2},{-80,-60},{-100,-60}}, color={0,140,72},
            thickness=0.5));

        connect(vAV.AirFlowRatSetPoi, AirFlowRatSetPoi) annotation (Line(
            points={{19,16},{-34,16},{-34,100},{-110,100}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(vAV.yVal, yVal) annotation (Line(
            points={{19,12},{-40,12},{-40,60},{-110,60}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(vAV.On, On) annotation (Line(
            points={{19,0},{-110,0}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(AirNetWor.p, pre) annotation (Line(
            points={{-42.5,-35},{-8,-35},{-8,-20},{58,-20},{58,-40},{110,-40}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(realExpression.y, TZon) annotation (Line(
            points={{65,40},{110,40}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Line(points={{-90,40},{80,40}}, color={0,127,255}),
              Line(points={{-90,-60},{80,-60}}, color={0,127,255}),
              Line(points={{80,40},{80,-60}}, color={0,127,255}),
              Line(points={{50,40},{50,-60}}, color={0,127,255}),
              Line(points={{20,40},{20,-60}}, color={0,127,255}),
              Line(points={{-10,40},{-10,-60}}, color={0,127,255}),
              Line(points={{-40,40},{-40,-60}}, color={0,127,255}),
              Rectangle(
                extent={{-46,0},{-34,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-16,0},{-4,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{14,0},{26,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{44,0},{56,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{74,0},{86,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-40,90},{-40,60}}, color={255,0,0}),
              Line(points={{-60,60},{-40,60}}, color={255,0,0}),
              Line(points={{-60,60},{-60,-12}}, color={255,0,0}),
              Line(points={{64,20},{-60,20}}, color={255,0,0}),
              Line(points={{-24,20},{-24,-12}}, color={255,0,0}),
              Line(points={{6,20},{6,-12}}, color={255,0,0}),
              Line(points={{36,20},{36,-12}}, color={255,0,0}),
              Line(points={{64,20},{64,-12}}, color={255,0,0}),
              Line(points={{-60,-12},{-46,-12}}, color={255,0,0}),
              Line(points={{-24,-12},{-16,-12}}, color={255,0,0}),
              Line(points={{6,-12},{14,-12}}, color={255,0,0}),
              Line(points={{36,-12},{44,-12}}, color={255,0,0}),
              Line(points={{64,-12},{74,-12}}, color={255,0,0}),
              Line(points={{90,-32},{-36,-32}}, color={255,0,0}),
              Line(points={{-36,-20},{-36,-32}}, color={255,0,0}),
              Line(points={{-6,-20},{-6,-32}}, color={255,0,0}),
              Line(points={{24,-20},{24,-32}}, color={255,0,0}),
              Line(points={{54,-20},{54,-32}}, color={255,0,0}),
              Line(points={{84,-20},{84,-32}}, color={255,0,0}),
              Line(points={{90,60},{90,-32}}, color={255,0,0}),
              Line(points={{40,60},{90,60}}, color={255,0,0}),
              Line(points={{40,90},{40,60}}, color={255,0,0}),
              Text(
                extent={{-152,-146},{148,-106}},
                textColor={0,0,255},
                textString="%name")}),
                Diagram(coordinateSystem(preserveAspectRatio=false)));
      end FivZonVAV;

      model FivZonVAVNoVec
        replaceable package MediumAir = Modelica.Media.Interfaces.PartialMedium
                                                                                "medium for the air";

        replaceable package MediumWat = Modelica.Media.Interfaces.PartialMedium
                                                                                "medium for the water";

        parameter Modelica.Units.SI.Pressure PreAirDroMai1
          "pressure drop 1 across the duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai2
          "Pressure drop 2 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai3
          "Pressure drop 3 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai4
          "Pressure drop 4 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroBra1
          "Pressure drop 1 across the duct branch 1";

        parameter Modelica.Units.SI.Pressure PreAirDroBra2
          "Pressure drop 1 across the duct branch 2";

        parameter Modelica.Units.SI.Pressure PreAirDroBra3
          "Pressure drop 1 across the duct branch 3";

        parameter Modelica.Units.SI.Pressure PreAirDroBra4
          "Pressure drop 1 across the duct branch 4";

        parameter Modelica.Units.SI.Pressure PreAirDroBra5
          "Pressure drop 1 across the duct branch 5";

        parameter Modelica.Units.SI.Pressure PreWatDroMai1
          "Pressure drop 1 across the pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai2
          "Pressure drop 2 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai3
          "Pressure drop 3 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai4
          "Pressure drop 4 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroBra1
          "Pressure drop 1 across the pipe branch 1";

        parameter Modelica.Units.SI.Pressure PreWatDroBra2
          "Pressure drop 1 across the pipe branch 2";

        parameter Modelica.Units.SI.Pressure PreWatDroBra3
          "Pressure drop 1 across the pipe branch 3";

        parameter Modelica.Units.SI.Pressure PreWatDroBra4
          "Pressure drop 1 across the pipe branch 4";

        parameter Modelica.Units.SI.Pressure PreWatDroBra5
          "Pressure drop 1 across the pipe branch 5";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat1
          "mass flow rate for vav 1";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat2
          "mass flow rate for vav 2";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat3
          "mass flow rate for vav 3";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat4
          "mass flow rate for vav 4";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat5
          "mass flow rate for vav 5";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat1
          "mass flow rate for vav 1";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat2
          "mass flow rate for vav 2";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat3
          "mass flow rate for vav 3";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat4
          "mass flow rate for vav 4";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat5
          "mass flow rate for vav 5";

        parameter Modelica.Units.SI.Pressure PreDroAir1
          "Pressure drop in the air side of vav 1";
        parameter Modelica.Units.SI.Pressure PreDroWat1
          "Pressure drop in the water side of vav 1";
        parameter Modelica.Units.SI.Efficiency eps1(max=1) = 0.8
          "Heat exchanger effectiveness of vav 1";

        parameter Modelica.Units.SI.Pressure PreDroAir2
          "Pressure drop in the air side of vav 2";
        parameter Modelica.Units.SI.Pressure PreDroWat2
          "Pressure drop in the water side of vav 2";
        parameter Modelica.Units.SI.Efficiency eps2(max=1) = 0.8
          "Heat exchanger effectiveness of vav 2";

        parameter Modelica.Units.SI.Pressure PreDroAir3
          "Pressure drop in the air side of vav 3";
        parameter Modelica.Units.SI.Pressure PreDroWat3
          "Pressure drop in the water side of vav 3";
        parameter Modelica.Units.SI.Efficiency eps3(max=1) = 0.8
          "Heat exchanger effectiveness of vav 3";

        parameter Modelica.Units.SI.Pressure PreDroAir4
          "Pressure drop in the air side of vav 4";
        parameter Modelica.Units.SI.Pressure PreDroWat4
          "Pressure drop in the water side of vav 4";
        parameter Modelica.Units.SI.Efficiency eps4(max=1) = 0.8
          "Heat exchanger effectiveness of vav 4";

        parameter Modelica.Units.SI.Pressure PreDroAir5
          "Pressure drop in the air side of vav 1";
        parameter Modelica.Units.SI.Pressure PreDroWat5
          "Pressure drop in the water side of vav 1";
        parameter Modelica.Units.SI.Efficiency eps5(max=1) = 0.8
          "Heat exchanger effectiveness of vav 5";

        FivZonNetWor ReheatWatNet(redeclare package Medium = MediumWat,
          PreDroMai1=PreWatDroMai1,
          PreDroMai2=PreWatDroMai2,
          PreDroMai3=PreWatDroMai3,
          PreDroMai4=PreWatDroMai4,
          PreDroBra1=PreWatDroBra1,
          PreDroBra2=PreWatDroBra2,
          PreDroBra3=PreWatDroBra3,
          PreDroBra4=PreWatDroBra4,
          PreDroBra5=PreWatDroBra5,
          mFloRat1=mWatFloRat1,
          mFloRat2=mWatFloRat2,
          mFloRat3=mWatFloRat3,
          mFloRat4=mWatFloRat4,
          mFloRat5=mWatFloRat5)
          annotation (Placement(transformation(extent={{-76,64},{-46,30}})));
        FivZonNetWor AirNetWor(
          redeclare package Medium = MediumAir,
          PreDroMai1=PreAirDroMai1,
          PreDroMai2=PreAirDroMai2,
          PreDroMai3=PreAirDroMai3,
          PreDroMai4=PreAirDroMai4,
          mFloRat1=mAirFloRat1,
          mFloRat2=mAirFloRat2,
          mFloRat3=mAirFloRat3,
          mFloRat4=mAirFloRat4,
          mFloRat5=mAirFloRat5,
          PreDroBra1=PreAirDroBra1,
          PreDroBra2=PreAirDroBra2,
          PreDroBra3=PreAirDroBra3,
          PreDroBra4=PreAirDroBra4,
          PreDroBra5=PreAirDroBra5) annotation (Placement(transformation(extent={{-74,-52},{-44,-18}})));
        Devices.AirSide.Terminal.BaseClasses.VAV_advance_temp_sensor vAV1(
          zonNam="cor",
          redeclare package MediumAir = MediumAir,
          redeclare package MediumWat = MediumWat,
          mAirFloRat=mAirFloRat1,
          mWatFloRat=mWatFloRat1,
          PreDroAir=PreDroAir1,
          PreDroWat=PreDroWat1,
          eps=eps1) annotation (Placement(transformation(extent={{-10,-2},{10,18}})));
        Buildings.Fluid.MixingVolumes.MixingVolume vol[5](
          redeclare package Medium = MediumAir,
          energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
          nPorts=10,
          m_flow_nominal={mAirFloRat1,mAirFloRat2,mAirFloRat3,mAirFloRat4,mAirFloRat5},
          V=10)     annotation (Placement(transformation(extent={{70,-70},{90,-50}})));
        Buildings.HeatTransfer.Sources.PrescribedHeatFlow fixedHeatFlow[5]
          annotation (Placement(transformation(extent={{-40,-90},{-20,-70}})));
        Modelica.Blocks.Interfaces.RealInput Q_flow[5]
          annotation (Placement(transformation(extent={{-120,-90},{-100,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_Wat(redeclare package
            Medium =
              MediumWat) "Second port, typically outlet"
          annotation (Placement(transformation(extent={{30,90},{50,110}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_Wat(redeclare package
            Medium =
              MediumWat) "Second port, typically outlet"
          annotation (Placement(transformation(extent={{-50,90},{-30,110}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_Air(redeclare package
            Medium =
              MediumAir)
          "Second port, typically outlet"
          annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_Air(redeclare package
            Medium =
              MediumAir)
          "Second port, typically outlet"
          annotation (Placement(transformation(extent={{-110,-70},{-90,-50}})));
        Modelica.Blocks.Interfaces.RealInput AirFlowRatSetPoi[5]
          "Connector of setpoint input signal"
          annotation (Placement(transformation(extent={{-120,76},{-100,96}})));
        Modelica.Blocks.Interfaces.RealInput yVal[5]
          "Actuator position (0: closed, 1: open)"
          annotation (Placement(transformation(extent={{-120,50},{-100,70}})));
        Modelica.Blocks.Interfaces.BooleanInput On[5]
          annotation (Placement(transformation(extent={{-120,-22},{-100,-2}})));
        Modelica.Fluid.Sensors.TemperatureTwoPort temZon[5](redeclare package
            Medium =                                                                   MediumAir)
          annotation (Placement(transformation(extent={{138,-68},{118,-48}})));
        Modelica.Blocks.Interfaces.RealOutput pre "Pressure at port"
          annotation (Placement(transformation(extent={{200,-22},{220,-2}}),
              iconTransformation(extent={{100,-100},{120,-80}})));
        Modelica.Blocks.Interfaces.RealOutput TZon[5]
          "Temperature of the passing fluid"
          annotation (Placement(transformation(extent={{200,70},{220,90}}),
              iconTransformation(extent={{100,50},{120,70}})));

        Modelica.Blocks.Interfaces.RealOutput yDam[5]
          "Control signal for terminal box damper"
          annotation (Placement(transformation(extent={{200,44},{220,64}}),
              iconTransformation(extent={{100,20},{120,40}})));
        Modelica.Blocks.Sources.RealExpression yDamMea[5](y={vAV1.Dam.y,vAV2.Dam.y,
              vAV3.Dam.y,vAV4.Dam.y,vAV5.Dam.y})
          annotation (Placement(transformation(extent={{170,44},{190,64}}),
              iconTransformation(extent={{100,70},{120,90}})));
        Modelica.Blocks.Interfaces.RealOutput yReaHea[5]
          "Control signal for terminal box reheat"
          annotation (Placement(transformation(extent={{200,18},{220,38}}),
              iconTransformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Sources.RealExpression yReaValMea[5](y={vAV1.ReheaVal.y,vAV2.ReheaVal.y,
              vAV3.ReheaVal.y,vAV4.ReheaVal.y,vAV5.ReheaVal.y})
          annotation (Placement(transformation(extent={{170,18},{190,38}})));

        Modelica.Blocks.Sources.RealExpression TZonAir[5](y=vol.heatPort.T)
          annotation (Placement(transformation(extent={{170,70},{190,90}})));
        Devices.AirSide.Terminal.BaseClasses.VAV_advance_temp_sensor vAV2(
          zonNam="sou",
          redeclare package MediumAir = MediumAir,
          redeclare package MediumWat = MediumWat,
          mAirFloRat=mAirFloRat2,
          mWatFloRat=mWatFloRat2,
          PreDroAir=PreDroAir2,
          PreDroWat=PreDroWat2,
          eps=eps2) annotation (Placement(transformation(extent={{30,-2},{50,18}})));
        Devices.AirSide.Terminal.BaseClasses.VAV_advance_temp_sensor vAV3(
          zonNam="eas",
          redeclare package MediumAir = MediumAir,
          redeclare package MediumWat = MediumWat,
          mAirFloRat=mAirFloRat3,
          mWatFloRat=mWatFloRat3,
          PreDroAir=PreDroAir3,
          PreDroWat=PreDroWat3,
          eps=eps3) annotation (Placement(transformation(extent={{72,-2},{92,18}})));
        Devices.AirSide.Terminal.BaseClasses.VAV_advance_temp_sensor vAV4(
          zonNam="nor",
          redeclare package MediumAir = MediumAir,
          redeclare package MediumWat = MediumWat,
          mAirFloRat=mAirFloRat4,
          mWatFloRat=mWatFloRat4,
          PreDroAir=PreDroAir4,
          PreDroWat=PreDroWat4,
          eps=eps4) annotation (Placement(transformation(extent={{118,-2},{138,18}})));
        Devices.AirSide.Terminal.BaseClasses.VAV_advance_temp_sensor vAV5(
          zonNam="wes",
          redeclare package MediumAir = MediumAir,
          redeclare package MediumWat = MediumWat,
          mAirFloRat=mAirFloRat5,
          mWatFloRat=mWatFloRat5,
          PreDroAir=PreDroAir5,
          PreDroWat=PreDroWat5,
          eps=eps5) annotation (Placement(transformation(extent={{158,-2},{178,18}})));

        Modelica.Blocks.Interfaces.RealInput yCoo[5]
          "Cooling PID signal measurement"
          annotation (Placement(transformation(extent={{-120,16},{-100,36}})));
        Modelica.Blocks.Interfaces.RealInput yHea[5]
          "Heating PID signal measurement"
          annotation (Placement(transformation(extent={{-120,-4},{-100,16}})));
        Modelica.Blocks.Sources.RealExpression Vflow_setMea[5](y={vAV1.AirFlowRatSetPoi
              *vAV1.mAirFloRat/1.2,vAV2.AirFlowRatSetPoi*vAV2.mAirFloRat/1.2,
              vAV3.AirFlowRatSetPoi*vAV3.mAirFloRat/1.2,vAV4.AirFlowRatSetPoi*
              vAV4.mAirFloRat/1.2,vAV5.AirFlowRatSetPoi*vAV5.mAirFloRat/1.2})
          "VAV terminal airflow setpoint measurement"
          annotation (Placement(transformation(extent={{170,-50},{190,-30}})));
        Modelica.Blocks.Interfaces.RealOutput Vflow_set[5]
          "VAV terminal airflow setpoint" annotation (Placement(transformation(
                extent={{200,-50},{220,-30}}), iconTransformation(extent={{100,
                  -40},{120,-20}})));
        Modelica.Blocks.Sources.RealExpression Vflow_Mea[5](y={vAV1.masFloRat.m_flow
              /1.2,vAV2.masFloRat.m_flow/1.2,vAV3.masFloRat.m_flow/1.2,vAV4.masFloRat.m_flow
              /1.2,vAV5.masFloRat.m_flow/1.2})
          "VAV terminal airflow measurement"
          annotation (Placement(transformation(extent={{170,-70},{190,-50}})));
        Modelica.Blocks.Interfaces.RealOutput Vflow[5] "VAV terminal airflow"
          annotation (Placement(transformation(extent={{200,-70},{220,-50}}),
              iconTransformation(extent={{100,-70},{120,-50}})));
        Modelica.Blocks.Interfaces.RealOutput TSup[5]
          "VAV supply air temperature" annotation (Placement(transformation(
                extent={{200,-94},{220,-74}}), iconTransformation(extent={{100,
                  80},{120,100}})));
        Modelica.Blocks.Sources.RealExpression TSupMea[5](y={vAV1.TAirLea,vAV2.TAirLea,
              vAV3.TAirLea,vAV4.TAirLea,vAV5.TAirLea})
          annotation (Placement(transformation(extent={{170,-94},{190,-74}})));
      equation

        connect(fixedHeatFlow.port, vol.heatPort) annotation (Line(points={{-20,-80},{
                30,-80},{30,-60},{70,-60}},
                                          color={191,0,0}));
        connect(fixedHeatFlow.Q_flow, Q_flow)
          annotation (Line(points={{-40,-80},{-110,-80}}, color={0,0,127},
            pattern=LinePattern.Dash));

        connect(vAV1.port_b, vol[1].ports[1])
                                             annotation (Line(points={{10,8},{14,8},{14,
                -78},{76,-78},{76,-74},{76.4,-74},{76.4,-70}},
                                               color={0,140,72},
            thickness=0.5,
            pattern=LinePattern.Dash));
        connect(vAV2.port_b, vol[2].ports[1])
                                             annotation (Line(points={{50,8},{60,8},{60,
                -78},{76,-78},{76,-74},{76.4,-74},{76.4,-70}},
                                               color={0,140,72},
            thickness=0.5,      pattern=LinePattern.Dash));
        connect(vAV3.port_b, vol[3].ports[1])
                                             annotation (Line(points={{92,8},{100,8},{
                100,-78},{80,-78},{80,-70},{76.4,-70}},
                                               color={0,140,72},
            thickness=0.5,      pattern=LinePattern.Dash));
        connect(vAV4.port_b, vol[4].ports[1])
                                             annotation (Line(points={{138,8},{150,8},
                {150,-78},{80,-78},{80,-70},{76.4,-70}},
                                               color={0,140,72},
            thickness=0.5,      pattern=LinePattern.Dash));
        connect(vAV5.port_b, vol[5].ports[1])
                                             annotation (Line(points={{178,8},{188,8},
                {188,-78},{80,-78},{80,-70},{76.4,-70}},
                                               color={0,140,72},
            thickness=0.5,      pattern=LinePattern.Dash));

        for i in 1:5 loop
          connect(temZon[i].port_b, AirNetWor.ports_a[i]);
          connect(temZon[i].port_a, vol[i].ports[2]);
        end for;

        connect(ReheatWatNet.port_b, port_b_Wat) annotation (Line(points={{-76,57.2},{
                -74,57.2},{-74,72},{40,72},{40,100}},
                                               color={255,0,0},
            thickness=1));
        connect(ReheatWatNet.port_a, port_a_Wat) annotation (Line(points={{-76,40.2},{-76,40.2},{-76,40},{-82,40},{-82,76},
                {-40,76},{-40,100}},                             color={255,0,0},
            thickness=1));
        connect(AirNetWor.port_a, port_a_Air)
          annotation (Line(points={{-74,-28.2},{-88,-28.2},{-88,40},{-100,40}}, color={0,140,72},
            thickness=0.5));

        connect(AirNetWor.port_b, port_b_Air)
          annotation (Line(points={{-74,-45.2},{-80,-45.2},{-80,-60},{-100,-60}}, color={0,140,72},
            thickness=0.5));

        connect(AirNetWor.p, pre) annotation (Line(
            points={{-42.5,-35},{-8,-35},{-8,-12},{210,-12}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(TZonAir.y, TZon) annotation (Line(
            points={{191,80},{210,80}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(On[2], vAV2.On) annotation (Line(points={{-110,-16},{18,-16},{
                18,0},{29,0}},
                     color={255,0,255}));
        connect(On[3], vAV3.On) annotation (Line(points={{-110,-12},{-72,-12},{
                -72,-8},{56,-8},{56,0},{71,0}},
                                    color={255,0,255}));
        connect(On[4], vAV4.On) annotation (Line(points={{-110,-8},{-72,-8},{
                -72,-10},{100,-10},{100,0},{117,0}},
                                       color={255,0,255}));
        connect(On[5], vAV5.On) annotation (Line(points={{-110,-4},{-72,-4},{
                -72,-10},{148,-10},{148,0},{157,0}},
                                       color={255,0,255}));
        connect(On[1], vAV1.On) annotation (Line(points={{-110,-20},{-72,-20},{
                -72,0},{-11,0}},
                     color={255,0,255}));
        connect(yVal[1], vAV1.yVal) annotation (Line(points={{-110,52},{-34,52},{-34,12},
                {-11,12}}, color={0,0,127}));
        connect(yVal[2], vAV2.yVal) annotation (Line(points={{-110,56},{20,56},{20,12},
                {29,12}}, color={0,0,127}));
        connect(yVal[3], vAV3.yVal) annotation (Line(points={{-110,60},{64,60},{64,12},
                {71,12}}, color={0,0,127}));
        connect(yVal[4], vAV4.yVal) annotation (Line(points={{-110,64},{110,64},{110,12},
                {117,12}}, color={0,0,127}));
        connect(yVal[5], vAV5.yVal) annotation (Line(points={{-110,68},{-4,68},{-4,62},
                {150,62},{150,12},{157,12}}, color={0,0,127}));
        connect(AirFlowRatSetPoi[1], vAV1.AirFlowRatSetPoi) annotation (Line(points={{
                -110,78},{-30,78},{-30,16},{-11,16}}, color={0,0,127}));
        connect(AirFlowRatSetPoi[2], vAV2.AirFlowRatSetPoi) annotation (Line(points={{
                -110,82},{18,82},{18,16},{29,16}}, color={0,0,127}));
        connect(AirFlowRatSetPoi[3], vAV3.AirFlowRatSetPoi) annotation (Line(points={{
                -110,86},{62,86},{62,16},{71,16}}, color={0,0,127}));
        connect(AirFlowRatSetPoi[4], vAV4.AirFlowRatSetPoi) annotation (Line(points={{
                -110,90},{108,90},{108,16},{117,16}}, color={0,0,127}));
        connect(AirFlowRatSetPoi[5], vAV5.AirFlowRatSetPoi) annotation (Line(points={{
                -110,94},{148,94},{148,16},{157,16}}, color={0,0,127}));
        connect(vAV1.port_a_Wat, ReheatWatNet.ports_b[1]) annotation (Line(
            points={{-8,18},{-10,18},{-10,44.62},{-46,44.62}},
            color={238,46,47},
            thickness=0.5));
        connect(vAV2.port_a_Wat, ReheatWatNet.ports_b[2]) annotation (Line(
            points={{32,18},{32,38},{-46,38},{-46,41.9}},
            color={238,46,47},
            thickness=0.5));
        connect(vAV3.port_a_Wat, ReheatWatNet.ports_b[3]) annotation (Line(
            points={{74,18},{74,32},{-46,32},{-46,39.18}},
            color={238,46,47},
            thickness=0.5));
        connect(vAV4.port_a_Wat, ReheatWatNet.ports_b[4]) annotation (Line(
            points={{120,18},{118,18},{118,36.46},{-46,36.46}},
            color={238,46,47},
            thickness=0.5));
        connect(vAV5.port_a_Wat, ReheatWatNet.ports_b[5]) annotation (Line(
            points={{160,18},{162,18},{162,33.74},{-46,33.74}},
            color={238,46,47},
            thickness=0.5));
        connect(vAV1.port_b_Wat, ReheatWatNet.ports_a[1]) annotation (Line(
            points={{-2,18},{-2,62.98},{-46,62.98}},
            color={238,46,47},
            thickness=0.5,
            pattern=LinePattern.Dash));
        connect(vAV2.port_b_Wat, ReheatWatNet.ports_a[2]) annotation (Line(
            points={{38,18},{40,18},{40,60.26},{-46,60.26}},
            color={238,46,47},
            thickness=0.5,
            pattern=LinePattern.Dash));
        connect(vAV3.port_b_Wat, ReheatWatNet.ports_a[3]) annotation (Line(
            points={{80,18},{80,54},{-46,54},{-46,57.54}},
            color={238,46,47},
            thickness=0.5,
            pattern=LinePattern.Dash));
        connect(vAV4.port_b_Wat, ReheatWatNet.ports_a[4]) annotation (Line(
            points={{126,18},{126,54.82},{-46,54.82}},
            color={238,46,47},
            thickness=0.5,
            pattern=LinePattern.Dash));
        connect(vAV5.port_b_Wat, ReheatWatNet.ports_a[5]) annotation (Line(
            points={{166,18},{166,52},{-46,52},{-46,52.1}},
            color={238,46,47},
            thickness=0.5,
            pattern=LinePattern.Dash));
        connect(vAV1.port_a, AirNetWor.ports_b[1]) annotation (Line(
            points={{-10,8},{-28,8},{-28,-32.62},{-44,-32.62}},
            color={0,127,0},
            thickness=0.5));
        connect(vAV2.port_a, AirNetWor.ports_b[2]) annotation (Line(
            points={{30,8},{16,8},{16,-30},{-16,-30},{-16,-29.9},{-44,-29.9}},
            color={0,127,0},
            thickness=0.5));
        connect(vAV3.port_a, AirNetWor.ports_b[3]) annotation (Line(
            points={{72,8},{58,8},{58,-28},{-44,-28},{-44,-27.18}},
            color={0,127,0},
            thickness=0.5));
        connect(vAV4.port_a, AirNetWor.ports_b[4]) annotation (Line(
            points={{118,8},{108,8},{108,-24.46},{-44,-24.46}},
            color={0,127,0},
            thickness=0.5));
        connect(vAV5.port_a, AirNetWor.ports_b[5]) annotation (Line(
            points={{158,8},{146,8},{146,-21.74},{-44,-21.74}},
            color={0,127,0},
            thickness=0.5));

        connect(yDamMea.y, yDam) annotation (Line(points={{191,54},{210,54}},
                          color={0,0,127}));
        connect(yReaValMea.y, yReaHea)
          annotation (Line(points={{191,28},{210,28}}, color={0,0,127}));
        connect(Vflow_setMea.y, Vflow_set)
          annotation (Line(points={{191,-40},{210,-40}}, color={0,0,127}));
        connect(Vflow_Mea.y, Vflow)
          annotation (Line(points={{191,-60},{210,-60}}, color={0,0,127}));
        connect(TSupMea.y, TSup)
          annotation (Line(points={{191,-84},{210,-84}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Line(points={{-90,40},{80,40}}, color={0,127,255}),
              Line(points={{-90,-60},{80,-60}}, color={0,127,255}),
              Line(points={{80,40},{80,-60}}, color={0,127,255}),
              Line(points={{50,40},{50,-60}}, color={0,127,255}),
              Line(points={{20,40},{20,-60}}, color={0,127,255}),
              Line(points={{-10,40},{-10,-60}}, color={0,127,255}),
              Line(points={{-40,40},{-40,-60}}, color={0,127,255}),
              Rectangle(
                extent={{-46,0},{-34,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-16,0},{-4,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{14,0},{26,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{44,0},{56,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{74,0},{86,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-40,90},{-40,60}}, color={255,0,0}),
              Line(points={{-60,60},{-40,60}}, color={255,0,0}),
              Line(points={{-60,60},{-60,-12}}, color={255,0,0}),
              Line(points={{64,20},{-60,20}}, color={255,0,0}),
              Line(points={{-24,20},{-24,-12}}, color={255,0,0}),
              Line(points={{6,20},{6,-12}}, color={255,0,0}),
              Line(points={{36,20},{36,-12}}, color={255,0,0}),
              Line(points={{64,20},{64,-12}}, color={255,0,0}),
              Line(points={{-60,-12},{-46,-12}}, color={255,0,0}),
              Line(points={{-24,-12},{-16,-12}}, color={255,0,0}),
              Line(points={{6,-12},{14,-12}}, color={255,0,0}),
              Line(points={{36,-12},{44,-12}}, color={255,0,0}),
              Line(points={{64,-12},{74,-12}}, color={255,0,0}),
              Line(points={{90,-32},{-36,-32}}, color={255,0,0}),
              Line(points={{-36,-20},{-36,-32}}, color={255,0,0}),
              Line(points={{-6,-20},{-6,-32}}, color={255,0,0}),
              Line(points={{24,-20},{24,-32}}, color={255,0,0}),
              Line(points={{54,-20},{54,-32}}, color={255,0,0}),
              Line(points={{84,-20},{84,-32}}, color={255,0,0}),
              Line(points={{90,60},{90,-32}}, color={255,0,0}),
              Line(points={{40,60},{90,60}}, color={255,0,0}),
              Line(points={{40,90},{40,60}}, color={255,0,0}),
              Text(
                extent={{-148,-110},{152,-70}},
                textColor={0,0,255},
                textString="%name")}),
                Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {200,100}})));
      end FivZonVAVNoVec;

      model FivZonVAVDX
        replaceable package MediumAir = Modelica.Media.Interfaces.PartialMedium
                                                                                "Medium for the air";

        parameter Modelica.Units.SI.Pressure PreAirDroMai1
          "Pressure drop 1 across the duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai2
          "Pressure drop 2 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai3
          "Pressure drop 3 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai4
          "Pressure drop 4 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroBra1
          "Pressure drop 1 across the duct branch 1";

        parameter Modelica.Units.SI.Pressure PreAirDroBra2
          "Pressure drop 1 across the duct branch 2";

        parameter Modelica.Units.SI.Pressure PreAirDroBra3
          "Pressure drop 1 across the duct branch 3";

        parameter Modelica.Units.SI.Pressure PreAirDroBra4
          "Pressure drop 1 across the duct branch 4";

        parameter Modelica.Units.SI.Pressure PreAirDroBra5
          "Pressure drop 1 across the duct branch 5";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat1
          "mass flow rate for vav 1";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat2
          "mass flow rate for vav 2";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat3
          "mass flow rate for vav 3";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat4
          "mass flow rate for vav 4";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat5
          "mass flow rate for vav 5";

        parameter Modelica.Units.SI.Pressure PreDroAir1
          "Pressure drop in the air side of vav 1";

        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal1
          "rated heat flow rate for heating of vav 1";

        parameter Modelica.Units.SI.Pressure PreDroAir2
          "Pressure drop in the air side of vav 2";

        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal2
          "rated heat flow rate for heating of vav 2";

        parameter Modelica.Units.SI.Pressure PreDroAir3
          "Pressure drop in the air side of vav 3";

        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal3
          "rated heat flow rate for heating of vav 3";

        parameter Modelica.Units.SI.Pressure PreDroAir4
          "Pressure drop in the air side of vav 4";

        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal4
          "rated heat flow rate for heating of vav 4";

        parameter Modelica.Units.SI.Pressure PreDroAir5
          "Pressure drop in the air side of vav 1";

        Modelica.Blocks.Sources.RealExpression realExpression[5](y=vol.heatPort.T)
          annotation (Placement(transformation(extent={{44,30},{64,50}})));
        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal5
          "rated heat flow rate for heating of vav 5";

        FivZonNetWor AirNetWor(
          redeclare package Medium = MediumAir,
          PreDroMai1=PreAirDroMai1,
          PreDroMai2=PreAirDroMai2,
          PreDroMai3=PreAirDroMai3,
          PreDroMai4=PreAirDroMai4,
          mFloRat1=mAirFloRat1,
          mFloRat2=mAirFloRat2,
          mFloRat3=mAirFloRat3,
          mFloRat4=mAirFloRat4,
          mFloRat5=mAirFloRat5,
          PreDroBra1=PreAirDroBra1,
          PreDroBra2=PreAirDroBra2,
          PreDroBra3=PreAirDroBra3,
          PreDroBra4=PreAirDroBra4,
          PreDroBra5=PreAirDroBra5) annotation (Placement(transformation(extent={{-74,-52},{-44,-18}})));
        Devices.AirSide.Terminal.BaseClasses.VAV_ele
                                         vAV_ele
                                            [5](redeclare package MediumAir =
              MediumAir,
          mAirFloRat={mAirFloRat1,mAirFloRat2,mAirFloRat3,mAirFloRat4,mAirFloRat5},
          PreDroAir={PreDroAir1,PreDroAir2,PreDroAir3,PreDroAir4,PreDroAir5},
          Q_flow_nominal={Q_flow_nominal1,Q_flow_nominal2,Q_flow_nominal3,Q_flow_nominal4,Q_flow_nominal5})
          annotation (Placement(transformation(extent={{20,-2},{40,18}})));
        Buildings.Fluid.MixingVolumes.MixingVolume vol[5](
          redeclare package Medium = MediumAir,
          nPorts=10,
          m_flow_nominal={mAirFloRat1,mAirFloRat2,mAirFloRat3,mAirFloRat4,mAirFloRat5},
          V=10)     annotation (Placement(transformation(extent={{20,-84},{40,-64}})));
        Buildings.HeatTransfer.Sources.PrescribedHeatFlow fixedHeatFlow[5]
          annotation (Placement(transformation(extent={{-40,-90},{-20,-70}})));
        Modelica.Blocks.Interfaces.RealInput Q_flow[5]
          annotation (Placement(transformation(extent={{-120,-90},{-100,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_Air(redeclare package
            Medium =
              MediumAir)
          "Second port, typically outlet"
          annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_Air(redeclare package
            Medium =
              MediumAir)
          "Second port, typically outlet"
          annotation (Placement(transformation(extent={{-110,-70},{-90,-50}})));
        Modelica.Blocks.Interfaces.RealInput AirFlowRatSetPoi[5]
          "Connector of setpoint input signal"
          annotation (Placement(transformation(extent={{-120,90},{-100,110}})));
        Modelica.Blocks.Interfaces.RealInput yVal[5]
          "Actuator position (0: closed, 1: open)"
          annotation (Placement(transformation(extent={{-120,50},{-100,70}})));
        Modelica.Blocks.Interfaces.BooleanInput On[5]
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Modelica.Fluid.Sensors.TemperatureTwoPort temZon[5](redeclare package
            Medium =                                                                   MediumAir)
          annotation (Placement(transformation(extent={{8,-56},{-12,-36}})));
        Modelica.Blocks.Interfaces.RealOutput pre "Pressure at port"
          annotation (Placement(transformation(extent={{100,-50},{120,-30}})));
        Modelica.Blocks.Interfaces.RealOutput TZon[5]
          "Temperature of the passing fluid"
          annotation (Placement(transformation(extent={{100,30},{120,50}})));
      equation

        connect(fixedHeatFlow.port, vol.heatPort) annotation (Line(points={{-20,-80},{
                0,-80},{0,-74},{20,-74}}, color={191,0,0}));
        connect(fixedHeatFlow.Q_flow, Q_flow)
          annotation (Line(points={{-40,-80},{-110,-80}}, color={0,0,127},
            pattern=LinePattern.Dash));
        connect(vAV_ele.port_a, AirNetWor.ports_b) annotation (Line(points={{20,8},{-20,8},{-20,-27.18},{-44,-27.18}}, color={0,127,255}));
          for i in 1:5 loop

          connect(vAV_ele[i].port_b, vol[i].ports[1]);
          connect(temZon[i].port_b, AirNetWor.ports_a[i]);
          connect(temZon[i].port_a, vol[i].ports[2]);
          end for;

        connect(AirNetWor.port_a, port_a_Air)
          annotation (Line(points={{-74,-28.2},{-88,-28.2},{-88,40},{-100,40}}, color={0,127,255}));
        connect(AirNetWor.port_b, port_b_Air)
          annotation (Line(points={{-74,-45.2},{-80,-45.2},{-80,-60},{-100,-60}}, color={0,127,255}));
        connect(vAV_ele.AirFlowRatSetPoi, AirFlowRatSetPoi)
          annotation (Line(
            points={{19,16},{-10,16},{-34,16},{-34,100},{-110,100}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(vAV_ele.yVal, yVal) annotation (Line(
            points={{19,12},{-40,12},{-40,60},{-110,60}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(vAV_ele.On, On) annotation (Line(
            points={{19,0},{6,0},{-10,0},{-110,0}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(AirNetWor.p, pre) annotation (Line(
            points={{-42.5,-35},{-8,-35},{-8,-20},{58,-20},{58,-40},{110,-40}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(realExpression.y, TZon) annotation (Line(
            points={{65,40},{65,40},{-2,40},{-2,-6},{78,-6},{78,40},{110,40}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Line(points={{-90,40},{80,40}}, color={0,127,255}),
              Line(points={{-90,-60},{80,-60}}, color={0,127,255}),
              Line(points={{80,40},{80,-60}}, color={0,127,255}),
              Line(points={{50,40},{50,-60}}, color={0,127,255}),
              Line(points={{20,40},{20,-60}}, color={0,127,255}),
              Line(points={{-10,40},{-10,-60}}, color={0,127,255}),
              Line(points={{-40,40},{-40,-60}}, color={0,127,255}),
              Rectangle(
                extent={{-46,0},{-34,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-16,0},{-4,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{14,0},{26,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{44,0},{56,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{74,0},{86,-20}},
                lineColor={28,108,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid)}),                      Diagram(coordinateSystem(preserveAspectRatio=false)));
      end FivZonVAVDX;

      package Examples
             extends Modelica.Icons.ExamplesPackage;
        model ThreZonNetWor
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
            package MediumAir = Buildings.Media.Air "Medium model";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat=1
            "mass flow rate for the first branch1";

          parameter Modelica.Units.SI.Pressure PreDroMai1=100
            "Pressure drop 1 across the duck";

          parameter Modelica.Units.SI.Pressure PreDroMai2=100
            "Pressure drop 2 across the main duct";

          parameter Modelica.Units.SI.Pressure PreDroBra=50
            "Pressure drop across the duct branch";

          BuildingControlEmulator.Subsystems.HydDisturbution.ThreZonNetWor fivZonNetWor(
                                                                                       redeclare
              package Medium =                                                                                    MediumAir,
            mFloRat1=mAirFloRat,
            mFloRat2=mAirFloRat,
            mFloRat3=mAirFloRat,
            PreDroMai1=PreDroMai1,
            PreDroMai2=PreDroMai2,
            PreDroBra1=PreDroBra,
            PreDroBra2=PreDroBra,
            PreDroBra3=PreDroBra)
            annotation (Placement(transformation(extent={{-52,-24},{-6,26}})));
          Buildings.Fluid.Sources.Boundary_pT sou(
            nPorts=1,
            p(displayUnit="Pa") = 100000 + PreDroMai1 + PreDroMai2 + PreDroBra + 200,
            redeclare package Medium = MediumAir)
            annotation (Placement(transformation(extent={{-100,18},{-80,38}})));
          Buildings.Fluid.Sources.Boundary_pT sin(
            nPorts=1,
            redeclare package Medium = MediumAir,
            p(displayUnit="Pa") = 100000,
            T=299.15) annotation (Placement(transformation(extent={{-100,-50},{-80,-30}})));
          Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val[3](redeclare
              package Medium =                                                                     MediumAir, m_flow_nominal=mAirFloRat,
            dpValve_nominal=200)
            annotation (Placement(transformation(extent={{30,30},{50,50}})));
          Modelica.Blocks.Sources.Ramp ramp[3](duration=86400, height=1) annotation (Placement(transformation(extent={{-100,70},{-80,90}})));
        equation
          connect(sou.ports[1], fivZonNetWor.port_a) annotation (Line(points={{-80,28},{-60,28},{-60,11},{-52,11}}, color={0,127,255}));
          connect(sin.ports[1], fivZonNetWor.port_b) annotation (Line(points={{-80,-40},{-60,-40},{-60,-14},{-52,-14}}, color={0,127,255}));
          connect(ramp.y, val.y) annotation (Line(points={{-79,80},{-20,80},{40,80},{40,52}}, color={0,0,127}));
          connect(fivZonNetWor.ports_b[1], val[1].port_a);

          for i in 1:3 loop
           connect(val[i].port_b, fivZonNetWor.ports_a[i]);
           connect(fivZonNetWor.ports_b[i], val[i].port_a);
          end for;

          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400));
        end ThreZonNetWor;

        model FivZonNetWor
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
            package MediumAir = Buildings.Media.Air "Medium model";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat=1
            "mass flow rate for the first branch1";

          parameter Modelica.Units.SI.Pressure PreDroMai1=100
            "Pressure drop 1 across the duck";

          parameter Modelica.Units.SI.Pressure PreDroMai2=100
            "Pressure drop 2 across the main duct";

          parameter Modelica.Units.SI.Pressure PreDroMai3=100
            "Pressure drop 3 across the main duct";

          parameter Modelica.Units.SI.Pressure PreDroMai4=100
            "Pressure drop 4 across the main duct";

          parameter Modelica.Units.SI.Pressure PreDroBra=50
            "Pressure drop across the duct branch";

          BuildingControlEmulator.Subsystems.HydDisturbution.FivZonNetWor fivZonNetWor(redeclare
              package Medium =                                                                                    MediumAir,
            mFloRat1=mAirFloRat,
            mFloRat2=mAirFloRat,
            mFloRat3=mAirFloRat,
            mFloRat4=mAirFloRat,
            mFloRat5=mAirFloRat,
            PreDroMai1=PreDroMai1,
            PreDroMai2=PreDroMai2,
            PreDroMai3=PreDroMai3,
            PreDroMai4=PreDroMai4,
            PreDroBra1=PreDroBra,
            PreDroBra2=PreDroBra,
            PreDroBra3=PreDroBra,
            PreDroBra4=PreDroBra,
            PreDroBra5=PreDroBra)
            annotation (Placement(transformation(extent={{-52,-24},{-6,26}})));
          Buildings.Fluid.Sources.Boundary_pT sou(
            nPorts=1,
            p(displayUnit="Pa") = 100000 + PreDroMai1 + PreDroMai2 + PreDroMai3 + PreDroMai4 + PreDroBra + 200,
            redeclare package Medium = MediumAir)
            annotation (Placement(transformation(extent={{-100,18},{-80,38}})));

          Buildings.Fluid.Sources.Boundary_pT sin(
            nPorts=1,
            redeclare package Medium = MediumAir,
            p(displayUnit="Pa") = 100000,
            T=299.15) annotation (Placement(transformation(extent={{-100,-50},{-80,-30}})));

          Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val[5](redeclare
              package Medium =                                                                     MediumAir, m_flow_nominal=mAirFloRat,
            dpValve_nominal=200)
            annotation (Placement(transformation(extent={{30,30},{50,50}})));
          Modelica.Blocks.Sources.Ramp ramp[5](duration=86400, height=1) annotation (Placement(transformation(extent={{-100,70},{-80,90}})));
        equation
          connect(sou.ports[1], fivZonNetWor.port_a) annotation (Line(points={{-80,28},{-60,28},{-60,11},{-52,11}}, color={0,127,255}));
          connect(sin.ports[1], fivZonNetWor.port_b) annotation (Line(points={{-80,-40},{-60,-40},{-60,-14},{-52,-14}}, color={0,127,255}));
          connect(ramp.y, val.y) annotation (Line(points={{-79,80},{-20,80},{40,80},{40,52}}, color={0,0,127}));
          connect(fivZonNetWor.ports_b[1], val[1].port_a);

          for i in 1:5 loop
           connect(val[i].port_b, fivZonNetWor.ports_a[i]);
           connect(fivZonNetWor.ports_b[i], val[i].port_a);
          end for;

          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400));
        end FivZonNetWor;

        model FivZonNetWorwithCon
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
            package MediumAir = Buildings.Media.Air "Medium model";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat=1
            "mass flow rate for the first branch1";

          parameter Modelica.Units.SI.Pressure PreDroMai1=100
            "Pressure drop 1 across the duck";

          parameter Modelica.Units.SI.Pressure PreDroMai2=100
            "Pressure drop 2 across the main duct";

          parameter Modelica.Units.SI.Pressure PreDroMai3=100
            "Pressure drop 3 across the main duct";

          parameter Modelica.Units.SI.Pressure PreDroMai4=100
            "Pressure drop 4 across the main duct";

          parameter Modelica.Units.SI.Pressure PreDroBra=50
            "Pressure drop across the duct branch";

          parameter Real load[:] = {10,2,4,5,9};

          BuildingControlEmulator.Subsystems.HydDisturbution.FivZonNetWor fivZonNetWor(redeclare
              package Medium = MediumAir,
            mFloRat1=mAirFloRat,
            mFloRat2=mAirFloRat,
            mFloRat3=mAirFloRat,
            mFloRat4=mAirFloRat,
            mFloRat5=mAirFloRat,
            PreDroMai1=PreDroMai1,
            PreDroMai2=PreDroMai2,
            PreDroMai3=PreDroMai3,
            PreDroMai4=PreDroMai4,
            PreDroBra1=PreDroBra,
            PreDroBra2=PreDroBra,
            PreDroBra3=PreDroBra,
            PreDroBra4=PreDroBra,
            PreDroBra5=PreDroBra)
            annotation (Placement(transformation(extent={{-52,-24},{-6,26}})));
          Buildings.Fluid.Sources.Boundary_pT sou(
            nPorts=1,
            p(displayUnit="Pa") = 100000 + PreDroMai1 + PreDroMai2 + PreDroMai3 + PreDroMai4 + PreDroBra + 200,
            redeclare package Medium = MediumAir,
            T=278.15)
            annotation (Placement(transformation(extent={{-100,18},{-80,38}})));

          Buildings.Fluid.Sources.Boundary_pT sin(
            nPorts=1,
            redeclare package Medium = MediumAir,
            p(displayUnit="Pa") = 100000,
            T=299.15) annotation (Placement(transformation(extent={{-100,-50},{-80,-30}})));

          Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val[5](redeclare
              package Medium =                                                                     MediumAir, m_flow_nominal=mAirFloRat,
            dpValve_nominal=200)
            annotation (Placement(transformation(extent={{30,32},{50,52}})));
          Modelica.Blocks.Sources.Ramp ramp[5](duration=86400, height=1) annotation (Placement(transformation(extent={{-100,70},{-80,90}})));
          Buildings.Fluid.MixingVolumes.MixingVolume vol[5](
            redeclare package Medium = MediumAir,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            m_flow_nominal=mAirFloRat,
            V=10,
            nPorts=5) annotation (Placement(transformation(extent={{32,-48},{52,-28}})));
          Modelica.Blocks.Sources.Ramp ramp1[5](duration=86400, height=load*100)
                                                                         annotation (Placement(transformation(extent={{-80,-90},
                    {-60,-70}})));
          Buildings.HeatTransfer.Sources.PrescribedHeatFlow fixedHeatFlow[5]
            annotation (Placement(transformation(extent={{-30,-90},{-10,-70}})));
        equation
          connect(sou.ports[1], fivZonNetWor.port_a) annotation (Line(points={{-80,28},{-60,28},{-60,11},{-52,11}}, color={0,127,255}));
          connect(sin.ports[1], fivZonNetWor.port_b) annotation (Line(points={{-80,-40},{-60,-40},{-60,-14},{-52,-14}}, color={0,127,255}));
          connect(ramp.y, val.y) annotation (Line(points={{-79,80},{-20,80},{40,80},{40,
                  54}},                                                                       color={0,0,127}));
          connect(fivZonNetWor.ports_b[1], val[1].port_a);

          for i in 1:5 loop
           connect(fivZonNetWor.ports_a[i], vol[i].ports[1]);
           connect(val[i].port_b, vol[i].ports[2]);
           connect(fivZonNetWor.ports_b[i], val[i].port_a);
          end for;

          connect(fixedHeatFlow.port, vol.heatPort) annotation (Line(points={{-10,-80},{
                  20,-80},{20,-38},{32,-38}}, color={191,0,0}));
          connect(fixedHeatFlow.Q_flow, ramp1.y)
            annotation (Line(points={{-30,-80},{-59,-80}},           color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400));
        end FivZonNetWorwithCon;

        model FivZonVAV
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
            package MediumAir = Buildings.Media.Air "Medium model for air";

            package MediumWat = Buildings.Media.Water "Medium model for water";

          parameter Modelica.Units.SI.Pressure PreAirDroMai1=140
            "Pressure drop 1 across the duct";

          parameter Modelica.Units.SI.Pressure PreAirDroMai2=140
            "Pressure drop 2 across the main duct";

          parameter Modelica.Units.SI.Pressure PreAirDroMai3=120
            "Pressure drop 3 across the main duct";

          parameter Modelica.Units.SI.Pressure PreAirDroMai4=152
            "Pressure drop 4 across the main duct";

          parameter Modelica.Units.SI.Pressure PreAirDroBra1=0
            "Pressure drop 1 across the duct branch 1";

          parameter Modelica.Units.SI.Pressure PreAirDroBra2=0
            "Pressure drop 1 across the duct branch 2";

          parameter Modelica.Units.SI.Pressure PreAirDroBra3=0
            "Pressure drop 1 across the duct branch 3";

          parameter Modelica.Units.SI.Pressure PreAirDroBra4=0
            "Pressure drop 1 across the duct branch 4";

          parameter Modelica.Units.SI.Pressure PreAirDroBra5=0
            "Pressure drop 1 across the duct branch 5";

          parameter Modelica.Units.SI.Pressure PreWatDroMai1=79712*0.2
            "Pressure drop 1 across the pipe";

          parameter Modelica.Units.SI.Pressure PreWatDroMai2=79712*0.2
            "Pressure drop 2 across the main pipe";

          parameter Modelica.Units.SI.Pressure PreWatDroMai3=79712*0.2
            "Pressure drop 3 across the main pipe";

          parameter Modelica.Units.SI.Pressure PreWatDroMai4=79712*0.2
            "Pressure drop 4 across the main pipe";

          parameter Modelica.Units.SI.Pressure PreWatDroBra1=0
            "Pressure drop 1 across the pipe branch 1";

          parameter Modelica.Units.SI.Pressure PreWatDroBra2=0
            "Pressure drop 1 across the pipe branch 2";

          parameter Modelica.Units.SI.Pressure PreWatDroBra3=0
            "Pressure drop 1 across the pipe branch 3";

          parameter Modelica.Units.SI.Pressure PreWatDroBra4=0
            "Pressure drop 1 across the pipe branch 4";

          parameter Modelica.Units.SI.Pressure PreWatDroBra5=0
            "Pressure drop 1 across the pipe branch 5";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat1=10.92*1.2
            "mass flow rate for vav 1";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat2=2.25*1.2
            "mass flow rate for vav 2";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat3=1.49*1.2
            "mass flow rate for vav 3";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat4=1.9*1.2
            "mass flow rate for vav 4";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat5=1.73*1.2
            "mass flow rate for vav 5";

          parameter Modelica.Units.SI.MassFlowRate mWatFloRat1=mAirFloRat1*0.3*(35 -
              12.88)/4.2/20 "mass flow rate for vav 1";

          parameter Modelica.Units.SI.MassFlowRate mWatFloRat2=mAirFloRat2*0.3*(35 -
              12.88)/4.2/20 "mass flow rate for vav 2";

          parameter Modelica.Units.SI.MassFlowRate mWatFloRat3=mAirFloRat3*0.3*(35 -
              12.88)/4.2/20 "mass flow rate for vav 3";

          parameter Modelica.Units.SI.MassFlowRate mWatFloRat4=mAirFloRat4*0.3*(35 -
              12.88)/4.2/20 "mass flow rate for vav 4";

          parameter Modelica.Units.SI.MassFlowRate mWatFloRat5=mAirFloRat5*0.3*(35 -
              12.88)/4.2/20 "mass flow rate for vav 5";

          parameter Modelica.Units.SI.Pressure PreDroAir1=200
            "Pressure drop in the air side of vav 1";
          parameter Modelica.Units.SI.Pressure PreDroWat1=79712
            "Pressure drop in the water side of vav 1";
          parameter Modelica.Units.SI.Efficiency eps1(max=1) = 0.8
            "Heat exchanger effectiveness of vav 1";

          parameter Modelica.Units.SI.Pressure PreDroAir2=124
            "Pressure drop in the air side of vav 2";
          parameter Modelica.Units.SI.Pressure PreDroWat2=79712
            "Pressure drop in the water side of vav 2";
          parameter Modelica.Units.SI.Efficiency eps2(max=1) = 0.8
            "Heat exchanger effectiveness of vav 2";

          parameter Modelica.Units.SI.Pressure PreDroAir3=124
            "Pressure drop in the air side of vav 3";
          parameter Modelica.Units.SI.Pressure PreDroWat3=79712
            "Pressure drop in the water side of vav 3";
          parameter Modelica.Units.SI.Efficiency eps3(max=1) = 0.8
            "Heat exchanger effectiveness of vav 1";

          parameter Modelica.Units.SI.Pressure PreDroAir4=124
            "Pressure drop in the air side of vav 4";
          parameter Modelica.Units.SI.Pressure PreDroWat4=79712
            "Pressure drop in the water side of vav 4";
          parameter Modelica.Units.SI.Efficiency eps4(max=1) = 0.8
            "Heat exchanger effectiveness of vav 1";

          parameter Modelica.Units.SI.Pressure PreDroAir5=124
            "Pressure drop in the air side of vav 1";
          parameter Modelica.Units.SI.Pressure PreDroWat5=79712
            "Pressure drop in the water side of vav 1";
          parameter Modelica.Units.SI.Efficiency eps5(max=1) = 0.8
            "Heat exchanger effectiveness of vav 1";

          Buildings.Fluid.Sources.Boundary_pT souAir(
            p(displayUnit="Pa") = 100000 + PreAirDroMai1 + PreAirDroMai2 + PreAirDroMai3 + PreAirDroMai4 + PreAirDroBra5 + PreDroAir5,
            redeclare package Medium = MediumAir,
            nPorts=1,
            T=286.02) annotation (Placement(transformation(extent={{-100,18},{-80,38}})));

          Buildings.Fluid.Sources.Boundary_pT sinAir(
            redeclare package Medium = MediumAir,
            p(displayUnit="Pa") = 100000,
            nPorts=1,
            T=299.15) annotation (Placement(transformation(extent={{-100,-50},{-80,-30}})));

          Modelica.Blocks.Sources.Ramp ramp[5](duration=86400, height=1*1000*10)
                                                                         annotation (Placement(transformation(extent={{-100,-90},{-80,-70}})));
          BuildingControlEmulator.Subsystems.HydDisturbution.FivZonVAV fivZonVAV(
            vAV(pI(k=1, Ti=60)),
            redeclare package MediumAir = MediumAir,
            redeclare package MediumWat = MediumWat,
            PreAirDroMai1=PreAirDroMai1,
            PreAirDroMai2=PreAirDroMai2,
            PreAirDroMai3=PreAirDroMai3,
            PreAirDroMai4=PreAirDroMai4,
            PreAirDroBra1=PreAirDroBra1,
            PreAirDroBra2=PreAirDroBra2,
            PreAirDroBra3=PreAirDroBra3,
            PreAirDroBra4=PreAirDroBra4,
            PreAirDroBra5=PreAirDroBra5,
            PreWatDroMai1=PreWatDroMai1,
            PreWatDroMai2=PreWatDroMai2,
            PreWatDroMai3=PreWatDroMai3,
            PreWatDroMai4=PreWatDroMai4,
            PreWatDroBra1=PreWatDroBra1,
            PreWatDroBra2=PreWatDroBra2,
            PreWatDroBra3=PreWatDroBra3,
            PreWatDroBra4=PreWatDroBra4,
            PreWatDroBra5=PreWatDroBra5,
            mAirFloRat1=mAirFloRat1,
            mAirFloRat2=mAirFloRat2,
            mAirFloRat3=mAirFloRat3,
            mAirFloRat4=mAirFloRat4,
            mAirFloRat5=mAirFloRat5,
            mWatFloRat1=mWatFloRat1,
            mWatFloRat2=mWatFloRat2,
            mWatFloRat3=mWatFloRat3,
            mWatFloRat4=mWatFloRat4,
            mWatFloRat5=mWatFloRat5,
            PreDroAir1=PreDroAir1,
            PreDroWat1=PreDroWat1,
            eps1=eps1,
            PreDroAir2=PreDroAir2,
            PreDroWat2=PreDroWat2,
            eps2=eps2,
            PreDroAir3=PreDroAir3,
            PreDroWat3=PreDroWat3,
            eps3=eps3,
            PreDroAir4=PreDroAir4,
            PreDroWat4=PreDroWat4,
            eps4=eps4,
            PreDroAir5=PreDroAir5,
            PreDroWat5=PreDroWat5,
            eps5=eps5)
            annotation (Placement(transformation(extent={{-28,-28},{18,22}})));
          Buildings.Fluid.Sources.Boundary_pT souWat(
            p(displayUnit="Pa") = 100000 + PreWatDroMai1 + PreWatDroMai2 + PreWatDroMai3 + PreWatDroMai4 + PreWatDroBra5 + PreDroWat5,
            nPorts=1,
            redeclare package Medium = MediumWat,
            T=353.15) annotation (Placement(transformation(extent={{-60,70},{-40,90}})));
          Buildings.Fluid.Sources.Boundary_pT sinWat(
            p(displayUnit="Pa") = 100000,
            nPorts=1,
            redeclare package Medium = MediumWat,
            T=299.15) annotation (Placement(transformation(extent={{20,70},{0,90}})));
          Modelica.Blocks.Sources.BooleanExpression booleanExpression[5](y=true) annotation (Placement(transformation(extent={{-100,-26},{-80,-6}})));
          Modelica.Blocks.Sources.Ramp ramp1[
                                            5](duration=86400, height=1) annotation (Placement(transformation(extent={{-100,58},
                    {-80,78}})));
          Modelica.Blocks.Sources.Ramp ramp2[
                                            5](duration=86400,
            height=-1,
            offset=1)                                                    annotation (Placement(transformation(extent={{-72,-70},{-52,-50}})));
        equation

          connect(fivZonVAV.port_a_Air, souAir.ports[1]) annotation (Line(points={{-28,7},{-72,7},{-72,28},{-80,28}},   color={0,127,255}));
          connect(fivZonVAV.port_b_Air, sinAir.ports[1]) annotation (Line(points={{-28,-18},{-50,-18},{-72,-18},{-72,-40},{-80,-40}}, color={0,127,255}));
          connect(souWat.ports[1], fivZonVAV.port_a_Wat) annotation (Line(points={{-40,80},{-28,80},{-28,56},{-60,56},{-60,
                  22},{-14.2,22}},                                                                                                         color={0,127,255}));
          connect(sinWat.ports[1], fivZonVAV.port_b_Wat) annotation (Line(points={{0,80},{
                  -10,80},{-20,80},{-20,36},{4,36},{4,22},{4.2,22}},                                                                             color={0,127,255}));
          connect(ramp.y, fivZonVAV.Q_flow) annotation (Line(points={{-79,-80},{-60,-80},{-40,-80},{-40,-23},{-30.3,-23}}, color={0,0,127}));
          connect(booleanExpression.y, fivZonVAV.On) annotation (Line(points={{-79,-16},{-40,-16},{-40,-3},{-30.3,-3}}, color={255,0,255}));
          connect(ramp1.y, fivZonVAV.AirFlowRatSetPoi) annotation (Line(points={{-79,68},
                  {-50,68},{-50,22},{-30.3,22}},                                                                                          color={0,0,127}));
          connect(ramp2.y, fivZonVAV.yVal) annotation (Line(points={{-51,-60},{-24,-60},{-24,-34},{-52,-34},{-52,12},{-30.3,
                  12}},                                                                                                             color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=259200, __Dymola_Algorithm="Dassl"));
        end FivZonVAV;

        model FivZonVAVDX
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;

          extends Modelica.Icons.Example;

          package MediumAir = Buildings.Media.Air "Medium model for air";

          parameter Modelica.Units.SI.Pressure PreAirDroMai1=140
            "Pressure drop 1 across the duct";

          parameter Modelica.Units.SI.Pressure PreAirDroMai2=140
            "Pressure drop 2 across the main duct";

          parameter Modelica.Units.SI.Pressure PreAirDroMai3=120
            "Pressure drop 3 across the main duct";

          parameter Modelica.Units.SI.Pressure PreAirDroMai4=152
            "Pressure drop 4 across the main duct";

          parameter Modelica.Units.SI.Pressure PreAirDroBra1=0
            "Pressure drop 1 across the duct branch 1";

          parameter Modelica.Units.SI.Pressure PreAirDroBra2=0
            "Pressure drop 1 across the duct branch 2";

          parameter Modelica.Units.SI.Pressure PreAirDroBra3=0
            "Pressure drop 1 across the duct branch 3";

          parameter Modelica.Units.SI.Pressure PreAirDroBra4=0
            "Pressure drop 1 across the duct branch 4";

          parameter Modelica.Units.SI.Pressure PreAirDroBra5=0
            "Pressure drop 1 across the duct branch 5";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat1=10.92*1.2
            "mass flow rate for vav 1";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat2=2.25*1.2
            "mass flow rate for vav 2";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat3=1.49*1.2
            "mass flow rate for vav 3";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat4=1.9*1.2
            "mass flow rate for vav 4";

          parameter Modelica.Units.SI.MassFlowRate mAirFloRat5=1.73*1.2
            "mass flow rate for vav 5";

          parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal1=10.92*1000*20*1.2
            "rated heat flow rate for heating of vav 1";

          parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal2=2.25*1.2*1000*20
            "rated heat flow rate for heating of vav 2";

          parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal3=1.49*1.2*1000*20
            "rated heat flow rate for heating of vav 3";

          parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal4=1.9*1.2*1000*20
            "rated heat flow rate for heating of vav 4";

          parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal5=1.73*1.2*1000*20
            "rated heat flow rate for heating of vav 5";

          parameter Modelica.Units.SI.Pressure PreDroAir1=200
            "Pressure drop in the air side of vav 1";

          parameter Modelica.Units.SI.Pressure PreDroAir2=124
            "Pressure drop in the air side of vav 2";

          parameter Modelica.Units.SI.Pressure PreDroAir3=124
            "Pressure drop in the air side of vav 3";

          parameter Modelica.Units.SI.Pressure PreDroAir4=124
            "Pressure drop in the air side of vav 4";

          parameter Modelica.Units.SI.Pressure PreDroAir5=124
            "Pressure drop in the air side of vav 1";

          Buildings.Fluid.Sources.Boundary_pT souAir(
            p(displayUnit="Pa") = 100000 + PreAirDroMai1 + PreAirDroMai2 + PreAirDroMai3 + PreAirDroMai4 + PreAirDroBra5 + PreDroAir5,
            redeclare package Medium = MediumAir,
            nPorts=1,
            T=286.02) annotation (Placement(transformation(extent={{-88,30},{-68,50}})));

          Buildings.Fluid.Sources.Boundary_pT sinAir(
            redeclare package Medium = MediumAir,
            p(displayUnit="Pa") = 100000,
            nPorts=1,
            T=299.15) annotation (Placement(transformation(extent={{-88,-22},{-68,-2}})));

          Modelica.Blocks.Sources.Ramp ramp[5](duration=86400, height=1*1000*10)
                                                                         annotation (Placement(transformation(extent={{-88,-84},
                    {-68,-64}})));
          BuildingControlEmulator.Subsystems.HydDisturbution.FivZonVAVDX
                                                                       fivZonVAVDX(
                                                                                 redeclare
              package MediumAir =                                                                              MediumAir,
            PreAirDroMai1=PreAirDroMai1,
            PreAirDroMai2=PreAirDroMai2,
            PreAirDroMai3=PreAirDroMai3,
            PreAirDroMai4=PreAirDroMai4,
            PreAirDroBra1=PreAirDroBra1,
            PreAirDroBra2=PreAirDroBra2,
            PreAirDroBra3=PreAirDroBra3,
            PreAirDroBra4=PreAirDroBra4,
            PreAirDroBra5=PreAirDroBra5,
            mAirFloRat1=mAirFloRat1,
            mAirFloRat2=mAirFloRat2,
            mAirFloRat3=mAirFloRat3,
            mAirFloRat4=mAirFloRat4,
            mAirFloRat5=mAirFloRat5,
            PreDroAir1=PreDroAir1,
            Q_flow_nominal1=Q_flow_nominal1,
            PreDroAir2=PreDroAir2,
            Q_flow_nominal2=Q_flow_nominal2,
            PreDroAir3=PreDroAir3,
            Q_flow_nominal3=Q_flow_nominal3,
            PreDroAir4=PreDroAir4,
            Q_flow_nominal4=Q_flow_nominal4,
            PreDroAir5=PreDroAir5,
            Q_flow_nominal5=Q_flow_nominal5)                                     annotation (Placement(transformation(extent={{-14,-22},
                    {32,28}})));
          Modelica.Blocks.Sources.BooleanExpression booleanExpression[5](y=true) annotation (Placement(transformation(extent={{-86,-4},
                    {-66,16}})));
          Modelica.Blocks.Sources.Ramp ramp1[
                                            5](duration=86400,
            height=1,
            offset=0)                                                    annotation (Placement(transformation(extent={{-86,68},
                    {-66,88}})));
          Modelica.Blocks.Sources.Ramp ramp2[
                                            5](duration=86400,
            height=1,
            offset=0)                                                    annotation (Placement(transformation(extent={{-88,-54},
                    {-68,-34}})));
        equation

          connect(fivZonVAVDX.port_a_Air, souAir.ports[1]) annotation (Line(points={{-14,13},
                  {-58,13},{-58,40},{-68,40}},                                                                          color={0,127,255}));
          connect(fivZonVAVDX.port_b_Air, sinAir.ports[1]) annotation (Line(points={{-14,-12},
                  {-68,-12}},                                                                                                           color={0,127,255}));
          connect(ramp.y, fivZonVAVDX.Q_flow) annotation (Line(points={{-67,-74},{-26,
                  -74},{-26,-17},{-16.3,-17}},                                                                               color={0,0,127}));
          connect(booleanExpression.y, fivZonVAVDX.On) annotation (Line(points={{-65,6},
                  {-26,6},{-26,3},{-16.3,3}},                                                                             color={255,0,255}));
          connect(ramp1.y, fivZonVAVDX.AirFlowRatSetPoi)
            annotation (Line(points={{-65,78},{-36,78},{-36,28},{-16.3,28}},                   color={0,0,127}));
          connect(ramp2.y, fivZonVAVDX.yVal) annotation (Line(points={{-67,-44},{-38,
                  -44},{-38,18},{-16.3,18}},                                                                                        color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=259200, __Dymola_Algorithm="Dassl"));
        end FivZonVAVDX;
      end Examples;
    end HydDisturbution;

    package CoolingTower "This package contains the modules which can be used to simulate the cooling towers"

      model MultiCoolingTowers
        "This model is designed to simulate the cooling tower systwm with N towers"
        replaceable package MediumCW =
             Modelica.Media.Interfaces.PartialMedium
          "Medium in the  condenser water side";
        parameter Modelica.Units.SI.Power P_nominal[n]
          "Nominal cooling tower power (at y=1)";
        parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal
          "Temperature difference between the outlet and inlet of the tower ";
        parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal
          "Nominal approach temperature";
        parameter Modelica.Units.SI.Temperature TWetBul_nominal
          "Nominal wet bulb temperature";
        parameter Modelica.Units.SI.Pressure dP_nominal
          "Pressure difference between the outlet and inlet of the tower ";
        parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[n]
          "Nominal mass flow rate at condenser water wide";
        parameter Real GaiPi "Gain of the tower PI controller";
        parameter Real tIntPi "Integration time of the tower PI controller";
        parameter Real v_flow_rate[n,:] "Air volume flow rate ratio";
        parameter Real eta[n,:] "Fan efficiency";
        parameter Modelica.Units.SI.Temperature TCW_start
          "The start temperature of condenser water side";

        parameter Integer n
          "the number of cooling towers";
        Modelica.Fluid.Interfaces.FluidPort_a port_a_CW(redeclare package
            Medium =                                                               MediumCW)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_CW(redeclare package
            Medium =                                                               MediumCW)
          "Fluid connector b (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
        Modelica.Blocks.Interfaces.RealInput TWetBul
          "Entering air wet bulb temperature"
          annotation (Placement(transformation(extent={{-118,-69},{-100,-51}})));
        Modelica.Blocks.Interfaces.RealInput TCWSet
          "Temperature set point of the condenser water"
          annotation (Placement(transformation(extent={{-118,70},{-100,88}})));
        BuildingControlEmulator.Devices.WaterSide.VSDCoolingTower ct[n](
          redeclare package MediumCW = MediumCW,
          P_nominal=P_nominal,
          dTCW_nominal=dTCW_nominal,
          dTApp_nominal=dTApp_nominal,
          TWetBul_nominal=TWetBul_nominal,
          dP_nominal=dP_nominal,
          mCW_flow_nominal=mCW_flow_nominal,
          GaiPi=GaiPi,
          tIntPi=tIntPi,
          eta=eta,
          TCW_start=TCW_start,
          v_flow_rate=v_flow_rate,
          conPI(reverseActing=false))
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Modelica.Blocks.Interfaces.RealInput On[n]
          "Temperature set point of the condenser water"
          annotation (Placement(transformation(extent={{-118,30},{-100,48}})));
        Modelica.Blocks.Interfaces.RealOutput P[n]
          "Electric power consumed by compressor"
          annotation (Placement(transformation(extent={{100,30},{120,50}})));
      equation

        for i in 1:n loop
          connect(ct[i].port_a_CW, port_a_CW);
          connect(ct[i].port_b_CW, port_b_CW);
          connect(ct[i].TSet, TCWSet);
           connect(TWetBul, ct[i].TWetBul);
             connect(ct[i].P, P[i]);
        end for;

        connect(ct.On, On) annotation (Line(
            points={{-12,4},{-60,4},{-60,39},{-109,39}},
            color={0,0,127},
            pattern=LinePattern.Dash));

        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})),           Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
              Text(
                extent={{-44,-144},{50,-112}},
                lineColor={0,0,255},
                textString="%name"),
              Rectangle(
                extent={{-14,68},{14,40}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-10,76},{10,68}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-10,72},{-2,70}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{2,72},{10,70}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-8,60},{-10,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-8,60},{-6,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,60},{-2,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,60},{2,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{8,60},{6,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{8,60},{10,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Rectangle(
                extent={{-14,8},{14,-20}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-10,16},{10,8}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-10,12},{-2,10}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{2,12},{10,10}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-8,0},{-10,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-8,0},{-6,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,0},{-2,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,0},{2,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{8,0},{6,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{8,0},{10,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Rectangle(
                extent={{-14,-52},{14,-80}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-10,-44},{10,-52}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-10,-48},{-2,-50}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{2,-48},{10,-50}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-8,-60},{-10,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-8,-60},{-6,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,-60},{-2,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,-60},{2,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{8,-60},{6,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{8,-60},{10,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-100,0},{-40,0},{-40,60},{8,60}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-40,0},{8,0}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-40,0},{-40,-60},{8,-60}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{14,40},{40,40},{40,0},{90,0}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{14,-20},{40,-20},{40,0}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{14,-80},{40,-80},{40,-20}},
                color={0,0,255},
                smooth=Smooth.None)}),
          Documentation(revisions="<html>
<ul>
<li>
March 30, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
      end MultiCoolingTowers;

      model MultiHeterCoolingTowers
        "This model is designed to simulate the cooling tower systwm with N towers"
        replaceable package MediumCW =
             Modelica.Media.Interfaces.PartialMedium
          "Medium in the  condenser water side";
        parameter Modelica.Units.SI.Power P_nominal[n + m]
          "Nominal cooling tower power (at y=1)";
        parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal
          "Temperature difference between the outlet and inlet of the tower ";
        parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal
          "Nominal approach temperature";
        parameter Modelica.Units.SI.Temperature TWetBul_nominal
          "Nominal wet bulb temperature";
        parameter Modelica.Units.SI.Pressure dP_nominal
          "Pressure difference between the outlet and inlet of the tower ";
        parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[n + m]
          "Nominal mass flow rate at condenser water wide";
        parameter Real GaiPi "Gain of the tower PI controller";
        parameter Real tIntPi "Integration time of the tower PI controller";
        parameter Real v_flow_rate[n+m,:] "Air volume flow rate ratio";
        parameter Real eta[n+m,:] "Fan efficiency";
        parameter Modelica.Units.SI.Temperature TCW_start
          "The start temperature of condenser water side";

        parameter Integer n
          "the number of cooling tower group 1";
        parameter Integer m
          "the number of cooling tower group 2";

        Modelica.Fluid.Interfaces.FluidPort_a port_a_CW(redeclare package
            Medium =                                                               MediumCW)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_CW(redeclare package
            Medium =                                                               MediumCW)
          "Fluid connector b (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
        Modelica.Blocks.Interfaces.RealInput TWetBul
          "Entering air wet bulb temperature"
          annotation (Placement(transformation(extent={{-118,-69},{-100,-51}})));
        Modelica.Blocks.Interfaces.RealInput TCWSet
          "Temperature set point of the condenser water"
          annotation (Placement(transformation(extent={{-118,70},{-100,88}})));
        BuildingControlEmulator.Devices.WaterSide.VSDCoolingTower ct1[n](
          redeclare package MediumCW = MediumCW,
          P_nominal=P_nominal[1:n],
          dTCW_nominal=dTCW_nominal,
          dTApp_nominal=dTApp_nominal,
          TWetBul_nominal=TWetBul_nominal,
          dP_nominal=dP_nominal,
          mCW_flow_nominal=mCW_flow_nominal[1:n],
          GaiPi=GaiPi,
          tIntPi=tIntPi,
          eta=eta[1:n],
          TCW_start=TCW_start,
          v_flow_rate=v_flow_rate)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Modelica.Blocks.Interfaces.RealInput On[n+m]
          "Temperature set point of the condenser water"
          annotation (Placement(transformation(extent={{-118,30},{-100,48}})));
        Modelica.Blocks.Interfaces.RealOutput P[n+m]
          "Electric power consumed by compressor"
          annotation (Placement(transformation(extent={{100,30},{120,50}})));
        BuildingControlEmulator.Devices.WaterSide.VSDCoolingTower ct2[m](
          redeclare package MediumCW = MediumCW,
          P_nominal=P_nominal[n + 1:n + m],
          dTCW_nominal=dTCW_nominal,
          dTApp_nominal=dTApp_nominal,
          TWetBul_nominal=TWetBul_nominal,
          dP_nominal=dP_nominal,
          mCW_flow_nominal=mCW_flow_nominal[n + 1:n + m],
          GaiPi=GaiPi,
          tIntPi=tIntPi,
          eta=eta[n + 1:n + m],
          TCW_start=TCW_start,
          v_flow_rate=v_flow_rate)
          annotation (Placement(transformation(extent={{-10,30},{10,50}})));
      equation

        for i in 1:n loop
          connect(ct1[i].port_a_CW, port_a_CW);
          connect(ct1[i].port_b_CW, port_b_CW);
          connect(ct1[i].TSet, TCWSet);
          connect(TWetBul, ct1[i].TWetBul);
          connect(ct1[i].P, P[i]);
          connect(ct1[i].On, On[i]);
        end for;
        for i in 1:m loop
          connect(ct2[i].port_a_CW, port_a_CW);
          connect(ct2[i].port_b_CW, port_b_CW);
          connect(ct2[i].TSet, TCWSet);
          connect(TWetBul, ct2[i].TWetBul);
          connect(ct2[i].P, P[n+i]);
          connect(ct2[i].On, On[n+i]);
        end for;

        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})),           Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
              Text(
                extent={{-44,-144},{50,-112}},
                lineColor={0,0,255},
                textString="%name"),
              Rectangle(
                extent={{-14,68},{14,40}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-10,76},{10,68}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-10,72},{-2,70}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{2,72},{10,70}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-8,60},{-10,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-8,60},{-6,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,60},{-2,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,60},{2,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{8,60},{6,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{8,60},{10,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Rectangle(
                extent={{-14,8},{14,-20}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-10,16},{10,8}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-10,12},{-2,10}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{2,12},{10,10}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-8,0},{-10,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-8,0},{-6,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,0},{-2,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,0},{2,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{8,0},{6,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{8,0},{10,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Rectangle(
                extent={{-14,-52},{14,-80}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-10,-44},{10,-52}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-10,-48},{-2,-50}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{2,-48},{10,-50}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-8,-60},{-10,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-8,-60},{-6,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,-60},{-2,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,-60},{2,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{8,-60},{6,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{8,-60},{10,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-100,0},{-40,0},{-40,60},{8,60}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-40,0},{8,0}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-40,0},{-40,-60},{8,-60}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{14,40},{40,40},{40,0},{90,0}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{14,-20},{40,-20},{40,0}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{14,-80},{40,-80},{40,-20}},
                color={0,0,255},
                smooth=Smooth.None)}),
          Documentation(revisions="<html>
<ul>
<li>
March 30, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
      end MultiHeterCoolingTowers;

      model CoolingTowersWithBypass
        "This model is designed to simulate the cooling tower system with N way bypass valve"
        replaceable package MediumCW =
             Modelica.Media.Interfaces.PartialMedium
          "Medium condenser water side";
        parameter Modelica.Units.SI.Temperature TCWLowSet
          "The lower temperatre limit of condenser water entering the chiller plant";
        parameter Modelica.Units.SI.Power P_nominal[n] "Nominal tower power (at y=1)";
        parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal
          "Temperature difference between the outlet and inlet of the tower";
        parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal
          "Nominal approach temperature";
        parameter Modelica.Units.SI.Temperature TWetBul_nominal
          "Nominal wet bulb temperature";
        parameter Modelica.Units.SI.Pressure dP_nominal
          "Pressure difference between the outlet and inlet of the tower ";
        parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]
          "Nominal mass flow rate at condenser water wide";
        parameter Real v_flow_rate[n,:] "Air volume flow rate ratio";
        parameter Real eta[n,:] "Fan efficiency";
        parameter Modelica.Units.SI.Pressure dPByp_nominal
          "Pressure difference between the outlet and inlet of the bypass valve ";
        parameter Modelica.Units.SI.Temperature TCW_start
          "The start temperature of condenser water side";
        parameter Integer n
          "the number of cooling towers";
        replaceable
          BuildingControlEmulator.Subsystems.CoolingTower.MultiCoolingTowers mulCooTowSys(
          redeclare package MediumCW = MediumCW,
          P_nominal=P_nominal,
          dTCW_nominal=dTCW_nominal,
          dP_nominal=dP_nominal,
          mCW_flow_nominal=mCW_flow_nominal,
          v_flow_rate=v_flow_rate,
          TCW_start=TCW_start,
          dTApp_nominal=dTApp_nominal,
          TWetBul_nominal=TWetBul_nominal,
          eta=eta,
          n=n,
          GaiPi=1,
          tIntPi=60)
          annotation (Placement(transformation(extent={{-40,-40},{-20,-20}})));
        BuildingControlEmulator.Devices.WaterSide.Bypass byp(
          redeclare package MediumCW = MediumCW,
          dPByp_nominal=dPByp_nominal,
          m_flow_nominal=sum(mCW_flow_nominal))
          annotation (Placement(transformation(extent={{0,-20},{20,0}})));
        Modelica.Blocks.Interfaces.RealInput On[n] "On signal"
          annotation (Placement(transformation(extent={{-118,51},{-100,69}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
              MediumCW)
          annotation (Placement(transformation(extent={{90,50},{110,70}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
              MediumCW)
          annotation (Placement(transformation(extent={{90,-90},{110,-70}})));
        replaceable Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEntChi(
            redeclare package Medium = MediumCW,
          T_start=TCW_start,
          m_flow_nominal=sum(mCW_flow_nominal))
          annotation (Placement(transformation(extent={{60,-90},{80,-70}})));
        Modelica.Blocks.Interfaces.RealInput TWetBul
          "Entering air wet bulb temperature"
          annotation (Placement(transformation(extent={{-118,-69},{-100,-51}})));
        Modelica.Blocks.Interfaces.RealInput TCWSet
          "Temperature set point of the condenser water"
          annotation (Placement(transformation(extent={{-118,-9},{-100,9}})));

        Devices.Control.conPI conPI(k=1, Ti=60)
          annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=TCWLowSet)
                                                              annotation (Placement(transformation(extent={{-74,10},{-54,30}})));
        Modelica.Blocks.Sources.BooleanExpression realExpression1(y=true)
          annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
      equation
        connect(mulCooTowSys.port_b_CW, byp.port_a2) annotation (Line(
            points={{-20,-30},{-8,-30},{-8,-14},{0,-14}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(byp.port_b1, mulCooTowSys.port_a_CW) annotation (Line(
            points={{0,-6},{-60,-6},{-60,-30},{-40,-30}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(byp.port_a1, port_a) annotation (Line(
            points={{20,-6},{40,-6},{40,60},{100,60}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(byp.port_b2, senTCWEntChi.port_a) annotation (Line(
            points={{20,-14},{40,-14},{40,-80},{60,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(senTCWEntChi.port_b, port_b) annotation (Line(
            points={{80,-80},{100,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(mulCooTowSys.TWetBul, TWetBul) annotation (Line(
            points={{-40.9,-36},{-80,-36},{-80,-60},{-109,-60}},
            color={0,0,127},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(mulCooTowSys.TCWSet, TCWSet) annotation (Line(
            points={{-40.9,-22.1},{-72,-22.1},{-72,0},{-109,0}},
            color={0,0,127},
            smooth=Smooth.None,
            pattern=LinePattern.Dash));
        connect(conPI.y, byp.yBypVal) annotation (Line(
            points={{-19,50},{-8,50},{0,50},{0,22},{-20,22},{-20,-2},{-2,-2}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(senTCWEntChi.T, conPI.Mea) annotation (Line(
            points={{70,-69},{70,-69},{70,70},{-58,70},{-58,44},{-42,44}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(realExpression.y, conPI.SetPoi) annotation (Line(
            points={{-53,20},{-48,20},{-48,50},{-42,50}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(realExpression1.y, conPI.On) annotation (Line(
            points={{-59,80},{-50,80},{-50,56},{-42,56}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(On, mulCooTowSys.On) annotation (Line(
            points={{-109,60},{-94,60},{-80,60},{-80,-26.1},{-40.9,-26.1}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})),           Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
              Text(
                extent={{-42,-144},{52,-112}},
                lineColor={0,0,255},
                textString="%name"),
              Rectangle(
                extent={{-40,68},{-12,40}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-36,76},{-16,68}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-36,72},{-28,70}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-24,72},{-16,70}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-34,60},{-36,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-34,60},{-32,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-26,60},{-28,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-26,60},{-24,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-18,60},{-20,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-18,60},{-16,54}},
                color={255,0,0},
                smooth=Smooth.None),
              Rectangle(
                extent={{-40,8},{-12,-20}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-36,16},{-16,8}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-36,12},{-28,10}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-24,12},{-16,10}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-34,0},{-36,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-34,0},{-32,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-26,0},{-28,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-26,0},{-24,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-18,0},{-20,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-18,0},{-16,-6}},
                color={255,0,0},
                smooth=Smooth.None),
              Rectangle(
                extent={{-40,-52},{-12,-80}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-36,-44},{-16,-52}},
                lineColor={95,95,95},
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-36,-48},{-28,-50}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-24,-48},{-16,-50}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-34,-60},{-36,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-34,-60},{-32,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-26,-60},{-28,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-26,-60},{-24,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-18,-60},{-20,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-18,-60},{-16,-66}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{60,60},{60,-60}},
                color={0,0,255},
                smooth=Smooth.None),
              Polygon(
                points={{60,0},{50,10},{70,10},{60,0}},
                lineColor={0,0,0},
                smooth=Smooth.None,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{60,0},{50,-12},{70,-12},{60,0}},
                lineColor={0,0,0},
                smooth=Smooth.None,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{90,60},{100,60},{-34,60}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,60},{0,0},{-34,0}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{0,0},{0,-60},{-34,-60}},
                color={255,0,0},
                smooth=Smooth.None),
              Line(
                points={{-12,40},{10,40},{10,-80},{60,-80},{60,-60}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{100,-80},{60,-80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-12,-20},{10,-20}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-12,-80},{10,-80}},
                color={0,0,255},
                smooth=Smooth.None)}),
          Documentation(revisions="<html>
<ul>
<li>
March 30, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
      end CoolingTowersWithBypass;

      package Example "Test of the modules"
      extends Modelica.Icons.ExamplesPackage;
        model MultiCoolingTowers

          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.Power P_nominal[:]={30000 for i in linspace(
              1,
              3,
              3)} "Nominal power (at y=1)";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference between the outlet and inlet of the cooling tower";
          parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal=4.44
            "Nominal approach temperature";
          parameter Modelica.Units.SI.Temperature TWetBul_nominal=273.15 + 25
            "Nominal wet bulb temperature";
          parameter Modelica.Units.SI.Pressure dP_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={10 for i in
              linspace(
              1,
              3,
              3)} "Nominal mass flow rate at condenser water wide";
          parameter Real GaiPi=1 "Gain of the PI controller";
          parameter Real tIntPi=60 "Integration time of the PI controller";
          parameter Real v_flow_rate[3,:]={{0.3,0.6,1},{0.3,0.6,1},{0.3,0.6,1}} "Volume flow rate ratio";
          parameter Real eta[3,:]={{0.6,0.7,1},{0.6,0.7,1},{0.6,0.7,1}} "Fan efficiency";
          parameter Modelica.Units.SI.Pressure dPByp_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          BuildingControlEmulator.Subsystems.CoolingTower.MultiCoolingTowers
            cooTow(
            redeclare package MediumCW = MediumCW,
            P_nominal=P_nominal,
            dTCW_nominal=dTCW_nominal,
            dP_nominal=dP_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            GaiPi=GaiPi,
            tIntPi=tIntPi,
            v_flow_rate=v_flow_rate,
            TCW_start=273.15 + 29.44,
            dTApp_nominal=dTApp_nominal,
            TWetBul_nominal=TWetBul_nominal,
            eta=eta,
            n=3)
            annotation (Placement(transformation(extent={{-20,2},{0,22}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            use_T_in=true,
            redeclare package Medium = MediumCW,
            T=273.15 + 29.44,
            nPorts=1,
            use_m_flow_in=true) "Source for CW"
            annotation (Placement(transformation(extent={{40,14},{20,34}})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(redeclare package Medium =
                       MediumCW, nPorts=1) "Sink for CW" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={30,-70})));
          Modelica.Blocks.Sources.Constant TWetBul(k=273.15 + 20)   annotation (Placement(transformation(extent={{-80,-80},
                    {-60,-60}})));
          Modelica.Blocks.Sources.Constant TCWSet(k=273.15 + 29.44)
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
          Modelica.Blocks.Sources.Step OnA(
            offset=1,
            startTime=21600,
            height=0)
            annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
          Modelica.Blocks.Sources.Step OnB(
            height=-1,
            offset=1,
            startTime=43200)
            annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
          Modelica.Blocks.Sources.Step OnC(
            height=-1,
            offset=1,
            startTime=64800)
            annotation (Placement(transformation(extent={{80,40},{60,60}})));
          Modelica.Blocks.Sources.Sine TCWLeaChi(
            f=1/21600,
            amplitude=17.31,
            offset=273.15 + 17.31)
            annotation (Placement(transformation(extent={{80,-40},{60,-20}})));
          Modelica.Blocks.Sources.RealExpression mCHW_flow(y=(OnA.y + OnB.y + OnC.y)*mCW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,14},{60,34}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEntChi(
              redeclare package Medium = MediumCW, m_flow_nominal=sum(mCW_flow_nominal))
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={10,-30})));
        equation

          connect(TWetBul.y, cooTow.TWetBul) annotation (Line(
              points={{-59,-70},{-32,-70},{-32,6},{-20.9,6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWSet.y, cooTow.TCWSet) annotation (Line(
              points={{-59,-30},{-40,-30},{-40,19.9},{-20.9,19.9}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWLeaChi.y, souCW.T_in) annotation (Line(
              points={{59,-30},{50,-30},{50,28},{42,28}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mCHW_flow.y, souCW.m_flow_in) annotation (Line(
              points={{59,24},{50,24},{50,32},{42,32}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1],senTCWEntChi. port_b) annotation (Line(
              points={{20,-70},{10,-70},{10,-40}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(OnA.y, cooTow.On[1]) annotation (Line(
              points={{-59,10},{-44,10},{-44,15.3},{-20.9,15.3}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, cooTow.On[2]) annotation (Line(
              points={{-59,48},{-42,48},{-42,15.9},{-20.9,15.9}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnC.y, cooTow.On[3]) annotation (Line(
              points={{59,50},{14,50},{-32,50},{-32,16.5},{-20.9,16.5}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(cooTow.port_a_CW, souCW.ports[1]) annotation (Line(
              points={{-20,12},{-28,12},{-28,24},{10,24},{20,24}},
              color={0,127,255},
              thickness=1));
          connect(cooTow.port_b_CW, senTCWEntChi.port_a)
            annotation (Line(
              points={{0,12},{10,12},{10,-20}},
              color={0,127,255},
              thickness=1));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/CoolingTower/Example/CoolingTowerWithBypass.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end MultiCoolingTowers;

        model MultiCoolingHeterTowers

          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.Power P_nominal[:]={30000 for i in linspace(
              1,
              3,
              3)} "Nominal power (at y=1)";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference between the outlet and inlet of the cooling tower";
          parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal=4.44
            "Nominal approach temperature";
          parameter Modelica.Units.SI.Temperature TWetBul_nominal=273.15 + 25
            "Nominal wet bulb temperature";
          parameter Modelica.Units.SI.Pressure dP_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={10 for i in
              linspace(
              1,
              3,
              3)} "Nominal mass flow rate at condenser water wide";
          parameter Real GaiPi=1 "Gain of the PI controller";
          parameter Real tIntPi=60 "Integration time of the PI controller";
          parameter Real v_flow_rate[3,:]={{0.3,0.6,1},{0.3,0.6,1},{0.3,0.6,1}} "Volume flow rate ratio";
          parameter Real eta[3,:]={{0.6,0.7,1},{0.6,0.7,1},{0.6,0.7,1}} "Fan efficiency";
          parameter Modelica.Units.SI.Pressure dPByp_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          BuildingControlEmulator.Subsystems.CoolingTower.MultiHeterCoolingTowers
            cooTow(
            redeclare package MediumCW = MediumCW,
            P_nominal=P_nominal,
            dTCW_nominal=dTCW_nominal,
            dP_nominal=dP_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            GaiPi=GaiPi,
            tIntPi=tIntPi,
            v_flow_rate=v_flow_rate,
            TCW_start=273.15 + 29.44,
            dTApp_nominal=dTApp_nominal,
            TWetBul_nominal=TWetBul_nominal,
            eta=eta,
            n=1,
            m=2)
            annotation (Placement(transformation(extent={{-20,2},{0,22}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            use_T_in=true,
            redeclare package Medium = MediumCW,
            T=273.15 + 29.44,
            nPorts=1,
            use_m_flow_in=true) "Source for CW"
            annotation (Placement(transformation(extent={{40,14},{20,34}})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(redeclare package Medium =
                       MediumCW, nPorts=1) "Sink for CW" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={30,-70})));
          Modelica.Blocks.Sources.Constant TWetBul(k=273.15 + 20)   annotation (Placement(transformation(extent={{-80,-80},
                    {-60,-60}})));
          Modelica.Blocks.Sources.Constant TCWSet(k=273.15 + 29.44)
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
          Modelica.Blocks.Sources.Step OnA(
            offset=1,
            startTime=21600,
            height=0)
            annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
          Modelica.Blocks.Sources.Step OnB(
            height=-1,
            offset=1,
            startTime=43200)
            annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
          Modelica.Blocks.Sources.Step OnC(
            height=-1,
            offset=1,
            startTime=64800)
            annotation (Placement(transformation(extent={{80,40},{60,60}})));
          Modelica.Blocks.Sources.Sine TCWLeaChi(
            f=1/21600,
            amplitude=17.31,
            offset=273.15 + 17.31)
            annotation (Placement(transformation(extent={{80,-40},{60,-20}})));
          Modelica.Blocks.Sources.RealExpression mCHW_flow(y=(OnA.y + OnB.y + OnC.y)*mCW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,14},{60,34}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEntChi(
              redeclare package Medium = MediumCW, m_flow_nominal=sum(mCW_flow_nominal))
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={10,-30})));
        equation

          connect(TWetBul.y, cooTow.TWetBul) annotation (Line(
              points={{-59,-70},{-32,-70},{-32,6},{-20.9,6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWSet.y, cooTow.TCWSet) annotation (Line(
              points={{-59,-30},{-40,-30},{-40,19.9},{-20.9,19.9}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWLeaChi.y, souCW.T_in) annotation (Line(
              points={{59,-30},{50,-30},{50,28},{42,28}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mCHW_flow.y, souCW.m_flow_in) annotation (Line(
              points={{59,24},{50,24},{50,32},{42,32}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1],senTCWEntChi. port_b) annotation (Line(
              points={{20,-70},{10,-70},{10,-40}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(OnA.y, cooTow.On[1]) annotation (Line(
              points={{-59,10},{-44,10},{-44,15.3},{-20.9,15.3}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, cooTow.On[2]) annotation (Line(
              points={{-59,48},{-42,48},{-42,15.9},{-20.9,15.9}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnC.y, cooTow.On[3]) annotation (Line(
              points={{59,50},{14,50},{-32,50},{-32,16.5},{-20.9,16.5}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(cooTow.port_a_CW, souCW.ports[1]) annotation (Line(
              points={{-20,12},{-28,12},{-28,24},{10,24},{20,24}},
              color={0,127,255},
              thickness=1));
          connect(cooTow.port_b_CW, senTCWEntChi.port_a)
            annotation (Line(
              points={{0,12},{10,12},{10,-20}},
              color={0,127,255},
              thickness=1));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/CoolingTower/Example/CoolingTowerWithBypass.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end MultiCoolingHeterTowers;

        model CoolingTowersWithBypass

          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.Power P_nominal[:]={30000 for i in linspace(
              1,
              3,
              3)} "Nominal power (at y=1)";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference between the outlet and inlet of the cooling tower";
          parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal=4.44
            "Nominal approach temperature";
          parameter Modelica.Units.SI.Temperature TWetBul_nominal=273.15 + 25
            "Nominal wet bulb temperature";
          parameter Modelica.Units.SI.Pressure dP_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={10 for i in
              linspace(
              1,
              3,
              3)} "Nominal mass flow rate at condenser water wide";
          parameter Real GaiPi=1 "Gain of the PI controller";
          parameter Real tIntPi=60 "Integration time of the PI controller";
          parameter Real v_flow_rate[3,:]={{0.3,0.6,1},{0.3,0.6,1},{0.3,0.6,1}} "Volume flow rate ratio";
          parameter Real eta[3,:]={{0.6,0.7,1},{0.6,0.7,1},{0.6,0.7,1}} "Fan efficiency";
          parameter Modelica.Units.SI.Pressure dPByp_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          BuildingControlEmulator.Subsystems.CoolingTower.CoolingTowersWithBypass
            cooTow(
            redeclare package MediumCW = MediumCW,
            P_nominal=P_nominal,
            dTCW_nominal=dTCW_nominal,
            dP_nominal=dP_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            v_flow_rate=v_flow_rate,
            TCW_start=273.15 + 29.44,
            dTApp_nominal=dTApp_nominal,
            TWetBul_nominal=TWetBul_nominal,
            eta=eta,
            dPByp_nominal(displayUnit="Pa") = 1000,
            TCWLowSet=288.71,
            n=3)
            annotation (Placement(transformation(extent={{-20,2},{0,22}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            use_T_in=true,
            redeclare package Medium = MediumCW,
            T=273.15 + 29.44,
            nPorts=1,
            use_m_flow_in=true) "Source for CW"
            annotation (Placement(transformation(extent={{40,14},{20,34}})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(redeclare package Medium =
                       MediumCW, nPorts=1) "Sink for CW" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={30,-70})));
          Modelica.Blocks.Sources.Constant TWetBul(k=273.15 + 20)   annotation (Placement(transformation(extent={{-80,-80},
                    {-60,-60}})));
          Modelica.Blocks.Sources.Constant TCWSet(k=273.15 + 29.44)
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
          Modelica.Blocks.Sources.Step OnA(
            offset=1,
            startTime=21600,
            height=0)
            annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
          Modelica.Blocks.Sources.Step OnB(
            height=-1,
            offset=1,
            startTime=43200)
            annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
          Modelica.Blocks.Sources.Step OnC(
            height=-1,
            offset=1,
            startTime=64800)
            annotation (Placement(transformation(extent={{80,40},{60,60}})));
          Modelica.Blocks.Sources.Sine TCWLeaChi(
            f=1/21600,
            amplitude=17.31,
            offset=273.15 + 17.31)
            annotation (Placement(transformation(extent={{80,-40},{60,-20}})));
          Modelica.Blocks.Sources.RealExpression mCHW_flow(y=(OnA.y + OnB.y + OnC.y)*mCW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,14},{60,34}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEntChi(
              redeclare package Medium = MediumCW, m_flow_nominal=sum(mCW_flow_nominal))
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={10,-30})));
        equation

          connect(TWetBul.y, cooTow.TWetBul) annotation (Line(
              points={{-59,-70},{-32,-70},{-32,6},{-20.9,6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWSet.y, cooTow.TCWSet) annotation (Line(
              points={{-59,-30},{-40,-30},{-40,12},{-20.9,12}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWLeaChi.y, souCW.T_in) annotation (Line(
              points={{59,-30},{50,-30},{50,28},{42,28}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mCHW_flow.y, souCW.m_flow_in) annotation (Line(
              points={{59,24},{50,24},{50,32},{42,32}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1],senTCWEntChi. port_b) annotation (Line(
              points={{20,-70},{10,-70},{10,-40}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(OnA.y, cooTow.On[1]) annotation (Line(
              points={{-59,10},{-44,10},{-44,17.4},{-20.9,17.4}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, cooTow.On[2]) annotation (Line(
              points={{-59,48},{-42,48},{-42,18},{-20.9,18}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnC.y, cooTow.On[3]) annotation (Line(
              points={{59,50},{14,50},{-32,50},{-32,18.6},{-20.9,18.6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(souCW.ports[1], cooTow.port_a) annotation (Line(
              points={{20,24},{0,24},{0,18}},
              color={0,127,255},
              thickness=1));
          connect(cooTow.port_b, senTCWEntChi.port_a) annotation (Line(
              points={{0,4},{0,-8},{10,-8},{10,-20}},
              color={0,127,255},
              thickness=1));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/CoolingTower/Example/CoolingTowerWithBypass.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end CoolingTowersWithBypass;

        model HeterCoolingTowersWithBypass

          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.Power P_nominal[:]={30000 for i in linspace(
              1,
              3,
              3)} "Nominal power (at y=1)";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference between the outlet and inlet of the cooling tower";
          parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal=4.44
            "Nominal approach temperature";
          parameter Modelica.Units.SI.Temperature TWetBul_nominal=273.15 + 25
            "Nominal wet bulb temperature";
          parameter Modelica.Units.SI.Pressure dP_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={10 for i in
              linspace(
              1,
              3,
              3)} "Nominal mass flow rate at condenser water wide";
          parameter Real GaiPi=1 "Gain of the PI controller";
          parameter Real tIntPi=60 "Integration time of the PI controller";
          parameter Real v_flow_rate[3,:]={{0.3,0.6,1},{0.3,0.6,1},{0.3,0.6,1}} "Volume flow rate ratio";
          parameter Real eta[3,:]={{0.6,0.7,1},{0.6,0.7,1},{0.6,0.7,1}} "Fan efficiency";
          parameter Modelica.Units.SI.Pressure dPByp_nominal=1000
            "Pressure difference between the outlet and inlet of the modules ";
          BuildingControlEmulator.Subsystems.CoolingTower.CoolingTowersWithBypass
            cooTow(
            redeclare package MediumCW = MediumCW,
            P_nominal=P_nominal,
            dTCW_nominal=dTCW_nominal,
            dP_nominal=dP_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            v_flow_rate=v_flow_rate,
            TCW_start=273.15 + 29.44,
            dTApp_nominal=dTApp_nominal,
            TWetBul_nominal=TWetBul_nominal,
            eta=eta,
            dPByp_nominal(displayUnit="Pa") = 1000,
            TCWLowSet=288.71,
            n=3,
            redeclare BuildingControlEmulator.Subsystems.CoolingTower.MultiHeterCoolingTowers
            mulCooTowSys(n=1,m=2))
            annotation (Placement(transformation(extent={{-20,2},{0,22}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            use_T_in=true,
            redeclare package Medium = MediumCW,
            T=273.15 + 29.44,
            nPorts=1,
            use_m_flow_in=true) "Source for CW"
            annotation (Placement(transformation(extent={{40,14},{20,34}})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(redeclare package Medium =
                       MediumCW, nPorts=1) "Sink for CW" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={30,-70})));
          Modelica.Blocks.Sources.Constant TWetBul(k=273.15 + 20)   annotation (Placement(transformation(extent={{-80,-80},
                    {-60,-60}})));
          Modelica.Blocks.Sources.Constant TCWSet(k=273.15 + 29.44)
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
          Modelica.Blocks.Sources.Step OnA(
            offset=1,
            startTime=21600,
            height=0)
            annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
          Modelica.Blocks.Sources.Step OnB(
            height=-1,
            offset=1,
            startTime=43200)
            annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
          Modelica.Blocks.Sources.Step OnC(
            height=-1,
            offset=1,
            startTime=64800)
            annotation (Placement(transformation(extent={{80,40},{60,60}})));
          Modelica.Blocks.Sources.Sine TCWLeaChi(
            f=1/21600,
            amplitude=17.31,
            offset=273.15 + 17.31)
            annotation (Placement(transformation(extent={{80,-40},{60,-20}})));
          Modelica.Blocks.Sources.RealExpression mCHW_flow(y=(OnA.y + OnB.y + OnC.y)*mCW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,14},{60,34}})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEntChi(
              redeclare package Medium = MediumCW, m_flow_nominal=sum(mCW_flow_nominal))
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={10,-30})));
        equation

          connect(TWetBul.y, cooTow.TWetBul) annotation (Line(
              points={{-59,-70},{-32,-70},{-32,6},{-20.9,6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWSet.y, cooTow.TCWSet) annotation (Line(
              points={{-59,-30},{-40,-30},{-40,12},{-20.9,12}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(TCWLeaChi.y, souCW.T_in) annotation (Line(
              points={{59,-30},{50,-30},{50,28},{42,28}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mCHW_flow.y, souCW.m_flow_in) annotation (Line(
              points={{59,24},{50,24},{50,32},{42,32}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1],senTCWEntChi. port_b) annotation (Line(
              points={{20,-70},{10,-70},{10,-40}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(OnA.y, cooTow.On[1]) annotation (Line(
              points={{-59,10},{-44,10},{-44,17.4},{-20.9,17.4}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, cooTow.On[2]) annotation (Line(
              points={{-59,48},{-42,48},{-42,18},{-20.9,18}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnC.y, cooTow.On[3]) annotation (Line(
              points={{59,50},{14,50},{-32,50},{-32,18.6},{-20.9,18.6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(souCW.ports[1], cooTow.port_a)
            annotation (Line(
              points={{20,24},{0,24},{0,18}},
              color={0,127,255},
              thickness=1));
          connect(cooTow.port_b, senTCWEntChi.port_a)
            annotation (Line(
              points={{0,4},{0,-8},{10,-8},{10,-20}},
              color={0,127,255},
              thickness=1));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/CoolingTower/Example/CoolingTowerWithBypass.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                    100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end HeterCoolingTowersWithBypass;
      end Example;
    end CoolingTower;

    package Boiler

      model MultiBoilers
        replaceable package MediumHW =
           Modelica.Media.Interfaces.PartialMedium
          "Medium in the hot water side";
        parameter Modelica.Units.SI.Pressure dPHW_nominal
          "Pressure difference at the chilled water side";
        parameter Modelica.Units.SI.MassFlowRate mHW_flow_nominal[:]
          "Nominal mass flow rate at the chilled water side";
        parameter Modelica.Units.SI.Temperature THW_start
          "The start temperature of chilled water side";
        parameter Modelica.Units.SI.TemperatureDifference dTHW_nominal
          "Temperature difference between the outlet and inlet of the module";
        parameter Real eta[n,:] "Fan efficiency";
        Modelica.Blocks.Interfaces.RealInput On[n](min=0,max=1) "On signal"    annotation (Placement(transformation(extent={{-118,
                  -31},{-100,-49}})));
        Modelica.Blocks.Interfaces.RealInput THWSet
          "Temperature setpoint of the chilled water"
          annotation (Placement(transformation(extent={{-118,31},{-100,49}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_HW(redeclare package
            Medium =
              MediumHW)
          "Fluid connector b2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,-90},{110,-70}}),
              iconTransformation(extent={{90,-90},{110,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_HW(redeclare package
            Medium =
              MediumHW)
          "Fluid connector a2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,70},{110,90}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTHWEntChi(
          allowFlowReversal=true,
          redeclare package Medium = MediumHW,
          m_flow_nominal=sum(mHW_flow_nominal)) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={50,80})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTHWLeaChi(
          allowFlowReversal=true,
          redeclare package Medium = MediumHW,
          m_flow_nominal=sum(mHW_flow_nominal),
          T_start=THW_start) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={52,-80})));
        Modelica.Blocks.Interfaces.RealOutput Rat[n] "compressor speed ratio"
          annotation (Placement(transformation(extent={{100,-50},{120,-30}})));
        Devices.WaterSide.Boiler boi[n](
          redeclare package MediumHW = MediumHW,
          dPHW_nominal=dPHW_nominal,
          mHW_flow_nominal=mHW_flow_nominal,
          dTHW_nominal=dTHW_nominal,
          eta=eta,
          each boi(T_nominal(displayUnit="K")),
          THW=THW_start,
          GaiPi=1,
          tIntPi=60)                       annotation (Placement(transformation(extent={{-12,-10},{8,10}})));
        parameter Integer n
          "Number of boilers";

      equation
        connect(senTHWEntChi.port_a, port_a_HW) annotation (Line(
            points={{60,80},{100,80}},
            color={255,0,0},
            thickness=1));
        connect(senTHWLeaChi.port_b, port_b_HW) annotation (Line(
            points={{62,-80},{100,-80}},
            color={255,0,0},
            thickness=1));
        connect(port_b_HW, port_b_HW) annotation (Line(
            points={{100,-80},{100,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        for i in 1:n loop
          connect(boi[i].port_a_HW, senTHWEntChi.port_b);
          connect(boi[i].port_b_CHW, senTHWLeaChi.port_a);
          connect(boi[i].THWSet, THWSet);
          connect(boi[i].On, On[i]);
        end for;
        connect(On, Rat) annotation (Line(points={{-109,-40},{110,-40}},           color={0,0,127}));

        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-28,80},{26,40}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-28,-40},{26,-80}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(
                points={{40,-80},{102,-80}},
                color={255,0,0}),
              Line(
                points={{40,-80},{40,50},{26,50}},
                color={255,0,0}),
              Line(
                points={{26,-70},{40,-70}},
                color={255,0,0}),
              Line(
                points={{26,-48},{60,-48},{60,80}},
                color={255,0,0}),
              Line(
                points={{100,80},{60,80}},
                color={255,0,0}),
              Line(
                points={{26,72},{60,72}},
                color={255,0,0}),
              Ellipse(
                extent={{20,56},{30,44}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{22,54},{28,46}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,-64},{30,-76}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{22,-66},{28,-74}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,78},{30,66}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,-44},{30,-56}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-154,104},{146,144}},
                textString="%name",
                textColor={0,0,255})}),                                Diagram(coordinateSystem(preserveAspectRatio=false)));
      end MultiBoilers;

      model MultiHeterBoilers
        replaceable package MediumHW =
           Modelica.Media.Interfaces.PartialMedium
          "Medium in the hot water side";
        parameter Modelica.Units.SI.Pressure dPHW_nominal
          "Pressure difference at the chilled water side";
        parameter Modelica.Units.SI.MassFlowRate mHW_flow_nominal[:]
          "Nominal mass flow rate at the chilled water side";
        parameter Modelica.Units.SI.Temperature THW_start
          "The start temperature of chilled water side";
        parameter Modelica.Units.SI.TemperatureDifference dTHW_nominal
          "Temperature difference between the outlet and inlet of the module";
        parameter Real eta[n+m,:] "Fan efficiency";
        Modelica.Blocks.Interfaces.RealInput On[n+m](min=0,max=1) "On signal"    annotation (Placement(transformation(extent={{-118,
                  -31},{-100,-49}})));
        Modelica.Blocks.Interfaces.RealInput THWSet
          "Temperature setpoint of the chilled water"
          annotation (Placement(transformation(extent={{-118,31},{-100,49}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_HW(redeclare package
            Medium =
              MediumHW)
          "Fluid connector b2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,-90},{110,-70}}),
              iconTransformation(extent={{90,-90},{110,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_HW(redeclare package
            Medium =
              MediumHW)
          "Fluid connector a2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,70},{110,90}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTHWEntChi(
          allowFlowReversal=true,
          redeclare package Medium = MediumHW,
          m_flow_nominal=sum(mHW_flow_nominal)) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={50,80})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTHWLeaChi(
          allowFlowReversal=true,
          redeclare package Medium = MediumHW,
          m_flow_nominal=sum(mHW_flow_nominal),
          T_start=THW_start) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={52,-80})));
        Modelica.Blocks.Interfaces.RealOutput Rat[n+m] "compressor speed ratio"
          annotation (Placement(transformation(extent={{100,-50},{120,-30}})));
        Devices.WaterSide.Boiler boi1[n](
          redeclare package MediumHW = MediumHW,
          dPHW_nominal=dPHW_nominal,
          mHW_flow_nominal=mHW_flow_nominal[1:n],
          dTHW_nominal=dTHW_nominal,
          eta=eta[1:n],
          boi(T_nominal(displayUnit="K")),
          THW=THW_start,
          GaiPi=1,
          tIntPi=60) annotation (Placement(transformation(extent={{-12,12},{8,32}})));
        parameter Integer n
          "Number of boilers in group 1";
        parameter Integer m
          "Number of boilers in group 2";
        Devices.WaterSide.Boiler boi2[m](
          redeclare package MediumHW = MediumHW,
          dPHW_nominal=dPHW_nominal,
          mHW_flow_nominal=mHW_flow_nominal[n+1:m+n],
          dTHW_nominal=dTHW_nominal,
          eta=eta[n+1:m+n],
          boi(T_nominal(displayUnit="K")),
          THW=THW_start,
          GaiPi=1,
          tIntPi=60) annotation (Placement(transformation(extent={{-12,-32},{8,-12}})));
      equation
        connect(senTHWEntChi.port_a, port_a_HW) annotation (Line(
            points={{60,80},{100,80}},
            color={255,0,0},
            thickness=1));
        connect(senTHWLeaChi.port_b, port_b_HW) annotation (Line(
            points={{62,-80},{100,-80}},
            color={255,0,0},
            thickness=1));
        connect(port_b_HW, port_b_HW) annotation (Line(
            points={{100,-80},{100,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        for i in 1:n loop
          connect(boi1[i].port_a_HW, senTHWEntChi.port_b);
          connect(boi1[i].port_b_CHW, senTHWLeaChi.port_a);
          connect(boi1[i].THWSet, THWSet);
          connect(boi1[i].On, On[i]);
        end for;
        for i in 1:m loop
          connect(boi2[i].port_a_HW, senTHWEntChi.port_b);
          connect(boi2[i].port_b_CHW, senTHWLeaChi.port_a);
          connect(boi2[i].THWSet, THWSet);
          connect(boi2[i].On, On[i+n]);
        end for;

        connect(On, Rat) annotation (Line(points={{-109,-40},{110,-40}},           color={0,0,127},
            pattern=LinePattern.Dash));

        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-28,80},{26,40}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-28,-40},{26,-80}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(
                points={{40,-80},{102,-80}},
                color={255,0,0}),
              Line(
                points={{40,-80},{40,50},{26,50}},
                color={255,0,0}),
              Line(
                points={{26,-70},{40,-70}},
                color={255,0,0}),
              Line(
                points={{26,-48},{60,-48},{60,80}},
                color={255,0,0}),
              Line(
                points={{100,80},{60,80}},
                color={255,0,0}),
              Line(
                points={{26,72},{60,72}},
                color={255,0,0}),
              Ellipse(
                extent={{20,56},{30,44}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{22,54},{28,46}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,-64},{30,-76}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{22,-66},{28,-74}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,78},{30,66}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,-44},{30,-56}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid)}),                      Diagram(coordinateSystem(preserveAspectRatio=false)));
      end MultiHeterBoilers;

      package Example
        extends Modelica.Icons.ExamplesPackage;
        model MultiBoilers
          extends Modelica.Icons.Example;

         package MediumHW =
             Buildings.Media.Water
            "Medium in the hot water side";
          parameter Modelica.Units.SI.Pressure dPHW_nominal=3000
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.MassFlowRate mHW_flow_nominal[:]={10,10}
            "Nominal mass flow rate at the chilled water side";
          parameter Modelica.Units.SI.Temperature THW=273.15 + 80
            "The start temperature of chilled water side";
          parameter Modelica.Units.SI.TemperatureDifference dTHW_nominal=20
            "Temperature difference between the outlet and inlet of the module";

          parameter Real eta[2,:]={{0.8}, {0.8}} "Fan efficiency";

          .MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator.Subsystems.Boiler.MultiBoilers
            mulBoiSys(
            redeclare package MediumHW = MediumHW,
            dPHW_nominal=dPHW_nominal,
            mHW_flow_nominal=mHW_flow_nominal,
            dTHW_nominal=dTHW_nominal,
            eta=eta,
            THW_start=THW,
            n=2)
            annotation (Placement(transformation(extent={{-20,-36},{0,-16}})));
          Modelica.Blocks.Sources.Step OnB(          startTime=43200,
            height=1,
            offset=0)                                                 annotation (Placement(transformation(extent={{80,70},{60,90}})));
          Modelica.Blocks.Sources.Constant THWSet(k=273.15 + 80) annotation (Placement(transformation(extent={{80,30},{60,50}})));
          Buildings.Fluid.Sources.MassFlowSource_T souHW(
            use_T_in=true,
            redeclare package Medium = MediumHW,
            nPorts=1,
            m_flow=sum(mHW_flow_nominal),
            use_m_flow_in=true,
            T=298.15) "Source for HW"  annotation (Placement(transformation(extent={{42,-24},{22,-4}})));
          Buildings.Fluid.Sources.Boundary_pT sinHW(redeclare package Medium = MediumHW, nPorts=1) "Sink for CHW"
            annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={70,-50})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTHWLeaBoi(
            redeclare package Medium = MediumHW,
            m_flow_nominal=sum(mHW_flow_nominal),
            T_start=273.15 + 5.56)
            annotation (Placement(transformation(extent={{20,-60},{40,-40}})));
          Modelica.Blocks.Sources.Sine THWEntBoi(
            f=1/21600,
            amplitude=10,
            offset=273.15 + 70)
            annotation (Placement(transformation(extent={{80,-22},{60,-2}})));
          Modelica.Blocks.Sources.RealExpression mHW_flow(y=(OnA.y + OnB.y) *mHW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,2},{60,22}})));
          Modelica.Blocks.Sources.Step OnA(
            startTime=43200,
            height=0,
            offset=1) annotation (Placement(transformation(extent={{-88,20},{-68,40}})));
        equation
          connect(THWEntBoi.y, souHW.T_in) annotation (Line(
              points={{59,-12},{52,-12},{52,-10},{44,-10}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(senTHWLeaBoi.port_b, sinHW.ports[1]) annotation (Line(
              points={{40,-50},{60,-50}},
              color={255,0,0},
              thickness=1));
          connect(mHW_flow.y, souHW.m_flow_in) annotation (Line(
              points={{59,12},{52,12},{52,-6},{44,-6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mulBoiSys.port_a_HW, souHW.ports[1])
            annotation (Line(
              points={{0,-18},{10,-18},{10,-14},{22,-14}},
              color={255,0,0},
              thickness=1));
          connect(mulBoiSys.port_b_HW, senTHWLeaBoi.port_a) annotation (Line(
              points={{0,-34},{12,-34},{12,-50},{20,-50}},
              color={255,0,0},
              thickness=1));
          connect(OnA.y, mulBoiSys.On[1]) annotation (Line(
              points={{-67,30},{-46,30},{-46,-29.55},{-20.9,-29.55}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, mulBoiSys.On[2]) annotation (Line(
              points={{59,80},{10,80},{-40,80},{-40,-30.45},{-20.9,-30.45}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(mulBoiSys.THWSet, THWSet.y)
            annotation (Line(
              points={{-20.9,-22},{-30,-22},{-30,40},{59,40}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400));
        end MultiBoilers;

        model MultiHeterBoilers
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;

         package MediumHW =
             Buildings.Media.Water
            "Medium in the hot water side";
          parameter Modelica.Units.SI.Pressure dPHW_nominal=3000
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.MassFlowRate mHW_flow_nominal[:]={10,10}
            "Nominal mass flow rate at the chilled water side";
          parameter Modelica.Units.SI.Temperature THW=273.15 + 80
            "The start temperature of chilled water side";
          parameter Modelica.Units.SI.TemperatureDifference dTHW_nominal=20
            "Temperature difference between the outlet and inlet of the module";

          parameter Real eta[2,:]={{0.8}, {0.8}} "Fan efficiency";

          BuildingControlEmulator.Subsystems.Boiler.MultiHeterBoilers
                                                                  mulBoiSys(
            redeclare package MediumHW = MediumHW,
            dPHW_nominal=dPHW_nominal,
            mHW_flow_nominal=mHW_flow_nominal,
            dTHW_nominal=dTHW_nominal,
            eta=eta,
            THW_start=THW,
            n=1,
            m=1) annotation (Placement(transformation(extent={{-20,-36},{0,-16}})));
          Modelica.Blocks.Sources.Step OnB(          startTime=43200,
            height=1,
            offset=0)                                                 annotation (Placement(transformation(extent={{80,70},{60,90}})));
          Modelica.Blocks.Sources.Constant THWSet(k=273.15 + 80) annotation (Placement(transformation(extent={{80,30},{60,50}})));
          Buildings.Fluid.Sources.MassFlowSource_T souHW(
            use_T_in=true,
            redeclare package Medium = MediumHW,
            nPorts=1,
            m_flow=sum(mHW_flow_nominal),
            use_m_flow_in=true,
            T=298.15) "Source for HW"  annotation (Placement(transformation(extent={{42,-24},{22,-4}})));
          Buildings.Fluid.Sources.Boundary_pT sinHW(redeclare package Medium = MediumHW, nPorts=1) "Sink for CHW"
            annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={70,-50})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTHWLeaBoi(
            redeclare package Medium = MediumHW,
            m_flow_nominal=sum(mHW_flow_nominal),
            T_start=273.15 + 5.56)
            annotation (Placement(transformation(extent={{20,-60},{40,-40}})));
          Modelica.Blocks.Sources.Sine THWEntBoi(
            f=1/21600,
            amplitude=10,
            offset=273.15 + 70)
            annotation (Placement(transformation(extent={{80,-22},{60,-2}})));
          Modelica.Blocks.Sources.RealExpression mHW_flow(y=(OnA.y + OnB.y) *mHW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,2},{60,22}})));
          Modelica.Blocks.Sources.Step OnA(
            startTime=43200,
            height=0,
            offset=1) annotation (Placement(transformation(extent={{-88,20},{-68,40}})));
        equation
          connect(THWEntBoi.y, souHW.T_in) annotation (Line(
              points={{59,-12},{52,-12},{52,-10},{44,-10}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(senTHWLeaBoi.port_b, sinHW.ports[1]) annotation (Line(
              points={{40,-50},{60,-50}},
              color={255,0,0},
              thickness=1));
          connect(mHW_flow.y, souHW.m_flow_in) annotation (Line(
              points={{59,12},{52,12},{52,-6},{44,-6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mulBoiSys.port_a_HW, souHW.ports[1])
            annotation (Line(
              points={{0,-18},{10,-18},{10,-14},{22,-14}},
              color={255,0,0},
              thickness=1));
          connect(mulBoiSys.port_b_HW, senTHWLeaBoi.port_a) annotation (Line(
              points={{0,-34},{12,-34},{12,-50},{20,-50}},
              color={255,0,0},
              thickness=1));
          connect(OnA.y, mulBoiSys.On[1]) annotation (Line(
              points={{-67,30},{-46,30},{-46,-29.55},{-20.9,-29.55}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, mulBoiSys.On[2]) annotation (Line(
              points={{59,80},{10,80},{-40,80},{-40,-30.45},{-20.9,-30.45}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(mulBoiSys.THWSet, THWSet.y)
            annotation (Line(
              points={{-20.9,-22},{-30,-22},{-30,40},{59,40}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
            experiment(StopTime=86400));
        end MultiHeterBoilers;
      end Example;
    end Boiler;

    package Pump "This package contains the modules which can be used to simulate the primary chilled water pump, the condenser water pump and the secondary chilled water pump"

      model SimPumpSystem
        "This model is used to simulate the primary chilled water pump and condenser water pump system"
          replaceable package Medium =
               Modelica.Media.Interfaces.PartialMedium "Medium water";
        parameter Modelica.Units.SI.MassFlowRate m_flow_nominal[n]
          "Rated mass flow rate";

          parameter Integer n= 2
          "the number of pumps";
          parameter Real Motor_eta[n,:] "Motor efficiency";
          parameter Real Hydra_eta[n,:] "Hydraulic efficiency";
        parameter Modelica.Units.SI.PressureDifference dp_nominal
          "Nominal pressure raise";

        Buildings.Fluid.Movers.FlowControlled_m_flow
                                             pumConSpe[n](redeclare package
            Medium =                                                                 Medium,
          m_flow_nominal=m_flow_nominal,
          per(
            use_powerCharacteristic=false,
            motorEfficiency(eta=Motor_eta),
            hydraulicEfficiency(eta=Hydra_eta)),
          dp_nominal=dp_nominal)                                                           "Constant Speed pump"
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium = Medium)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium = Medium)
          "Fluid connector b (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
        Modelica.Blocks.Interfaces.RealInput On[n] "On signal"    annotation (Placement(transformation(extent={{-118,51},
                  {-100,69}})));

        Modelica.Blocks.Interfaces.RealOutput P[n]
          "Electric power consumed by compressor"
          annotation (Placement(transformation(extent={{100,30},{120,50}})));
        Modelica.Blocks.Math.Gain gain[n](k=m_flow_nominal)
          annotation (Placement(transformation(extent={{-80,50},{-60,70}})));

      equation

        for i in 1:n loop
          connect(pumConSpe[i].port_a, port_a);
          connect(pumConSpe[i].port_b, port_b);
          connect(pumConSpe[i].P, P[i]);

        end for;

        connect(gain.u, On)
          annotation (Line(
            points={{-82,60},{-109,60}},
            color={0,0,127}));
        connect(gain.y, pumConSpe.m_flow_in) annotation (Line(points={{-59,60},{-28,60},{0,60},{0,12}}, color={0,0,127}));

        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})),                                                                               Icon(coordinateSystem(
                preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
              Text(
                extent={{-40,-102},{46,-156}},
                lineColor={0,0,255},
                textString="%name"),
              Ellipse(
                extent={{-20,80},{20,40}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{16,60},{-8,48},{-8,70},{16,60}},
                lineColor={0,0,255},
                smooth=Smooth.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-100,0},{-40,0},{-40,60}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-40,60},{-20,60}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-40,0},{-16,0}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-40,0},{-40,-60},{-16,-60}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{20,60},{40,60},{40,-60},{14,-60}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{40,0},{14,0}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{40,0},{90,0}},
                color={0,0,255},
                smooth=Smooth.None),
              Ellipse(
                extent={{-20,20},{20,-20}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-20,-40},{20,-80}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{16,0},{-8,-12},{-8,10},{16,0}},
                lineColor={0,0,255},
                smooth=Smooth.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{16,-60},{-8,-72},{-8,-50},{16,-60}},
                lineColor={0,0,255},
                smooth=Smooth.None,
                fillColor={0,0,255},
                fillPattern=FillPattern.Solid)}),
          Documentation(revisions="<html>
<ul>
<li>
March 30, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"));
      end SimPumpSystem;

      model PumpSystem "This model is used to simulate the secondary chilled water pump"
          replaceable package Medium =
            Modelica.Media.Interfaces.PartialMedium  "Medium water";
          parameter Integer n= 2
          "the number of pumps";

        parameter Modelica.Units.SI.MassFlowRate m_flow_nominal[n];
        parameter Real HydEff[n,:] "Hydraulic efficiency";
        parameter Real MotEff[n,:] "Motor efficiency";
        parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[n,:]
          "Volume flow rate curve";
        parameter Modelica.Units.SI.Pressure PreCur[n,:] "Pressure curve";
        Devices.FlowMover.BaseClasses.WithoutMotor                  pum[n](
          redeclare package Medium = Medium,
          HydEff=HydEff,
          MotEff=MotEff,
          VolFloCur=VolFloCur,
          PreCur=PreCur,
          TimCon=900,
          VarSpeFloMov(addPowerToMedium=false))
                               annotation (Placement(transformation(extent={{-12,-10},
                  {10,10}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium = Medium)
          "Fluid connector a (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium = Medium)
          "Fluid connector b (positive design flow direction is from port_a to port_b)"
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
        Modelica.Blocks.Interfaces.RealInput SpeSig[n] "On signal"
          annotation (Placement(transformation(extent={{-118,71},{-100,89}})));
        Modelica.Blocks.Interfaces.RealOutput SpeRat[n]
          "Speed of the pump divided by the nominal value"
          annotation (Placement(transformation(extent={{100,52},{120,72}})));
        Modelica.Blocks.Interfaces.RealOutput P[n]
          "Electric power consumed by compressor"
          annotation (Placement(transformation(extent={{100,-70},{120,-50}})));
        Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage val[n](redeclare
            package Medium = Medium,
            m_flow_nominal=m_flow_nominal,
          dpValve_nominal=dpValve_nominal)
          annotation (Placement(transformation(extent={{42,-10},{62,10}})));
        BaseClasses.ValCon valCon(n=n)
          annotation (Placement(transformation(extent={{-10,50},{10,70}})));
        parameter Modelica.Units.SI.PressureDifference dpValve_nominal[n]
          "Nominal pressure drop of fully open valve, used if CvData=Buildings.Fluid.Types.CvTypes.OpPoint";
      equation

        for i in 1:n loop
         connect(pum[i].Rat, SpeRat[i]);
         connect(pum[i].port_a, port_a);
         connect(val[i].port_b, port_b);
         connect(pum[i].P, P[i]);
           connect(pum[i].port_b, val[i].port_a);
        end for;

        connect(pum.u, SpeSig) annotation (Line(
            points={{-13.1,6},{-80,6},{-80,80},{-109,80}},
            color={0,0,127}));
        connect(valCon.On, SpeSig) annotation (Line(
            points={{-10.9,60},{-60,60},{-60,80},{-109,80}},
            color={0,0,127}));
        connect(valCon.y, val.y) annotation (Line(
            points={{10.9,60},{52,60},{52,12}},
            color={0,0,127}));
        annotation (Icon(graphics={
              Text(
                extent={{-152,104},{148,144}},
                textString="%name",
                textColor={0,0,255}),
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,127},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}));
      end PumpSystem;

      package Control

        model SecPumCon
          parameter Real tWai = 300 "Waiting time";

            parameter Integer n=3
            "the number of pumps";
          Devices.WaterSide.Control.PumpStageN pumSta(
            tWai=tWai,
            thehol_up=0.9,
            n=n,
            thehol_down=0.6)
            annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));
          Modelica.Blocks.Interfaces.BooleanInput On "On signal"
            annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
          Modelica.Blocks.Interfaces.RealInput Status[n] "Speeds of pumps"
            annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
          Modelica.Blocks.Interfaces.RealInput dP "Measured pressure drop"
            annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
          Modelica.Blocks.Math.Product product[n]
            annotation (Placement(transformation(extent={{20,40},{40,60}})));
          Modelica.Blocks.Interfaces.RealOutput y[n] "Connector of Real output signal"
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));

          Modelica.Blocks.Routing.Replicator replicator(nout=n)
            annotation (Placement(transformation(extent={{56,-40},{76,-20}})));
          Devices.Control.conPI conPI(k=0.001, Ti=60)
            annotation (Placement(transformation(extent={{16,-20},{36,0}})));
          Modelica.Blocks.Interfaces.RealInput dpSetPoi
            "Static differential pressure setpoint for the secondary pump"
            annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        equation
          connect(pumSta.On, On) annotation (Line(points={{-52,8},{-66,8},{-80,
                  8},{-80,80},{-120,80}}, color={255,0,255}));
          connect(pumSta.Status, Status) annotation (Line(points={{-52,-8},{-80,
                  -8},{-80,-80},{-120,-80}}, color={0,0,127}));
          connect(product.y, y) annotation (Line(
              points={{41,50},{60,50},{80,50},{80,0},{110,0}},
              color={0,0,127}));
          connect(pumSta.y, product.u1) annotation (Line(points={{-29,0},{0,0},
                  {0,56},{18,56}}, color={0,0,127}));
          connect(replicator.y, product.u2) annotation (Line(
              points={{77,-30},{90,-30},{90,-12},{58,-12},{58,24},{8,24},{8,44},{18,44}},
              color={0,0,127}));

          connect(conPI.On, On) annotation (Line(
              points={{14,-4},{-20,-4},{-20,80},{-120,80}},
              color={255,0,255}));
          connect(conPI.y, replicator.u) annotation (Line(
              points={{37,-10},{46,-10},{46,-30},{54,-30}},
              color={0,0,127}));
          connect(conPI.Mea, dP) annotation (Line(
              points={{14,-16},{-92,-16},{-92,0},{-120,0}},
              color={0,0,127}));
          connect(conPI.SetPoi, dpSetPoi) annotation (Line(points={{14,-10},{-20,-10},{-20,
                  -40},{-120,-40}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-156,104},{144,144}},
                  textString="%name",
                  textColor={0,0,255})}),           Diagram(coordinateSystem(
                  preserveAspectRatio=false)));
        end SecPumCon;

        package Examples
          extends Modelica.Icons.ExamplesPackage;
          model SecPumCon
            extends Modelica.Icons.Example;
            BuildingControlEmulator.Subsystems.Pump.Control.SecPumCon secPumCon(
              tWai=300,
              dPSetPoi(displayUnit="Pa") = 478250,
              n=2) annotation (Placement(transformation(extent={{-10,-10},{10,
                      10}})));
            Modelica.Blocks.Sources.Sine s1(
              f=1/3600/24,
              amplitude=0.5,
              offset=0.5)
              annotation (Placement(transformation(extent={{-80,-50},{-60,-30}})));
            Modelica.Blocks.Sources.Sine s2(
              f=1/3600/24,
              amplitude=0.5,
              offset=0.5,
              startTime=2400)
              annotation (Placement(transformation(extent={{-80,-90},{-60,-70}})));
            Modelica.Blocks.Sources.Step On(
              height=-1,
              offset=1,
              startTime=80000)
              annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
            Modelica.Blocks.Math.RealToBoolean realToBoolean
              annotation (Placement(transformation(extent={{-50,60},{-30,80}})));
            Modelica.Blocks.Sources.Sine dP(
              f=1/43200,
              amplitude=239125,
              offset=239125)
              annotation (Placement(transformation(extent={{-82,-10},{-62,10}})));
          equation
            connect(On.y,realToBoolean. u)
              annotation (Line(points={{-59,70},{-59,70},{-52,70}},   color={0,0,127},
                pattern=LinePattern.Dash));
            connect(realToBoolean.y, secPumCon.On) annotation (Line(points={{-29,70},{-24,
                    70},{-20,70},{-20,8},{-12,8}}, color={255,0,255},
                pattern=LinePattern.Dash));
            connect(dP.y, secPumCon.dP) annotation (Line(points={{-61,0},{-61,0},{-12,0}},
                                   color={0,0,127},
                pattern=LinePattern.Dash));
            connect(s1.y, secPumCon.Status[1]) annotation (Line(points={{-59,-40},{-48,
                    -40},{-40,-40},{-40,-9},{-12,-9}}, color={0,0,127},
                pattern=LinePattern.Dash));
            connect(s2.y, secPumCon.Status[2]) annotation (Line(points={{-59,-80},{-26,-80},
                    {-26,-7},{-12,-7}},      color={0,0,127},
                pattern=LinePattern.Dash));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=86400));
          end SecPumCon;
        end Examples;
      end Control;

      package BaseClasses

        model ValCon
            parameter Integer n= 2
            "the number of pumps";

          Modelica.Blocks.Interfaces.RealInput On[n] "On signal"    annotation (Placement(transformation(extent={{-118,-9},
                    {-100,9}})));
          Modelica.Blocks.Interfaces.RealOutput y[n] "On signal"
            annotation (Placement(transformation(extent={{100,-9},{118,9}})));

        equation

            for i in 1:n loop
              y[i] =noEvent(if On[i]>0.01 then 1 else 0);
            end for;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,127},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Text(
                  extent={{-150,102},{150,142}},
                  textString="%name",
                  textColor={0,0,255})}),           Diagram(coordinateSystem(
                  preserveAspectRatio=false)));
        end ValCon;
      end BaseClasses;

      package Examples "Test of the modules"
      extends Modelica.Icons.ExamplesPackage;

        model SimPumpSystem
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator.Subsystems.Pump;
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=10
            "Nominal mass flow rate ";
          parameter Real Motor_eta[:] = {1} "Motor efficiency";
          parameter Real Hydra_eta[:] = {1} "Hydraulic efficiency";
          Buildings.Fluid.Sources.Boundary_pT sou(
            redeclare package Medium = Medium,
            use_p_in=false,
            nPorts=2,
            p=101325,
            T=293.15) annotation (Placement(transformation(extent={{-80,-30},{-60,-10}},
                  rotation=0)));
          Buildings.Fluid.FixedResistances.PressureDrop       dpDyn(
            redeclare package Medium = Medium,
            dp_nominal=6000,
            m_flow_nominal=6*m_flow_nominal) "Pressure drop"
            annotation (Placement(transformation(extent={{60,-10},{80,10}})));
          Modelica.Blocks.Sources.Step OnC(startTime=300)
            annotation (Placement(transformation(extent={{80,60},{60,80}})));
          Modelica.Blocks.Sources.Step OnB(startTime=200)
            annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
          Modelica.Blocks.Sources.Step OnA(startTime=10)
            annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare package
              Medium = Medium)
            annotation (Placement(transformation(extent={{20,-88},{0,-68}})));
          Pump.SimPumpSystem
                          pumSys(redeclare package Medium = Medium, n=3,
            Motor_eta={Motor_eta,Motor_eta,Motor_eta},
            Hydra_eta={Hydra_eta,Hydra_eta,Hydra_eta},
            m_flow_nominal={m_flow_nominal,2*m_flow_nominal,3*m_flow_nominal},
            dp_nominal(displayUnit="Pa") = 3000)
            annotation (Placement(transformation(extent={{-8,-6},{22,24}})));
        equation

          connect(dpDyn.port_b,senMasFlo. port_a) annotation (Line(
              points={{80,0},{88,0},{88,-78},{20,-78}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(senMasFlo.port_b,sou. ports[1]) annotation (Line(
              points={{0,-78},{-60,-78},{-60,-18}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(pumSys.port_b, dpDyn.port_a)
            annotation (Line(
              points={{22,9},{36,9},{36,0},{60,0}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(sou.ports[2], pumSys.port_a)
            annotation (Line(
              points={{-60,-22},{-60,9},{-8,9}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(OnC.y, pumSys.On[3]) annotation (Line(
              points={{59,70},{-20,70},{-20,18.9},{-9.35,18.9}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(OnB.y, pumSys.On[2]) annotation (Line(
              points={{-59,70},{-40,70},{-40,18},{-9.35,18}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(OnA.y, pumSys.On[1]) annotation (Line(
              points={{-59,30},{-44,30},{-44,17.1},{-9.35,17.1}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/Pump/Example/PumpSystem.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            experiment(StopTime=400),
            __Dymola_experimentSetupOutput);
        end SimPumpSystem;

        model PumpSystem
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator.Subsystems.Pump;
          extends Modelica.Icons.Example;
          package Medium = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=10
            "Nominal mass flow rate ";
          parameter Real Motor_eta[3,:] = {{1,1,1},{1,1,1},{1,1,1}} "Motor efficiency";
          parameter Real Hydra_eta[3,:] = {{1,1,1},{1,1,1},{1,1,1}} "Hydraulic efficiency";
          parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[3,:]={{5/1000,10/1000,20
              /1000},{5/1000,10/1000,20/1000},{5/1000,10/1000,20/1000}}
            "Volume flow rate curve";
          parameter Modelica.Units.SI.Pressure PreCur[3,:]={{8000,6000,4000},{8000,6000,
              4000},{8000,6000,4000}} "Pressure curve";

          Buildings.Fluid.Sources.Boundary_pT sou(
            redeclare package Medium = Medium,
            use_p_in=false,
            nPorts=2,
            p=101325,
            T=293.15) annotation (Placement(transformation(extent={{-80,-30},{-60,-10}},
                  rotation=0)));
          Buildings.Fluid.FixedResistances.PressureDrop       dpDyn(
            redeclare package Medium = Medium,
            m_flow_nominal=3*m_flow_nominal,
            dp_nominal=3000)                 "Pressure drop"
            annotation (Placement(transformation(extent={{60,-10},{80,10}})));
          Modelica.Blocks.Sources.Step OnC(startTime=500)
            annotation (Placement(transformation(extent={{80,60},{60,80}})));
          Modelica.Blocks.Sources.Step OnB(startTime=800)
            annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
          Modelica.Blocks.Sources.Step OnA(startTime=10)
            annotation (Placement(transformation(extent={{-82,20},{-62,40}})));
          Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare package
              Medium = Medium)
            annotation (Placement(transformation(extent={{20,-88},{0,-68}})));
          Pump.PumpSystem    pumSys(
            redeclare package Medium = Medium,
            n=3,
            HydEff=Hydra_eta,
            MotEff=Motor_eta,
            VolFloCur=VolFloCur,
            PreCur=PreCur,
            m_flow_nominal={m_flow_nominal,m_flow_nominal,m_flow_nominal},
            dp(displayUnit="Pa") = {3000,3000,3000})
                                        annotation (Placement(transformation(extent={{-8,-6},{22,24}})));
        equation

          connect(dpDyn.port_b,senMasFlo. port_a) annotation (Line(
              points={{80,0},{88,0},{88,-78},{20,-78}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(senMasFlo.port_b,sou. ports[1]) annotation (Line(
              points={{0,-78},{-60,-78},{-60,-18}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(pumSys.port_b, dpDyn.port_a)
            annotation (Line(
              points={{22,9},{36,9},{36,0},{60,0}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(sou.ports[2], pumSys.port_a)
            annotation (Line(
              points={{-60,-22},{-60,9},{-8,9}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(OnC.y, pumSys.SpeSig[3]) annotation (Line(
              points={{59,70},{-20,70},{-20,21.9},{-9.35,21.9}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(OnB.y, pumSys.SpeSig[2]) annotation (Line(
              points={{-59,70},{-40,70},{-40,21},{-9.35,21}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(OnA.y, pumSys.SpeSig[1]) annotation (Line(
              points={{-61,30},{-44,30},{-44,20.1},{-9.35,20.1}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/Pump/Example/PumpSystem.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            experiment(StopTime=1000),
            __Dymola_experimentSetupOutput);
        end PumpSystem;
      annotation (Documentation(info="<html>
<p>This package contains examples for the use of models that can be found in Pump.</p>
</html>"));
      end Examples;
    annotation ();
    end Pump;

    package Chiller
      "This package contains the modules which can be used to simulate the chillers"

      model MultiChillers
        "The chiller system with N chillers and associated local controllers "
        replaceable package MediumCHW =
            Modelica.Media.Interfaces.PartialMedium
          "Medium in the chilled water side";
        replaceable package MediumCW =
            Modelica.Media.Interfaces.PartialMedium
          "Medium in the condenser water side";
        parameter Buildings.Fluid.Chillers.Data.ElectricEIR.Generic per[n]
          "Performance data" annotation (choicesAllMatching=true, Placement(
              transformation(extent={{-10,70},{10,90}})));
        parameter Modelica.Units.SI.Pressure dPCHW_nominal
          "Pressure difference at the chilled water side";
        parameter Modelica.Units.SI.Pressure dPCW_nominal
          "Pressure difference at the condenser water wide";
        parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal[:]
          "Nominal mass flow rate at the chilled water side";
        parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]
          "Nominal mass flow rate at the condenser water wide";
        parameter Modelica.Units.SI.Temperature TCW_start
          "The start temperature of condenser water side";
        parameter Modelica.Units.SI.Temperature TCHW_start
          "The start temperature of chilled water side";

        parameter Integer n
          "the number of chillers";
        Modelica.Blocks.Interfaces.RealInput On[n](min=0,max=1) "On signal"    annotation (Placement(transformation(extent={{-118,
                  -31},{-100,-49}})));
        Modelica.Blocks.Interfaces.RealInput TCHWSet
          "Temperature setpoint of the chilled water"
          annotation (Placement(transformation(extent={{-118,31},{-100,49}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_CW(redeclare package
            Medium =                                                               MediumCW)
          "Fluid connector a1 (positive design flow direction is from port_a1 to port_b1)"
          annotation (Placement(transformation(extent={{-110,-90},{-90,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_CW(redeclare package
            Medium =                                                               MediumCW)
          "Fluid connector b1 (positive design flow direction is from port_a1 to port_b1)"
          annotation (Placement(transformation(extent={{-110,70},{-90,90}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_CHW(redeclare package
            Medium =                                                                MediumCHW)
          "Fluid connector b2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,-90},{110,-70}}),
              iconTransformation(extent={{90,-90},{110,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_CHW(redeclare package
            Medium =                                                                MediumCHW)
          "Fluid connector a2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,70},{110,90}})));
        Modelica.Blocks.Interfaces.RealOutput P[n]
          "Electric power consumed by compressor"
          annotation (Placement(transformation(extent={{100,30},{120,50}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWEntChi(
          redeclare package Medium = MediumCHW,
          allowFlowReversal=true,
          m_flow_nominal=sum(mCHW_flow_nominal))
                                              annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={50,80})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCWLeaChi(
          allowFlowReversal=true,
          redeclare package Medium = MediumCW,
          m_flow_nominal=sum(mCW_flow_nominal))
                                             annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-82,80})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLeaChi(
          allowFlowReversal=true,
          redeclare package Medium = MediumCHW,
          T_start=TCHW_start,
          m_flow_nominal=sum(mCHW_flow_nominal))
                                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={52,-80})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEntChi(
          allowFlowReversal=true,
          redeclare package Medium = MediumCW,
          T_start=TCW_start,
          m_flow_nominal=sum(mCW_flow_nominal))
                                             annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-70,-80})));
        replaceable Devices.WaterSide.ChillerTSet ch[n](
          redeclare package MediumCHW = MediumCHW,
          redeclare package MediumCW = MediumCW,
          dPCHW_nominal=dPCHW_nominal,
          dPCW_nominal=dPCW_nominal,
          mCHW_flow_nominal=mCHW_flow_nominal,
          mCW_flow_nominal=mCW_flow_nominal,
          TCW_start=TCW_start,
          TCHW_start=TCHW_start,
          per=per) constrainedby Devices.WaterSide.ChillerTSet(
          redeclare package MediumCHW = MediumCHW,
          redeclare package MediumCW = MediumCW,
          dPCHW_nominal=dPCHW_nominal,
          dPCW_nominal=dPCW_nominal,
          mCHW_flow_nominal=mCHW_flow_nominal,
          mCW_flow_nominal=mCW_flow_nominal,
          TCW_start=TCW_start,
          TCHW_start=TCHW_start,
          per=per) annotation (Placement(transformation(extent={{-10,-8},{10,12}})));

        Modelica.Blocks.Interfaces.RealOutput Rat[n] "compressor speed ratio"
          annotation (Placement(transformation(extent={{100,-50},{120,-30}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloCHW(redeclare package
            Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{70,-90},{88,-70}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloCW(redeclare package
            Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{-46,70},{-64,90}})));
      equation
        connect(port_b_CW, port_b_CW) annotation (Line(
            points={{-100,80},{-100,80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(port_a_CW, port_a_CW) annotation (Line(
            points={{-100,-80},{-100,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(senTCHWEntChi.port_a, port_a_CHW) annotation (Line(
            points={{60,80},{100,80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(port_b_CW, senTCWLeaChi.port_b) annotation (Line(
            points={{-100,80},{-92,80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(senTCWEntChi.port_a, port_a_CW) annotation (Line(
            points={{-80,-80},{-100,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(port_b_CHW, port_b_CHW) annotation (Line(
            points={{100,-80},{98,-80},{98,-80},{100,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(senTCWLeaChi.port_a, senMasFloCW.port_b) annotation (Line(
            points={{-72,80},{-64,80}},
            color={0,127,255},
            thickness=1));
        connect(senMasFloCHW.port_b, port_b_CHW) annotation (Line(
            points={{88,-80},{94,-80},{100,-80}},
            color={0,127,255},
            thickness=1));
        connect(senTCHWLeaChi.port_b, senMasFloCHW.port_a) annotation (Line(
            points={{62,-80},{66,-80},{70,-80}},
            color={0,127,255},
            thickness=1));
        connect(ch.On, On) annotation (Line(
            points={{-12,-3},{-60,-3},{-60,-40},{-109,-40}},
            color={0,0,127}));
        connect(On, Rat) annotation (Line(
            points={{-109,-40},{110,-40}},
            color={0,0,127}));

        for i in 1:n loop
              connect(ch[i].TCHWSet, TCHWSet);
              connect(ch[i].port_a_CW, senTCWEntChi.port_b);
              connect(ch[i].port_b_CHW, senTCHWLeaChi.port_a);
              connect(ch[i].port_b_CW, senMasFloCW.port_a);
              connect(ch[i].port_a_CHW, senTCHWEntChi.port_b);
              connect(ch[i].P, P[i]);
        end for;

        annotation (Documentation(info="<html>
<p>This model is to simulate the chiller system which consists of three chillers and associated local controllers.</p>
</html>",       revisions="<html>
<ul>
<li>
March 19, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"),       Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}})),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                  100}}),                                                                   graphics={
              Text(
                extent={{-44,-142},{50,-110}},
                lineColor={0,0,255},
                textString="%name"),
              Rectangle(
                extent={{-28,80},{26,40}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-28,20},{26,-20}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-28,-40},{26,-80}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-60,12},{-28,12}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-28,-50},{-60,-50},{-60,80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-90,-80},{-40,-80},{-40,50},{-34,50},{-28,50}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-28,-10},{-40,-10}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-28,-70},{-40,-70}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{40,-80},{102,-80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{40,-80},{40,50},{26,50}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{26,-12},{40,-12}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{26,-70},{40,-70}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{26,12},{60,12}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{26,-48},{60,-48},{60,80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-100,80},{-60,80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-28,70},{-60,70}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{100,80},{60,80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{26,72},{60,72}},
                color={0,0,255},
                smooth=Smooth.None),
              Ellipse(
                extent={{-32,76},{-22,64}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-30,74},{-24,66}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-32,18},{-22,6}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-30,16},{-24,8}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-32,-44},{-22,-56}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-30,-46},{-24,-54}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,56},{30,44}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{22,54},{28,46}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,-6},{30,-18}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{22,-8},{28,-16}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,-64},{30,-76}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{22,-66},{28,-74}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,78},{30,66}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,18},{30,6}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,-44},{30,-56}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-32,56},{-22,44}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-32,-4},{-22,-16}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-32,-64},{-22,-76}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-158,104},{142,144}},
                textString="%name",
                textColor={0,0,255})}));
      end MultiChillers;

      model MultiHeterChillers "The chiller system with N heterogeneous chillers"
        replaceable package MediumCHW =
            Modelica.Media.Interfaces.PartialMedium
          "Medium in the chilled water side";
        replaceable package MediumCW =
            Modelica.Media.Interfaces.PartialMedium
          "Medium in the condenser water side";
        parameter Buildings.Fluid.Chillers.Data.ElectricEIR.Generic per[n+m]
          "Performance data" annotation (choicesAllMatching=true, Placement(
              transformation(extent={{-10,70},{10,90}})));
        parameter Modelica.Units.SI.Pressure dPCHW_nominal
          "Pressure difference at the chilled water side";
        parameter Modelica.Units.SI.Pressure dPCW_nominal
          "Pressure difference at the condenser water wide";
        parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal[n + m]
          "Nominal mass flow rate at the chilled water side";
        parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[n + m]
          "Nominal mass flow rate at the condenser water wide";
        parameter Modelica.Units.SI.Temperature TCW_start
          "The start temperature of condenser water side";
        parameter Modelica.Units.SI.Temperature TCHW_start
          "The start temperature of chilled water side";

        parameter Integer n
          "Number of chiller group 1";

        parameter Integer m
          "Number of chiller group 2";

        Modelica.Blocks.Interfaces.RealInput On[n+m](min=0,max=1) "On signal"    annotation (Placement(transformation(extent={{-118,
                  -31},{-100,-49}})));
        Modelica.Blocks.Interfaces.RealInput TCHWSet
          "Temperature setpoint of the chilled water"
          annotation (Placement(transformation(extent={{-118,31},{-100,49}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_CW(redeclare package
            Medium =                                                               MediumCW)
          "Fluid connector a1 (positive design flow direction is from port_a1 to port_b1)"
          annotation (Placement(transformation(extent={{-110,-90},{-90,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_CW(redeclare package
            Medium =                                                               MediumCW)
          "Fluid connector b1 (positive design flow direction is from port_a1 to port_b1)"
          annotation (Placement(transformation(extent={{-110,70},{-90,90}})));
        Modelica.Fluid.Interfaces.FluidPort_b port_b_CHW(redeclare package
            Medium =                                                                MediumCHW)
          "Fluid connector b2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,-90},{110,-70}}),
              iconTransformation(extent={{90,-90},{110,-70}})));
        Modelica.Fluid.Interfaces.FluidPort_a port_a_CHW(redeclare package
            Medium =                                                                MediumCHW)
          "Fluid connector a2 (positive design flow direction is from port_a2 to port_b2)"
          annotation (Placement(transformation(extent={{90,70},{110,90}})));
        Modelica.Blocks.Interfaces.RealOutput P[n+m]
          "Electric power consumed by compressor"
          annotation (Placement(transformation(extent={{100,30},{120,50}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWEntChi(
          redeclare package Medium = MediumCHW,
          allowFlowReversal=true,
          m_flow_nominal=sum(mCHW_flow_nominal))
                                              annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={50,80})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCWLeaChi(
          allowFlowReversal=true,
          redeclare package Medium = MediumCW,
          m_flow_nominal=sum(mCW_flow_nominal))
                                             annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-82,80})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLeaChi(
          allowFlowReversal=true,
          redeclare package Medium = MediumCHW,
          T_start=TCHW_start,
          m_flow_nominal=sum(mCHW_flow_nominal))
                                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={52,-80})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTCWEntChi(
          allowFlowReversal=true,
          redeclare package Medium = MediumCW,
          T_start=TCW_start,
          m_flow_nominal=sum(mCW_flow_nominal))
                                             annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-70,-80})));
        Devices.WaterSide.Chiller ch1[n](
          redeclare package MediumCHW = MediumCHW,
          redeclare package MediumCW = MediumCW,
          dPCHW_nominal=dPCHW_nominal,
          dPCW_nominal=dPCW_nominal,
          mCHW_flow_nominal=mCHW_flow_nominal[1:n],
          mCW_flow_nominal=mCW_flow_nominal[1:n],
          TCW_start=TCW_start,
          TCHW_start=TCHW_start,
          per=per[1:n]) annotation (Placement(transformation(extent={{-10,-8},{10,12}})));

        Devices.WaterSide.Chiller ch2[m](
          redeclare package MediumCHW = MediumCHW,
          redeclare package MediumCW = MediumCW,
          dPCHW_nominal=dPCHW_nominal,
          dPCW_nominal=dPCW_nominal,
          mCHW_flow_nominal=mCHW_flow_nominal[n+1:n+m],
          mCW_flow_nominal=mCW_flow_nominal[n+1:n+m],
          TCW_start=TCW_start,
          TCHW_start=TCHW_start,
          per=per[n+1:n+m]) annotation (Placement(transformation(extent={{-10,22},{10,42}})));

        Modelica.Blocks.Interfaces.RealOutput Rat[n + m] "compressor speed ratio"
          annotation (Placement(transformation(extent={{100,-50},{120,-30}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloCHW(redeclare package
            Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{70,-90},{88,-70}})));
        Buildings.Fluid.Sensors.MassFlowRate senMasFloCW(redeclare package
            Medium =
              MediumCHW)
          annotation (Placement(transformation(extent={{-46,70},{-64,90}})));

      equation
        connect(port_b_CW, port_b_CW) annotation (Line(
            points={{-100,80},{-100,80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(port_a_CW, port_a_CW) annotation (Line(
            points={{-100,-80},{-100,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(senTCHWEntChi.port_a, port_a_CHW) annotation (Line(
            points={{60,80},{100,80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(port_b_CW, senTCWLeaChi.port_b) annotation (Line(
            points={{-100,80},{-92,80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(senTCWEntChi.port_a, port_a_CW) annotation (Line(
            points={{-80,-80},{-100,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(port_b_CHW, port_b_CHW) annotation (Line(
            points={{100,-80},{98,-80},{98,-80},{100,-80}},
            color={0,127,255},
            smooth=Smooth.None,
            thickness=1));
        connect(senTCWLeaChi.port_a, senMasFloCW.port_b) annotation (Line(
            points={{-72,80},{-64,80}},
            color={0,127,255},
            thickness=1));
        connect(senMasFloCHW.port_b, port_b_CHW) annotation (Line(
            points={{88,-80},{94,-80},{100,-80}},
            color={0,127,255},
            thickness=1));
        connect(senTCHWLeaChi.port_b, senMasFloCHW.port_a) annotation (Line(
            points={{62,-80},{66,-80},{70,-80}},
            color={0,127,255},
            thickness=1));

        connect(On, Rat) annotation (Line(
            points={{-109,-40},{110,-40}},
            color={0,0,127},
            pattern=LinePattern.Dash));

        for i in 1:n loop
              connect(ch1[i].TCHWSet, TCHWSet);
              connect(ch1[i].port_a_CW, senTCWEntChi.port_b);
              connect(ch1[i].port_b_CHW, senTCHWLeaChi.port_a);
              connect(ch1[i].port_b_CW, senMasFloCW.port_a);
              connect(ch1[i].port_a_CHW, senTCHWEntChi.port_b);
              connect(ch1[i].P, P[i]);
              connect(ch1[i].On, On[i]);
        end for;

          for i in 1:m loop
              connect(ch2[i].TCHWSet, TCHWSet);
              connect(ch2[i].port_a_CW, senTCWEntChi.port_b);
              connect(ch2[i].port_b_CHW, senTCHWLeaChi.port_a);
              connect(ch2[i].port_b_CW, senMasFloCW.port_a);
              connect(ch2[i].port_a_CHW, senTCHWEntChi.port_b);
              connect(ch2[i].P, P[n+i]);
              connect(ch2[i].On, On[n+i]);
        end for;

        annotation (Documentation(info="<html>
<p>This model is to simulate the chiller system which consists of three chillers and associated local controllers.</p>
</html>",       revisions="<html>
<ul>
<li>
March 19, 2014 by Sen Huang:<br/>
First implementation.
</li>
</ul>
</html>"),       Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                  {100,100}})),
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                  100}}),                                                                   graphics={
              Text(
                extent={{-44,-142},{50,-110}},
                lineColor={0,0,255},
                textString="%name"),
              Rectangle(
                extent={{-28,80},{26,40}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-28,20},{26,-20}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-28,-40},{26,-80}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-60,12},{-28,12}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-28,-50},{-60,-50},{-60,80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-90,-80},{-40,-80},{-40,50},{-34,50},{-28,50}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-28,-10},{-40,-10}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-28,-70},{-40,-70}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{40,-80},{102,-80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{40,-80},{40,50},{26,50}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{26,-12},{40,-12}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{26,-70},{40,-70}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{26,12},{60,12}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{26,-48},{60,-48},{60,80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-100,80},{-60,80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{-28,70},{-60,70}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{100,80},{60,80}},
                color={0,0,255},
                smooth=Smooth.None),
              Line(
                points={{26,72},{60,72}},
                color={0,0,255},
                smooth=Smooth.None),
              Ellipse(
                extent={{-32,76},{-22,64}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-30,74},{-24,66}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-32,18},{-22,6}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-30,16},{-24,8}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-32,-44},{-22,-56}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-30,-46},{-24,-54}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,56},{30,44}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{22,54},{28,46}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,-6},{30,-18}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{22,-8},{28,-16}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,-64},{30,-76}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{22,-66},{28,-74}},
                lineColor={0,0,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,78},{30,66}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,18},{30,6}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{20,-44},{30,-56}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-32,56},{-22,44}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-32,-4},{-22,-16}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-32,-64},{-22,-76}},
                lineColor={0,0,255},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid)}));
      end MultiHeterChillers;

      package Example "Test of the modules"
      extends Modelica.Icons.ExamplesPackage;

        model MultiChillers "Test model for MultiChillerSystem"
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;

          Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_19XR_742kW_5_42COP_VSD
            datChi[3] annotation (Placement(transformation(extent={{-12,42},{8,62}})));

          package MediumCHW = Buildings.Media.Water "Medium model";
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.TemperatureDifference dTCHW_nominal=5.56
            "Temperature difference at the chilled water side";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference at the condenser water wide";
          parameter Modelica.Units.SI.Pressure dPCHW_nominal=91166
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.Pressure dPCW_nominal=92661
            "Pressure difference at the condenser water wide";
          parameter Modelica.Units.SI.Temperature TCHW_nominal=273.15 + 5.56
            "Temperature at the chilled water side";
          parameter Modelica.Units.SI.Temperature TCW_nominal=273.15 + 29.44
            "Temperature at the condenser water wide";
          parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal[:]={-datChi[1].QEva_flow_nominal
              /4200/5.56 for i in linspace(
                  1,
                  3,
                  3)} "Nominal mass flow rate at the chilled water side";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={
              mCHW_flow_nominal[1]*(datChi[1].COP_nominal + 1)/datChi[1].COP_nominal
              for i in linspace(
                  1,
                  3,
                  3)} "Nominal mass flow rate at the condenser water wide";

          BuildingControlEmulator.Subsystems.Chiller.MultiChillers mulChiSys(
            redeclare package MediumCHW = MediumCHW,
            redeclare package MediumCW = MediumCW,
            dPCHW_nominal=dPCHW_nominal,
            dPCW_nominal=dPCW_nominal,
            mCHW_flow_nominal=mCHW_flow_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            TCW_start=273.15 + 29.44,
            TCHW_start=273.15 + 5.56,
            n=3,
            per=datChi)
            annotation (Placement(transformation(extent={{-8,-12},{12,8}})));
          Modelica.Blocks.Sources.Step OnA(height=1, startTime=0) annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
          Modelica.Blocks.Sources.Step OnB(          startTime=21600,
            height=1,
            offset=0)                                                 annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Modelica.Blocks.Sources.Step OnC(          startTime=43200,
            height=1,
            offset=0)                                                 annotation (Placement(transformation(extent={{80,70},{60,90}})));
          Modelica.Blocks.Sources.Constant TCHWSet(k=273.15 + 5.56)
            annotation (Placement(transformation(extent={{80,30},{60,50}})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(redeclare package Medium =
                       MediumCW, nPorts=1) "Sink for CW" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-70,4})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            redeclare package Medium = MediumCW,
            nPorts=1,
            m_flow=sum(mCW_flow_nominal),
            use_m_flow_in=true,
            use_T_in=false,
            T(displayUnit="K") = 273.15 + 21.11) "Source for CW"
            annotation (Placement(transformation(extent={{-48,-50},{-28,-30}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCHW(
            use_T_in=true,
            redeclare package Medium = MediumCHW,
            nPorts=1,
            m_flow=sum(mCW_flow_nominal),
            use_m_flow_in=true,
            T=298.15) "Source for CHW"
            annotation (Placement(transformation(extent={{42,-24},{22,-4}})));
          Buildings.Fluid.Sources.Boundary_pT sinCHW(redeclare package Medium =
                       MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={70,-50})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLeaChi(
              redeclare package Medium = MediumCHW, m_flow_nominal=sum(mCHW_flow_nominal),
            T_start=273.15 + 5.56)
            annotation (Placement(transformation(extent={{20,-60},{40,-40}})));
          Modelica.Blocks.Sources.Sine TCHWEntChi(
            f=1/21600,
            amplitude=0,
            offset=273.15 + 5.56 + 5.56)
            annotation (Placement(transformation(extent={{80,-22},{60,-2}})));
          Modelica.Blocks.Sources.RealExpression mCW_flow(y=(OnA.y + OnB.y + OnC.y)*mCW_flow_nominal[1])
            annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
          Modelica.Blocks.Sources.RealExpression mCHW_flow(y=(OnA.y + OnB.y + OnC.y)*mCHW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,2},{60,22}})));

        equation

          connect(TCHWSet.y, mulChiSys.TCHWSet) annotation (Line(
              points={{59,40},{-20,40},{-20,2},{-8.9,2}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1], mulChiSys.port_b_CW)
            annotation (Line(
              points={{-60,4},{-36,4},{-36,6},{-8,6}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(souCW.ports[1], mulChiSys.port_a_CW)
            annotation (Line(
              points={{-28,-40},{-20,-40},{-20,-10},{-8,-10}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(TCHWEntChi.y,souCHW. T_in)
            annotation (Line(
              points={{59,-12},{52,-12},{52,-10},{44,-10}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(senTCHWLeaChi.port_b,sinCHW. ports[1])
            annotation (Line(
              points={{40,-50},{60,-50}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(souCHW.ports[1], mulChiSys.port_a_CHW)
            annotation (Line(
              points={{22,-14},{18,-14},{18,6},{12,6}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(mulChiSys.port_b_CHW,senTCHWLeaChi. port_a)
            annotation (Line(
              points={{12,-10},{16,-10},{16,-50},{20,-50}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(mCW_flow.y, souCW.m_flow_in)
            annotation (Line(
              points={{-59,-60},{-54,-60},{-54,-32},{-50,-32}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mCHW_flow.y, souCHW.m_flow_in)
            annotation (Line(
              points={{59,12},{52,12},{52,-6},{44,-6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(OnA.y, mulChiSys.On[1]) annotation (Line(
              points={{-59,40},{-44,40},{-44,-5.4},{-8.9,-5.4}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, mulChiSys.On[2]) annotation (Line(
              points={{-59,80},{-44,80},{-28,80},{-28,-6},{-8.9,-6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnC.y, mulChiSys.On[3]) annotation (Line(
              points={{59,80},{8,80},{8,90},{-36,90},{-36,-6.6},{-8.9,-6.6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/Chiller/Example/MultiChillerSystem.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end MultiChillers;

        model MultiHeterChillers "Test model for MultiChillerSystem"
          import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
          extends Modelica.Icons.Example;

          Buildings.Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_Carrier_19XR_742kW_5_42COP_VSD
            datChi[3] annotation (Placement(transformation(extent={{-12,42},{8,62}})));

          package MediumCHW = Buildings.Media.Water "Medium model";
          package MediumCW = Buildings.Media.Water "Medium model";
          parameter Modelica.Units.SI.TemperatureDifference dTCHW_nominal=5.56
            "Temperature difference at the chilled water side";
          parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
            "Temperature difference at the condenser water wide";
          parameter Modelica.Units.SI.Pressure dPCHW_nominal=91166
            "Pressure difference at the chilled water side";
          parameter Modelica.Units.SI.Pressure dPCW_nominal=92661
            "Pressure difference at the condenser water wide";
          parameter Modelica.Units.SI.Temperature TCHW_nominal=273.15 + 5.56
            "Temperature at the chilled water side";
          parameter Modelica.Units.SI.Temperature TCW_nominal=273.15 + 29.44
            "Temperature at the condenser water wide";
          parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal[:]={-datChi[1].QEva_flow_nominal
              /4200/5.56 for i in linspace(
                  1,
                  3,
                  3)} "Nominal mass flow rate at the chilled water side";
          parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={
              mCHW_flow_nominal[1]*(datChi[1].COP_nominal + 1)/datChi[1].COP_nominal
              for i in linspace(
                  1,
                  3,
                  3)} "Nominal mass flow rate at the condenser water wide";

          BuildingControlEmulator.Subsystems.Chiller.MultiHeterChillers mulChiSys(
            redeclare package MediumCHW = MediumCHW,
            redeclare package MediumCW = MediumCW,
            dPCHW_nominal=dPCHW_nominal,
            dPCW_nominal=dPCW_nominal,
            mCHW_flow_nominal=mCHW_flow_nominal,
            mCW_flow_nominal=mCW_flow_nominal,
            TCW_start=273.15 + 29.44,
            TCHW_start=273.15 + 5.56,
            n=1,
            m=2,
            per=datChi)
            annotation (Placement(transformation(extent={{-8,-12},{12,8}})));
          Modelica.Blocks.Sources.Step OnA(height=1, startTime=0) annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
          Modelica.Blocks.Sources.Step OnB(          startTime=21600,
            height=1,
            offset=0)                                                 annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
          Modelica.Blocks.Sources.Step OnC(          startTime=43200,
            height=1,
            offset=0)                                                 annotation (Placement(transformation(extent={{80,70},{60,90}})));
          Modelica.Blocks.Sources.Constant TCHWSet(k=273.15 + 5.56)
            annotation (Placement(transformation(extent={{80,30},{60,50}})));
          Buildings.Fluid.Sources.Boundary_pT sinCW(redeclare package Medium =
                       MediumCW, nPorts=1) "Sink for CW" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-70,4})));
          Buildings.Fluid.Sources.MassFlowSource_T souCW(
            redeclare package Medium = MediumCW,
            nPorts=1,
            m_flow=sum(mCW_flow_nominal),
            use_m_flow_in=true,
            use_T_in=false,
            T(displayUnit="K") = 273.15 + 21.11) "Source for CW"
            annotation (Placement(transformation(extent={{-48,-50},{-28,-30}})));
          Buildings.Fluid.Sources.MassFlowSource_T souCHW(
            use_T_in=true,
            redeclare package Medium = MediumCHW,
            nPorts=1,
            m_flow=sum(mCW_flow_nominal),
            use_m_flow_in=true,
            T=298.15) "Source for CHW"
            annotation (Placement(transformation(extent={{42,-24},{22,-4}})));
          Buildings.Fluid.Sources.Boundary_pT sinCHW(redeclare package Medium =
                       MediumCHW, nPorts=1) "Sink for CHW" annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=0,
                origin={70,-50})));
          Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWLeaChi(
              redeclare package Medium = MediumCHW, m_flow_nominal=sum(mCHW_flow_nominal),
            T_start=273.15 + 5.56)
            annotation (Placement(transformation(extent={{20,-60},{40,-40}})));
          Modelica.Blocks.Sources.Sine TCHWEntChi(
            f=1/21600,
            amplitude=0,
            offset=273.15 + 5.56 + 5.56)
            annotation (Placement(transformation(extent={{80,-22},{60,-2}})));
          Modelica.Blocks.Sources.RealExpression mCW_flow(y=(OnA.y + OnB.y + OnC.y)*mCW_flow_nominal[1])
            annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
          Modelica.Blocks.Sources.RealExpression mCHW_flow(y=(OnA.y + OnB.y + OnC.y)*mCHW_flow_nominal[1])
            annotation (Placement(transformation(extent={{80,2},{60,22}})));

        equation

          connect(TCHWSet.y, mulChiSys.TCHWSet) annotation (Line(
              points={{59,40},{-20,40},{-20,2},{-8.9,2}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(sinCW.ports[1], mulChiSys.port_b_CW)
            annotation (Line(
              points={{-60,4},{-36,4},{-36,6},{-8,6}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(souCW.ports[1], mulChiSys.port_a_CW)
            annotation (Line(
              points={{-28,-40},{-20,-40},{-20,-10},{-8,-10}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(TCHWEntChi.y,souCHW. T_in)
            annotation (Line(
              points={{59,-12},{52,-12},{52,-10},{44,-10}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(senTCHWLeaChi.port_b,sinCHW. ports[1])
            annotation (Line(
              points={{40,-50},{60,-50}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(souCHW.ports[1], mulChiSys.port_a_CHW)
            annotation (Line(
              points={{22,-14},{18,-14},{18,6},{12,6}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(mulChiSys.port_b_CHW,senTCHWLeaChi. port_a)
            annotation (Line(
              points={{12,-10},{16,-10},{16,-50},{20,-50}},
              color={0,127,255},
              smooth=Smooth.None,
              thickness=1));
          connect(mCW_flow.y, souCW.m_flow_in)
            annotation (Line(
              points={{-59,-60},{-54,-60},{-54,-32},{-50,-32}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(mCHW_flow.y, souCHW.m_flow_in)
            annotation (Line(
              points={{59,12},{52,12},{52,-6},{44,-6}},
              color={0,0,127},
              smooth=Smooth.None,
              pattern=LinePattern.Dash));
          connect(OnA.y, mulChiSys.On[1]) annotation (Line(
              points={{-59,40},{-44,40},{-44,-5.4},{-8.9,-5.4}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnB.y, mulChiSys.On[2]) annotation (Line(
              points={{-59,80},{-44,80},{-28,80},{-28,-6},{-8.9,-6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(OnC.y, mulChiSys.On[3]) annotation (Line(
              points={{59,80},{8,80},{8,90},{-36,90},{-36,-6.6},{-8.9,-6.6}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          annotation (__Dymola_Commands(file=
                  "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/Chiller/Example/MultiChillerSystem.mos"
                "Simulate and plot"),
            Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})),
            experiment(StopTime=86400),
            __Dymola_experimentSetupOutput);
        end MultiHeterChillers;
      annotation (Documentation(info="<html>
<p>This package contains examples for the use of models that can be found in Chiller.</p>
</html>"));
      end Example;
    annotation ();
    end Chiller;
  end Subsystems;

  package Systems
    model Floor

      replaceable package MediumAir = Modelica.Media.Interfaces.PartialMedium "Medium for the air";

      replaceable package MediumHeaWat =
          Modelica.Media.Interfaces.PartialMedium                                "Medium for the heating water";

      replaceable package MediumCooWat =
          Modelica.Media.Interfaces.PartialMedium                                "Medium for the cooling water";

      parameter Modelica.Units.SI.Pressure PreDroCoiAir
        "Pressure drop in the air side";
      parameter Modelica.Units.SI.Pressure PreDroMixingBoxAir
        "Pressure drop in the air side";
      parameter Modelica.Units.SI.Pressure PreDroCooWat
        "Pressure drop in the water side";

      parameter Modelica.Units.SI.Temperature TemEcoHig=273.15 + 15.58
        "the highest temeprature when the economizer is on";
      parameter Modelica.Units.SI.Temperature TemEcoLow=273.15 + 0
        "the lowest temeprature when the economizer is on";
      parameter Real MixingBoxDamMin = 0.3 "the minimum damper postion";

      parameter Modelica.Units.SI.Time waitTime(min=0) = 0
        "Wait time before transition fires";

      parameter Real HydEff[:] "Hydraulic efficiency";
      parameter Real MotEff[:] "Motor efficiency";
      parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]
        "Volume flow rate curve";
      parameter Modelica.Units.SI.Pressure SupPreCur[:] "Supply Fan Pressure curve";
      parameter Modelica.Units.SI.Pressure RetPreCur[:] "Return Fan Pressure curve";

      parameter Modelica.Units.SI.Pressure PreAirDroMai1
        "Pressure drop 1 across the duct";

      parameter Modelica.Units.SI.Pressure PreAirDroMai2
        "Pressure drop 2 across the main duct";

      parameter Modelica.Units.SI.Pressure PreAirDroMai3
        "Pressure drop 3 across the main duct";

      parameter Modelica.Units.SI.Pressure PreAirDroMai4
        "Pressure drop 4 across the main duct";

      parameter Modelica.Units.SI.Pressure PreAirDroBra1
        "Pressure drop 1 across the duct branch 1";

      parameter Modelica.Units.SI.Pressure PreAirDroBra2
        "Pressure drop 1 across the duct branch 2";

      parameter Modelica.Units.SI.Pressure PreAirDroBra3
        "Pressure drop 1 across the duct branch 3";

      parameter Modelica.Units.SI.Pressure PreAirDroBra4
        "Pressure drop 1 across the duct branch 4";

      parameter Modelica.Units.SI.Pressure PreAirDroBra5
        "Pressure drop 1 across the duct branch 5";

      parameter Modelica.Units.SI.Pressure PreWatDroMai1
        "Pressure drop 1 across the pipe";

      parameter Modelica.Units.SI.Pressure PreWatDroMai2
        "Pressure drop 2 across the main pipe";

      parameter Modelica.Units.SI.Pressure PreWatDroMai3
        "Pressure drop 3 across the main pipe";

      parameter Modelica.Units.SI.Pressure PreWatDroMai4
        "Pressure drop 4 across the main pipe";

      parameter Modelica.Units.SI.Pressure PreWatDroBra1
        "Pressure drop 1 across the pipe branch 1";

      parameter Modelica.Units.SI.Pressure PreWatDroBra2
        "Pressure drop 1 across the pipe branch 2";

      parameter Modelica.Units.SI.Pressure PreWatDroBra3
        "Pressure drop 1 across the pipe branch 3";

      parameter Modelica.Units.SI.Pressure PreWatDroBra4
        "Pressure drop 1 across the pipe branch 4";

      parameter Modelica.Units.SI.Pressure PreWatDroBra5
        "Pressure drop 1 across the pipe branch 5";

      parameter Modelica.Units.SI.MassFlowRate mAirFloRat1
        "mass flow rate for vav 1";

      parameter Modelica.Units.SI.MassFlowRate mAirFloRat2
        "mass flow rate for vav 2";

      parameter Modelica.Units.SI.MassFlowRate mAirFloRat3
        "mass flow rate for vav 3";

      parameter Modelica.Units.SI.MassFlowRate mAirFloRat4
        "mass flow rate for vav 4";

      parameter Modelica.Units.SI.MassFlowRate mAirFloRat5
        "mass flow rate for vav 5";

      parameter Modelica.Units.SI.MassFlowRate mWatFloRat1
        "mass flow rate for vav 1";

      parameter Modelica.Units.SI.MassFlowRate mWatFloRat2
        "mass flow rate for vav 2";

      parameter Modelica.Units.SI.MassFlowRate mWatFloRat3
        "mass flow rate for vav 3";

      parameter Modelica.Units.SI.MassFlowRate mWatFloRat4
        "mass flow rate for vav 4";

      parameter Modelica.Units.SI.MassFlowRate mWatFloRat5
        "mass flow rate for vav 5";

      parameter Modelica.Units.SI.Pressure PreDroAir1
        "Pressure drop in the air side of vav 1";
      parameter Modelica.Units.SI.Pressure PreDroWat1
        "Pressure drop in the water side of vav 1";
      parameter Modelica.Units.SI.Efficiency eps1(max=1) = 0.8
        "Heat exchanger effectiveness of vav 1";

      parameter Modelica.Units.SI.Pressure PreDroAir2
        "Pressure drop in the air side of vav 2";
      parameter Modelica.Units.SI.Pressure PreDroWat2
        "Pressure drop in the water side of vav 2";
      parameter Modelica.Units.SI.Efficiency eps2(max=1) = 0.8
        "Heat exchanger effectiveness of vav 2";

      parameter Modelica.Units.SI.Pressure PreDroAir3
        "Pressure drop in the air side of vav 3";
      parameter Modelica.Units.SI.Pressure PreDroWat3
        "Pressure drop in the water side of vav 3";
      parameter Modelica.Units.SI.Efficiency eps3(max=1) = 0.8
        "Heat exchanger effectiveness of vav 1";

      parameter Modelica.Units.SI.Pressure PreDroAir4
        "Pressure drop in the air side of vav 4";
      parameter Modelica.Units.SI.Pressure PreDroWat4
        "Pressure drop in the water side of vav 4";
      parameter Modelica.Units.SI.Efficiency eps4(max=1) = 0.8
        "Heat exchanger effectiveness of vav 4";

      parameter Modelica.Units.SI.Pressure PreDroAir5
        "Pressure drop in the air side of vav 5";
      parameter Modelica.Units.SI.Pressure PreDroWat5
        "Pressure drop in the water side of vav 5";
      parameter Modelica.Units.SI.Efficiency eps5(max=1) = 0.8
        "Heat exchanger effectiveness of vav 5";

      Subsystems.AirHanUnit.BaseClasses.DuaFanAirHanUnit duaFanAirHanUnit(numTemp=5,
        redeclare package MediumAir = MediumAir,
        redeclare package MediumWat = MediumCooWat,
        PreDroCoiAir=PreDroCoiAir,
        PreDroMixingBoxAir=PreDroMixingBoxAir,
        MixingBox_k=1,
        MixingBox_Ti=60,
        Fan_Ti=60,
        waitTime=waitTime,
        Fan_SpeRat=0.9,
        HydEff=HydEff,
        MotEff=MotEff,
        VolFloCur=VolFloCur,
        SupPreCur=SupPreCur,
        RetPreCur=RetPreCur,
        mAirFloRat=mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5,
        PreDroWat=PreDroCooWat,
        Coi_k=1,
        Coi_Ti=60,
        TemEcoHig=TemEcoHig,
        TemEcoLow=TemEcoLow,
        MixingBoxDamMin=MixingBoxDamMin,
        mWatFloRat=(mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)*(30 - 12.88)/4.2/6,
        mFreAirFloRat=(mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)*0.3,
        UA=-(mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)*(
            1000*17)/Buildings.Fluid.HeatExchangers.BaseClasses.lmtd(
            273.15 + 6,
            273.15 + 12,
            273.15 + 30,
            273.15 + 12.88),
        Fan_k=0.01)
        annotation (Placement(transformation(extent={{-78,14},{-50,-12}})));
      Subsystems.HydDisturbution.FivZonVAVNoVec fivZonVAV(
        redeclare package MediumAir = MediumAir,
        redeclare package MediumWat = MediumHeaWat,
        PreAirDroMai1=PreAirDroMai1,
        PreAirDroMai2=PreAirDroMai2,
        PreAirDroMai3=PreAirDroMai3,
        PreAirDroMai4=PreAirDroMai4,
        PreAirDroBra1=PreAirDroBra1,
        PreAirDroBra2=PreAirDroBra2,
        PreAirDroBra3=PreAirDroBra3,
        PreAirDroBra4=PreAirDroBra4,
        PreAirDroBra5=PreAirDroBra5,
        PreWatDroMai1=PreWatDroMai1,
        PreWatDroMai2=PreWatDroMai2,
        PreWatDroMai3=PreWatDroMai3,
        PreWatDroMai4=PreWatDroMai4,
        PreWatDroBra1=PreWatDroBra1,
        PreWatDroBra2=PreWatDroBra2,
        PreWatDroBra3=PreWatDroBra3,
        PreWatDroBra4=PreWatDroBra4,
        PreWatDroBra5=PreWatDroBra5,
        mAirFloRat1=mAirFloRat1,
        mAirFloRat2=mAirFloRat2,
        mAirFloRat3=mAirFloRat3,
        mAirFloRat4=mAirFloRat4,
        mAirFloRat5=mAirFloRat5,
        mWatFloRat1=mWatFloRat1,
        mWatFloRat2=mWatFloRat2,
        mWatFloRat3=mWatFloRat3,
        mWatFloRat4=mWatFloRat4,
        mWatFloRat5=mWatFloRat5,
        PreDroAir1=PreDroAir1,
        PreDroWat1=PreDroWat1,
        eps1=eps1,
        PreDroAir2=PreDroAir2,
        PreDroWat2=PreDroWat2,
        eps2=eps2,
        PreDroAir3=PreDroAir3,
        PreDroWat3=PreDroWat3,
        eps3=eps3,
        PreDroAir4=PreDroAir4,
        PreDroWat4=PreDroWat4,
        eps4=eps4,
        PreDroAir5=PreDroAir5,
        PreDroWat5=PreDroWat5,
        eps5=eps5)
        annotation (Placement(transformation(extent={{30,-18},{66,-46}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b_CooWat(redeclare package
          Medium =
            MediumCooWat)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-64,-110},{-44,-90}}),
            iconTransformation(extent={{-64,-110},{-44,-90}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a_CooWat(redeclare package
          Medium =
            MediumCooWat)
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-40,-110},{-20,-90}}),
            iconTransformation(extent={{-40,-110},{-20,-90}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a_HeaWat(redeclare package
          Medium =
            MediumHeaWat)
        "Second port, typically outlet"
        annotation (Placement(transformation(extent={{30,-110},{50,-90}}),
            iconTransformation(extent={{30,-110},{50,-90}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b_HeaWat(redeclare package
          Medium =
            MediumHeaWat)
        "Second port, typically outlet"
        annotation (Placement(transformation(extent={{46,-110},{66,-90}}),
            iconTransformation(extent={{46,-110},{66,-90}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_Exh_Air(redeclare package
          Medium =                                                                  MediumAir)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-174,-50},{-154,-30}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_Fre_Air(redeclare package
          Medium =                                                                  MediumAir)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-170,30},{-150,50}})));
      Modelica.Blocks.Routing.BooleanReplicator booleanReplicator(nout=5)
        annotation (Placement(transformation(extent={{-140,-96},{-126,-84}})));
      Modelica.Blocks.Interfaces.BooleanInput OnFan
        "Connector of Boolean input signal"
        annotation (Placement(transformation(extent={{-180,-60},{-160,-40}}),
            iconTransformation(extent={{-180,-60},{-160,-40}})));
      Modelica.Blocks.Interfaces.BooleanInput OnZon
        "Connector of Boolean input signal"
        annotation (Placement(transformation(extent={{-180,-100},{-160,-80}}),
            iconTransformation(extent={{-180,-100},{-160,-80}})));
      Modelica.Blocks.Interfaces.RealInput ZonCooTempSetPoi[5]
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-180,90},{-160,110}}),
            iconTransformation(extent={{-180,90},{-160,110}})));
      Modelica.Blocks.Interfaces.RealInput DisTemPSetPoi
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-180,50},{-160,70}}),
            iconTransformation(extent={{-180,50},{-160,70}})));
      Modelica.Blocks.Interfaces.RealInput PreSetPoi
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-180,0},{-160,20}}),
            iconTransformation(extent={{-180,0},{-160,20}})));
      Modelica.Blocks.Interfaces.RealInput Q_flow[5]
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=-90,
            origin={16,-110}), iconTransformation(
            extent={{10,-10},{-10,10}},
            rotation=-90,
            origin={16,-110})));
      Modelica.Blocks.Interfaces.RealOutput TZon[5]
        "Temperature of the passing fluid"
        annotation (Placement(transformation(extent={{160,-10},{180,10}}),
            iconTransformation(extent={{160,-10},{180,10}})));
      Modelica.Blocks.Interfaces.RealInput ZonHeaTempSetPoi[5]
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-180,70},{-160,90}}),
            iconTransformation(extent={{-180,70},{-160,90}})));
      Modelica.Blocks.Interfaces.RealInput TOut
        "Connector of setpoint input signal" annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=-90,
            origin={-14,-110}),          iconTransformation(
            extent={{10,-10},{-10,10}},
            rotation=-90,
            origin={-14,-110})));
      ReadOverwrite.ReadAhu readAhu
        annotation (Placement(transformation(extent={{28,2},{48,66}})));
      Buildings.Utilities.IO.SignalExchange.Overwrite TSupAirSet(description=
            "Supply air temperature setpoint for AHU", u(
          unit="K",
          min=285.15,
          max=313.15)) "Supply air temperature setpoint"
        annotation (Placement(transformation(extent={{-140,54},{-128,66}})));
      Buildings.Utilities.IO.SignalExchange.Overwrite dpSet(description=
            "Supply duct pressure setpoint for AHU", u(
          unit="Pa",
          min=50,
          max=410)) "Supply duct pressure setpoint"
        annotation (Placement(transformation(extent={{-140,4},{-128,16}})));
      ReadOverwrite.ReadZone reaZonCor(zone="cor")
        annotation (Placement(transformation(extent={{100,114},{120,142}})));
      ReadOverwrite.ReadZone reaZonSou(zone="sou")
        annotation (Placement(transformation(extent={{100,50},{120,78}})));
      ReadOverwrite.ReadZone reaZonEas(zone="eas")
        annotation (Placement(transformation(extent={{100,-14},{120,14}})));
      ReadOverwrite.ReadZone reaZonNor(zone="nor")
        annotation (Placement(transformation(extent={{140,82},{160,110}})));
      ReadOverwrite.ReadZone reaZonWes(zone="wes")
        annotation (Placement(transformation(extent={{140,20},{160,48}})));
      Devices.AirSide.Terminal.Controls.ZonCon zonVAVCon[5](
        MinFlowRateSetPoi=0.3,
        HeatingFlowRateSetPoi=0.5,
        heaCon(Ti=60, yMin=0.01),
        cooCon(k=11, Ti=60))
        "Zone terminal VAV controller (airflow rate, reheat valve)l "
        annotation (Placement(transformation(extent={{-16,120},{4,140}})));
      ReadOverwrite.WriteZoneSup oveZonCor(zone="cor")
        annotation (Placement(transformation(extent={{-120,178},{-100,198}})));
      ReadOverwrite.WriteZoneSup oveZonSou(zone="sou")
        annotation (Placement(transformation(extent={{-120,150},{-100,170}})));
      ReadOverwrite.WriteZoneSup oveZonEas(zone="eas")
        annotation (Placement(transformation(extent={{-120,122},{-100,142}})));
      ReadOverwrite.WriteZoneSup oveZonNor(zone="nor")
        annotation (Placement(transformation(extent={{-120,98},{-100,118}})));
      ReadOverwrite.WriteZoneSup oveZonWes(zone="wes")
        annotation (Placement(transformation(extent={{-120,70},{-100,90}})));
      Buildings.Controls.OBC.CDL.Routing.RealExtractSignal TZonHeaSet(nin=5,
          nout=5)
        annotation (Placement(transformation(extent={{-70,166},{-50,186}})));
      Buildings.Controls.OBC.CDL.Routing.RealExtractSignal TZonCooSet(nin=5,
          nout=5)
        annotation (Placement(transformation(extent={{-72,68},{-52,88}})));
    equation
      connect(fivZonVAV.port_a_Air, duaFanAirHanUnit.port_b_Air) annotation (
          Line(
          points={{30,-37.6},{-10,-37.6},{-10,-22},{-20,-22},{-20,1},{-50,1}},
          color={0,140,72},
          thickness=0.5));
      connect(fivZonVAV.port_b_Air, duaFanAirHanUnit.port_a_Air) annotation (
          Line(
          points={{30,-23.6},{16,-23.6},{16,-4},{-50,-4},{-50,11.4}},
          color={0,140,72},
          thickness=0.5));
      connect(duaFanAirHanUnit.port_b_Wat, port_b_CooWat) annotation (Line(
          points={{-69.6,-12},{-70,-12},{-70,-66},{-54,-66},{-54,-100}},
          color={0,127,255},
          thickness=1));
      connect(duaFanAirHanUnit.port_a_Wat, port_a_CooWat) annotation (Line(
          points={{-61.2,-12},{-62,-12},{-62,-30},{-30,-30},{-30,-100}},
          color={0,127,255},
          thickness=1));
      connect(fivZonVAV.port_a_Wat, port_a_HeaWat) annotation (Line(
          points={{40.8,-46},{40,-46},{40,-100}},
          color={255,0,0},
          thickness=1));
      connect(fivZonVAV.port_b_Wat, port_b_HeaWat) annotation (Line(
          points={{55.2,-46},{56,-46},{56,-100}},
          color={255,0,0},
          thickness=1));
      connect(duaFanAirHanUnit.port_Exh_Air, port_Exh_Air) annotation (Line(
          points={{-78.28,1},{-114,1},{-114,-40},{-164,-40}},
          color={0,140,72},
          thickness=0.5));
      connect(duaFanAirHanUnit.port_Fre_Air, port_Fre_Air) annotation (Line(
          points={{-78,-6.8},{-114,-6.8},{-114,40},{-160,40}},
          color={0,140,72},
          thickness=0.5));
      connect(booleanReplicator.y, fivZonVAV.On) annotation (Line(
          points={{-125.3,-90},{0,-90},{0,-30.32},{28.2,-30.32}},
          color={255,0,255}));
      connect(fivZonVAV.pre, duaFanAirHanUnit.PreMea) annotation (Line(
          points={{67.8,-19.4},{70,-19.4},{70,-16},{-88,-16},{-88,-11.22},{
              -79.4,-11.22}},
          color={0,0,127}));
      connect(fivZonVAV.TZon, duaFanAirHanUnit.ZonTemp) annotation (Line(
          points={{67.8,-40.4},{84,-40.4},{84,-64},{-104,-64},{-104,6.2},{-79.4,
              6.2}},
          color={0,0,127}));

      connect(OnFan, duaFanAirHanUnit.On) annotation (Line(
          points={{-170,-50},{-108,-50},{-108,14},{-79.4,14}},
          color={255,0,255}));
      connect(booleanReplicator.u, OnZon) annotation (Line(
          points={{-141.4,-90},{-170,-90}},
          color={255,0,255}));
      connect(fivZonVAV.Q_flow, Q_flow) annotation (Line(
          points={{28.2,-20.8},{2,-20.8},{2,-70},{16,-70},{16,-110}},
          color={0,0,127}));
      connect(fivZonVAV.TZon, TZon) annotation (Line(
          points={{67.8,-40.4},{146,-40.4},{146,0},{170,0}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(port_a_CooWat, port_a_CooWat) annotation (Line(points={{-30,-100},
              {-30,-100}},     color={0,127,255}));
      connect(duaFanAirHanUnit.TOut, TOut) annotation (Line(
          points={{-79.4,11.4},{-112,11.4},{-112,-74},{-14,-74},{-14,-110}},
          color={0,0,127}));

      connect(OnFan, readAhu.occ_in) annotation (Line(points={{-170,-50},{-112,
              -50},{-112,62},{26,62},{26,62.3826}},  color={255,0,255}));
      connect(duaFanAirHanUnit.TSupAir, readAhu.TSup_in) annotation (Line(
            points={{-48.6,-4.2},{-34,-4.2},{-34,54.8696},{26,54.8696}}, color={0,0,127},
          pattern=LinePattern.Dash));

      connect(duaFanAirHanUnit.TMixAir, readAhu.TMix_in) annotation (Line(
            points={{-48.6,-2.64},{-48.6,-4},{-32,-4},{-32,50.6957},{26,50.6957}},
            color={0,0,127},
          pattern=LinePattern.Dash));
      connect(duaFanAirHanUnit.TRetAir, readAhu.TRet_in) annotation (Line(
            points={{-48.6,8.02},{-28,8.02},{-28,46.5217},{26,46.5217}}, color={0,0,127},
          pattern=LinePattern.Dash));

      connect(duaFanAirHanUnit.V_flowSupAir, readAhu.V_flow_sup_in) annotation (
         Line(points={{-48.6,-1.08},{-26,-1.08},{-26,42.3478},{26,42.3478}},
            color={0,0,127},
          pattern=LinePattern.Dash));
      connect(duaFanAirHanUnit.V_flowRetAir, readAhu.V_flow_ret_in) annotation (
         Line(points={{-48.6,9.58},{-30,9.58},{-30,38.1739},{26,38.1739}},
            color={0,0,127},
          pattern=LinePattern.Dash));
      connect(duaFanAirHanUnit.yDamOutAir, readAhu.yOA_in) annotation (Line(
            points={{-48.6,-11.22},{-24,-11.22},{-24,34.2783},{26,34.2783}},
            color={0,0,127},
          pattern=LinePattern.Dash));
      connect(duaFanAirHanUnit.PreMea, readAhu.dp_in) annotation (Line(points={{-79.4,
              -11.22},{-22,-11.22},{-22,29.8261},{26,29.8261}},        color={0,0,127},
          pattern=LinePattern.Dash));

      connect(duaFanAirHanUnit.PFan,readAhu.PFanTot_in)  annotation (Line(
            points={{-48.6,4.64},{-20,4.64},{-20,25.6522},{26,25.6522}}, color={0,0,127},
          pattern=LinePattern.Dash));

      connect(duaFanAirHanUnit.TSupCHW, readAhu.TCooCoiSup_in) annotation (Line(
            points={{-48.6,-9.4},{-18,-9.4},{-18,21.4783},{26,21.4783}}, color={0,0,127},
          pattern=LinePattern.Dash));

      connect(duaFanAirHanUnit.TRetCHW, readAhu.TCooCoiRet_in) annotation (Line(
            points={{-48.6,2.82},{-16,2.82},{-16,17.3043},{26,17.3043}}, color={0,0,127},
          pattern=LinePattern.Dash));

      connect(readAhu.yCooVal_in, duaFanAirHanUnit.yCooVal) annotation (Line(
            points={{26,13.1304},{-14,13.1304},{-14,6.2},{-48.6,6.2}}, color={0,0,127},
          pattern=LinePattern.Dash));

      connect(duaFanAirHanUnit.V_flowOutAir, readAhu.V_flow_OA_in) annotation (
          Line(points={{-48.6,-6.8},{-48.6,-4},{-12,-4},{-12,10},{26,10},{26,
              8.95652}}, color={0,0,127},
          pattern=LinePattern.Dash));
      connect(TSupAirSet.y, readAhu.TSup_set_in) annotation (Line(
          points={{-127.4,60},{26,60},{26,58.2087}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(DisTemPSetPoi, TSupAirSet.u)
        annotation (Line(points={{-170,60},{-141.2,60}}, color={0,0,127}));
      connect(TSupAirSet.y, duaFanAirHanUnit.DisTemPSetPoi) annotation (Line(
            points={{-127.4,60},{-110,60},{-110,3.6},{-79.4,3.6}}, color={0,0,
              127}));
      connect(PreSetPoi, dpSet.u)
        annotation (Line(points={{-170,10},{-141.2,10}},color={0,0,127}));
      connect(dpSet.y, duaFanAirHanUnit.PreSetPoi) annotation (Line(points={{-127.4,
              10},{-110,10},{-110,8.8},{-79.4,8.8}},     color={0,0,127}));
      connect(fivZonVAV.yDam[1], reaZonCor.yDam_in) annotation (Line(
          points={{67.8,-35.08},{88,-35.08},{88,141},{98,141}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.yDam[2], reaZonSou.yDam_in) annotation (Line(
          points={{67.8,-35.64},{88,-35.64},{88,77},{98,77}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.yDam[3], reaZonEas.yDam_in) annotation (Line(
          points={{67.8,-36.2},{88,-36.2},{88,13},{98,13}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.yDam[4], reaZonNor.yDam_in) annotation (Line(
          points={{67.8,-36.76},{128,-36.76},{128,109},{138,109}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.yDam[5], reaZonWes.yDam_in) annotation (Line(
          points={{67.8,-37.32},{128,-37.32},{128,47},{138,47}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.yReaHea[1], reaZonCor.yReheaVal_in) annotation (Line(
          points={{67.8,-30.88},{92,-30.88},{92,138},{98,138}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.yReaHea[2], reaZonSou.yReheaVal_in) annotation (Line(
          points={{67.8,-31.44},{92,-31.44},{92,74},{98,74}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.yReaHea[3], reaZonEas.yReheaVal_in) annotation (Line(
          points={{67.8,-32},{92,-32},{92,10},{98,10}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.yReaHea[4], reaZonNor.yReheaVal_in) annotation (Line(
          points={{67.8,-32.56},{130,-32.56},{130,106},{138,106}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.yReaHea[5], reaZonWes.yReheaVal_in) annotation (Line(
          points={{67.8,-33.12},{130,-33.12},{130,44},{138,44}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.TZon[1], reaZonCor.TZon_in) annotation (Line(
          points={{67.8,-39.28},{84,-39.28},{84,135},{98,135}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.TZon[2], reaZonSou.TZon_in) annotation (Line(
          points={{67.8,-39.84},{84,-39.84},{84,71},{98,71}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.TZon[3], reaZonEas.TZon_in) annotation (Line(
          points={{67.8,-40.4},{84,-40.4},{84,7},{98,7}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.TZon[4], reaZonNor.TZon_in) annotation (Line(
          points={{67.8,-40.96},{126,-40.96},{126,103},{138,103}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.TZon[5], reaZonWes.TZon_in) annotation (Line(
          points={{67.8,-41.52},{126,-41.52},{126,41},{138,41}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.TSup[1], reaZonCor.TSup_in) annotation (Line(points={{67.8,
              -43.48},{94,-43.48},{94,132},{98,132}},      color={0,0,127}));
      connect(fivZonVAV.TSup[2], reaZonSou.TSup_in) annotation (Line(points={{
              67.8,-44.04},{94,-44.04},{94,68},{98,68}}, color={0,0,127}));
      connect(fivZonVAV.TSup[3], reaZonEas.TSup_in) annotation (Line(points={{
              67.8,-44.6},{94,-44.6},{94,4},{98,4}}, color={0,0,127}));
      connect(fivZonVAV.TSup[4], reaZonNor.TSup_in) annotation (Line(
          points={{67.8,-45.16},{132,-45.16},{132,100},{138,100}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.TSup[5], reaZonWes.TSup_in) annotation (Line(
          points={{67.8,-45.72},{134,-45.72},{134,38},{138,38}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.Vflow[1], reaZonCor.V_flow_in) annotation (Line(
          points={{67.8,-22.48},{82,-22.48},{82,129.2},{98,129.2}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.Vflow[2], reaZonSou.V_flow_in) annotation (Line(
          points={{67.8,-23.04},{82,-23.04},{82,65.2},{98,65.2}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.Vflow[3], reaZonEas.V_flow_in) annotation (Line(
          points={{67.8,-23.6},{82,-23.6},{82,1.2},{98,1.2}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.Vflow[4], reaZonNor.V_flow_in) annotation (Line(
          points={{67.8,-24.16},{124,-24.16},{124,97.2},{138,97.2}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.Vflow[5], reaZonWes.V_flow_in) annotation (Line(
          points={{67.8,-24.72},{124,-24.72},{124,35.2},{138,35.2}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.Vflow_set[1], reaZonCor.Vflow_set_in) annotation (Line(
          points={{67.8,-26.68},{80,-26.68},{80,126.6},{98,126.6}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.Vflow_set[2], reaZonSou.Vflow_set_in) annotation (Line(
          points={{67.8,-27.24},{80,-27.24},{80,62.6},{98,62.6}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.Vflow_set[3], reaZonEas.Vflow_set_in) annotation (Line(
          points={{67.8,-27.8},{80,-27.8},{80,-1.4},{98,-1.4}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.Vflow_set[4], reaZonNor.Vflow_set_in) annotation (Line(
          points={{67.8,-28.36},{122,-28.36},{122,94.6},{138,94.6}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAV.Vflow_set[5], reaZonWes.Vflow_set_in) annotation (Line(
          points={{67.8,-28.92},{124,-28.92},{124,32.6},{138,32.6}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(zonVAVCon.yValPos, fivZonVAV.yVal) annotation (Line(points={{5,
              124},{6,124},{6,-40.4},{28.2,-40.4}}, color={0,0,127}));
      connect(zonVAVCon.yAirFlowSetPoi, fivZonVAV.AirFlowRatSetPoi) annotation (
         Line(points={{5,128},{8,128},{8,-44.04},{28.2,-44.04}}, color={0,0,127}));
      connect(zonVAVCon.yHea, fivZonVAV.yHea) annotation (Line(points={{5,134},
              {8,134},{8,-32.84},{28.2,-32.84}}, color={0,0,127}));
      connect(zonVAVCon.yCoo, fivZonVAV.yCoo) annotation (Line(points={{5,138},
              {10,138},{10,-35.64},{28.2,-35.64}}, color={0,0,127}));
      connect(zonVAVCon.T, fivZonVAV.TZon) annotation (Line(points={{-18,130},{
              -26,130},{-26,98},{88,98},{88,-40.4},{67.8,-40.4}}, color={0,0,
              127}));
      connect(ZonHeaTempSetPoi[1], oveZonCor.TZonHeaSet_in) annotation (Line(
            points={{-170,72},{-150,72},{-150,192},{-122,192}}, color={0,0,127}));
      connect(ZonHeaTempSetPoi[2], oveZonSou.TZonHeaSet_in) annotation (Line(
            points={{-170,76},{-150,76},{-150,164},{-122,164}}, color={0,0,127}));
      connect(ZonHeaTempSetPoi[3], oveZonEas.TZonHeaSet_in) annotation (Line(
            points={{-170,80},{-150,80},{-150,136},{-122,136}}, color={0,0,127}));
      connect(ZonHeaTempSetPoi[4], oveZonNor.TZonHeaSet_in) annotation (Line(
            points={{-170,84},{-150,84},{-150,112},{-122,112}}, color={0,0,127}));
      connect(ZonHeaTempSetPoi[5], oveZonWes.TZonHeaSet_in) annotation (Line(
            points={{-170,88},{-150,88},{-150,84},{-122,84}}, color={0,0,127}));
      connect(ZonCooTempSetPoi[1], oveZonCor.TZonCooSet_in) annotation (Line(
            points={{-170,92},{-154,92},{-154,184},{-122,184}}, color={0,0,127}));
      connect(ZonCooTempSetPoi[2], oveZonSou.TZonCooSet_in) annotation (Line(
            points={{-170,96},{-154,96},{-154,156},{-122,156}}, color={0,0,127}));
      connect(ZonCooTempSetPoi[3], oveZonEas.TZonCooSet_in) annotation (Line(
            points={{-170,100},{-154,100},{-154,128},{-122,128}}, color={0,0,
              127}));
      connect(ZonCooTempSetPoi[4], oveZonNor.TZonCooSet_in)
        annotation (Line(points={{-170,104},{-122,104}}, color={0,0,127}));
      connect(ZonCooTempSetPoi[5], oveZonWes.TZonCooSet_in) annotation (Line(
            points={{-170,108},{-150,108},{-150,76},{-122,76}}, color={0,0,127}));
      connect(oveZonCor.TZonHeaSet_out, TZonHeaSet.u[1]) annotation (Line(
            points={{-99,192},{-76,192},{-76,174.4},{-72,174.4}}, color={0,0,
              127}));
      connect(oveZonSou.TZonHeaSet_out, TZonHeaSet.u[2]) annotation (Line(
            points={{-99,164},{-76,164},{-76,175.2},{-72,175.2}}, color={0,0,
              127}));
      connect(oveZonEas.TZonHeaSet_out, TZonHeaSet.u[3]) annotation (Line(
            points={{-99,136},{-76,136},{-76,176},{-72,176}}, color={0,0,127}));
      connect(oveZonNor.TZonHeaSet_out, TZonHeaSet.u[4]) annotation (Line(
            points={{-99,112},{-76,112},{-76,176.8},{-72,176.8}}, color={0,0,
              127}));
      connect(oveZonWes.TZonHeaSet_out, TZonHeaSet.u[5]) annotation (Line(
            points={{-99,84},{-76,84},{-76,176},{-72,176},{-72,177.6}}, color={
              0,0,127}));
      connect(TZonHeaSet.y, zonVAVCon.THeaSetPoi) annotation (Line(points={{-48,
              176},{-24,176},{-24,124},{-18,124}}, color={0,0,127}));
      connect(oveZonCor.TZonCooSet_out, TZonCooSet.u[1]) annotation (Line(
            points={{-99,184},{-80,184},{-80,76.4},{-74,76.4}}, color={0,0,127}));
      connect(oveZonSou.TZonCooSet_out, TZonCooSet.u[2]) annotation (Line(
            points={{-99,156},{-80,156},{-80,77.2},{-74,77.2}}, color={0,0,127}));
      connect(oveZonEas.TZonCooSet_out, TZonCooSet.u[3]) annotation (Line(
            points={{-99,128},{-80,128},{-80,78},{-74,78}}, color={0,0,127}));
      connect(oveZonNor.TZonCooSet_out, TZonCooSet.u[4]) annotation (Line(
            points={{-99,104},{-80,104},{-80,78.8},{-74,78.8}}, color={0,0,127}));
      connect(oveZonWes.TZonCooSet_out, TZonCooSet.u[5]) annotation (Line(
            points={{-99,76},{-80,76},{-80,79.6},{-74,79.6}}, color={0,0,127}));
      connect(TZonCooSet.y, zonVAVCon.TCooSetPoi) annotation (Line(points={{-50,
              78},{-28,78},{-28,136},{-18,136}}, color={0,0,127}));
      connect(TZonCooSet.y, duaFanAirHanUnit.CooTempSetPoi) annotation (Line(
            points={{-50,78},{-50,58},{-110,58},{-110,-4.2},{-79.4,-4.2}},
            color={0,0,127}));
      connect(TZonHeaSet.y, duaFanAirHanUnit.HeaTempSetPoi) annotation (Line(
            points={{-48,176},{-48,60},{-106,60},{-106,-9.4},{-79.4,-9.4}},
            color={0,0,127}));
      connect(TZonHeaSet.y[1], reaZonCor.TRoo_Hea_set_in) annotation (Line(
            points={{-48,174.4},{76,174.4},{76,123.8},{98,123.8}}, color={0,0,
              127}));
      connect(TZonHeaSet.y[2], reaZonSou.TRoo_Hea_set_in) annotation (Line(
            points={{-48,175.2},{76,175.2},{76,59.8},{98,59.8}}, color={0,0,127}));
      connect(TZonHeaSet.y[3], reaZonEas.TRoo_Hea_set_in) annotation (Line(
            points={{-48,176},{76,176},{76,-4.2},{98,-4.2}}, color={0,0,127}));
      connect(TZonHeaSet.y[4], reaZonNor.TRoo_Hea_set_in) annotation (Line(
            points={{-48,176.8},{76,176.8},{76,91.8},{138,91.8}}, color={0,0,
              127}));
      connect(TZonHeaSet.y[5], reaZonWes.TRoo_Hea_set_in) annotation (Line(
            points={{-48,177.6},{78,177.6},{78,29.8},{138,29.8}}, color={0,0,
              127}));
      connect(TZonCooSet.y[1], reaZonCor.TRoo_Coo_set_in) annotation (Line(
            points={{-50,76.4},{70,76.4},{70,120.6},{98,120.6}}, color={0,0,127}));
      connect(TZonCooSet.y[2], reaZonSou.TRoo_Coo_set_in) annotation (Line(
            points={{-50,77.2},{70,77.2},{70,56.6},{98,56.6}}, color={0,0,127}));
      connect(TZonCooSet.y[3], reaZonEas.TRoo_Coo_set_in) annotation (Line(
            points={{-50,78},{70,78},{70,-7.4},{98,-7.4}}, color={0,0,127}));
      connect(TZonCooSet.y[4], reaZonNor.TRoo_Coo_set_in) annotation (Line(
            points={{-50,78.8},{70,78.8},{70,88.6},{138,88.6}}, color={0,0,127}));
      connect(TZonCooSet.y[5], reaZonWes.TRoo_Coo_set_in) annotation (Line(
            points={{-50,79.6},{70,79.6},{70,26.6},{138,26.6}}, color={0,0,127}));
      connect(zonVAVCon[1].yCoo, reaZonCor.yCoo_in) annotation (Line(points={{5,138},
              {68,138},{68,118},{98,118}},      color={0,0,127}));
      connect(zonVAVCon[2].yCoo, reaZonSou.yCoo_in) annotation (Line(points={{5,
              138},{68,138},{68,54},{98,54}}, color={0,0,127}));
      connect(zonVAVCon[3].yCoo, reaZonEas.yCoo_in) annotation (Line(points={{5,
              138},{68,138},{68,-10},{98,-10}}, color={0,0,127}));
      connect(zonVAVCon[4].yCoo, reaZonNor.yCoo_in) annotation (Line(points={{5,
              138},{70,138},{70,86},{138,86}}, color={0,0,127}));
      connect(zonVAVCon[5].yCoo, reaZonWes.yCoo_in) annotation (Line(points={{5,
              138},{68,138},{68,24},{138,24}}, color={0,0,127}));
      connect(zonVAVCon[1].yHea, reaZonCor.yHea_in) annotation (Line(points={{5,134},
              {66,134},{66,115},{98,115}},      color={0,0,127}));
      connect(zonVAVCon[2].yHea, reaZonSou.yHea_in) annotation (Line(points={{5,
              134},{66,134},{66,51},{98,51}}, color={0,0,127}));
      connect(zonVAVCon[3].yHea, reaZonEas.yHea_in) annotation (Line(points={{5,
              134},{66,134},{66,-13},{98,-13}}, color={0,0,127}));
      connect(zonVAVCon[4].yHea, reaZonNor.yHea_in) annotation (Line(points={{5,
              134},{66,134},{66,83},{138,83}}, color={0,0,127}));
      connect(zonVAVCon[5].yHea, reaZonWes.yHea_in) annotation (Line(points={{5,
              134},{66,134},{66,21},{138,21}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-160,
                -100},{160,140}}),                                  graphics={
            Rectangle(
              extent={{-160,140},{160,-100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(extent={{-80,90},{80,-50}}, lineColor={0,0,127}),
            Rectangle(extent={{-40,50},{40,-10}}, lineColor={0,0,127}),
            Line(points={{-80,90},{-40,50}}, color={0,0,127}),
            Line(points={{80,90},{40,50}}, color={0,0,127}),
            Line(points={{-80,-50},{-40,-10}}, color={0,0,127}),
            Line(points={{40,-10},{80,-50}}, color={0,0,127}),
            Text(
              extent={{-154,142},{146,182}},
              textString="%name",
              textColor={0,0,255})}),                                Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-160,-100},{
                160,200}})));
    end Floor;

    model FloorDX

      replaceable package MediumAir = Modelica.Media.Interfaces.PartialMedium "Medium for the air";
      parameter Modelica.Units.SI.Pressure PreDroCoiAir
        "Pressure drop in the air side";
      parameter Modelica.Units.SI.Pressure PreDroMixingBoxAir
        "Pressure drop in the air side";
      parameter Modelica.Units.SI.Temperature TemEcoHig=273.15 + 15.58
        "the highest temeprature when the economizer is on";
      parameter Modelica.Units.SI.Temperature TemEcoLow=273.15 + 0
        "the lowest temeprature when the economizer is on";
      parameter Real MixingBoxDamMin = 0.3 "the minimum damper postion";
      parameter Modelica.Units.SI.Time waitTime(min=0) = 0
        "Wait time before transition fires";
      parameter Real HydEff[:] "Hydraulic efficiency";
      parameter Real MotEff[:] "Motor efficiency";
      parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]
        "Volume flow rate curve";
      parameter Modelica.Units.SI.Pressure SupPreCur[:] "Supply Fan Pressure curve";
      parameter Modelica.Units.SI.Pressure RetPreCur[:] "Return Fan Pressure curve";
      parameter Modelica.Units.SI.Time minOffTim(min=0) = 0 "Minimum off time";
      parameter Modelica.Units.SI.Time minOnTim(min=0) = 0 "Minimum on time";
      parameter Real dT
          "Temperature control deadband";
      parameter Modelica.Units.SI.Pressure PreAirDroMai1
        "Pressure drop 1 across the duct";
      parameter Modelica.Units.SI.Pressure PreAirDroMai2
        "Pressure drop 2 across the main duct";
      parameter Modelica.Units.SI.Pressure PreAirDroMai3
        "Pressure drop 3 across the main duct";
      parameter Modelica.Units.SI.Pressure PreAirDroMai4
        "Pressure drop 4 across the main duct";
      parameter Modelica.Units.SI.Pressure PreAirDroBra1
        "Pressure drop 1 across the duct branch 1";
      parameter Modelica.Units.SI.Pressure PreAirDroBra2
        "Pressure drop 1 across the duct branch 2";
      parameter Modelica.Units.SI.Pressure PreAirDroBra3
        "Pressure drop 1 across the duct branch 3";
      parameter Modelica.Units.SI.Pressure PreAirDroBra4
        "Pressure drop 1 across the duct branch 4";
      parameter Modelica.Units.SI.Pressure PreAirDroBra5
        "Pressure drop 1 across the duct branch 5";
      parameter Modelica.Units.SI.MassFlowRate mAirFloRat1
        "mass flow rate for vav 1";
      parameter Modelica.Units.SI.MassFlowRate mAirFloRat2
        "mass flow rate for vav 2";
      parameter Modelica.Units.SI.MassFlowRate mAirFloRat3
        "mass flow rate for vav 3";
      parameter Modelica.Units.SI.MassFlowRate mAirFloRat4
        "mass flow rate for vav 4";
      parameter Modelica.Units.SI.MassFlowRate mAirFloRat5
        "mass flow rate for vav 5";
      parameter Modelica.Units.SI.Pressure PreDroAir1
        "Pressure drop in the air side of vav 1";
      parameter Modelica.Units.SI.Pressure PreDroAir2
        "Pressure drop in the air side of vav 2";
      parameter Modelica.Units.SI.Pressure PreDroAir3
        "Pressure drop in the air side of vav 3";
      parameter Modelica.Units.SI.Pressure PreDroAir4
        "Pressure drop in the air side of vav 4";
      parameter Modelica.Units.SI.Pressure PreDroAir5
        "Pressure drop in the air side of vav 5";
      parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal1
        "rated heat flow rate for heating of vav 1";
      parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal2
        "rated heat flow rate for heating of vav 2";
      parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal3
        "rated heat flow rate for heating of vav 3";
      parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal4
        "rated heat flow rate for heating of vav 4";
      parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal5
        "rated heat flow rate for heating of vav 5";

      Subsystems.AirHanUnit.BaseClasses.DuaFanAirHanUnitDX
                                                         duaFanAirHanUnitDX(
                                                                          numTemp=5,
        redeclare package MediumAir = MediumAir,
        PreDroCoiAir=PreDroCoiAir,
        PreDroMixingBoxAir=PreDroMixingBoxAir,
        MixingBox_k=1,
        MixingBox_Ti=60,
        Fan_Ti=60,
        waitTime=900,
        Fan_SpeRat=0.9,
        HydEff=HydEff,
        MotEff=MotEff,
        VolFloCur=VolFloCur,
        SupPreCur=SupPreCur,
        RetPreCur=RetPreCur,
        mAirFloRat=mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5,
        TemEcoHig=TemEcoHig,
        TemEcoLow=TemEcoLow,
        MixingBoxDamMin=MixingBoxDamMin,
        mFreAirFloRat=(mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)*0.3,
        Fan_k=0.01,
        minOffTim=minOffTim,
        minOnTim=minOnTim,
        dT=dT,
        datCoi=datCoi)
        annotation (Placement(transformation(extent={{-68,-12},{-40,14}})));
      Subsystems.HydDisturbution.FivZonVAVDX
                                           fivZonVAVDX(
                                                     redeclare package
          MediumAir =                                                              MediumAir,
        PreAirDroMai1=PreAirDroMai1,
        PreAirDroMai2=PreAirDroMai2,
        PreAirDroMai3=PreAirDroMai3,
        PreAirDroMai4=PreAirDroMai4,
        PreAirDroBra1=PreAirDroBra1,
        PreAirDroBra2=PreAirDroBra2,
        PreAirDroBra3=PreAirDroBra3,
        PreAirDroBra4=PreAirDroBra4,
        PreAirDroBra5=PreAirDroBra5,
        mAirFloRat1=mAirFloRat1,
        mAirFloRat2=mAirFloRat2,
        mAirFloRat3=mAirFloRat3,
        mAirFloRat4=mAirFloRat4,
        mAirFloRat5=mAirFloRat5,
        PreDroAir1=PreDroAir1,
        Q_flow_nominal1=Q_flow_nominal1,
        PreDroAir2=PreDroAir2,
        Q_flow_nominal2=Q_flow_nominal2,
        PreDroAir3=PreDroAir3,
        Q_flow_nominal3=Q_flow_nominal3,
        PreDroAir4=PreDroAir4,
        Q_flow_nominal4=Q_flow_nominal4,
        PreDroAir5=PreDroAir5,
        Q_flow_nominal5=Q_flow_nominal5)
        annotation (Placement(transformation(extent={{18,-48},{72,0}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_Exh_Air(redeclare package
          Medium =                                                                  MediumAir)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-110,-50},{-90,-30}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_Fre_Air(redeclare package
          Medium =                                                                  MediumAir)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
      Modelica.Blocks.Routing.BooleanReplicator booleanReplicator(nout=5)
        annotation (Placement(transformation(extent={{-56,-96},{-42,-84}})));
      Modelica.Blocks.Interfaces.BooleanInput OnFan
        "Connector of Boolean input signal"
        annotation (Placement(transformation(extent={{-124,-72},{-100,-48}})));
      Modelica.Blocks.Interfaces.BooleanInput OnZon
        "Connector of Boolean input signal"
        annotation (Placement(transformation(extent={{-124,-112},{-100,-88}})));
      Modelica.Blocks.Interfaces.RealInput ZonCooTempSetPoi[5]
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-124,88},{-100,112}})));
      Modelica.Blocks.Interfaces.RealInput DisTemPSetPoi
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-124,48},{-100,72}})));
      Modelica.Blocks.Interfaces.RealInput PreSetPoi
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-122,10},{-100,32}})));
      Modelica.Blocks.Interfaces.RealInput AirFlowRatSetPoi[5]
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-122,-30},{-100,-8}})));
      Modelica.Blocks.Interfaces.RealInput yVal[5]
        "Actuator position (0: closed, 1: open)"
        annotation (Placement(transformation(extent={{-124,-92},{-100,-68}})));
      Modelica.Blocks.Interfaces.RealInput Q_flow[5]
        annotation (Placement(transformation(extent={{122,-92},{100,-70}})));
      Modelica.Blocks.Interfaces.RealOutput TZon[5]
        "Temperature of the passing fluid"
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      Modelica.Blocks.Interfaces.RealInput ZonHeaTempSetPoi[5]
        "Connector of setpoint input signal"
        annotation (Placement(transformation(extent={{-124,68},{-100,92}})));
      parameter
        Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.SingleSpeed.Carrier_Comfort_50ES060
        datCoi(sta={
            Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.BaseClasses.Stage(
            spe=1800,
            nomVal=
              Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.BaseClasses.NominalValues(
              Q_flow_nominal=-17500.95,
              COP_nominal=3.9,
              SHR_nominal=0.78,
              m_flow_nominal=1.2*0.944),
            perCur=
              Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.Generic.BaseClasses.PerformanceCurve(
              capFunT={1.6380187,-0.0747347,0.0029747,0.0015201,-0.0000519,-0.0004509},
              capFunFF={0.8185792,0.2831771,-0.1017563},
              EIRFunT={-0.2209648,0.1033303,-0.0030061,-0.0070657,0.0006322,-0.0002496},
              EIRFunFF={1.0380778,-0.2013868,0.1633090},
              TConInMin=273.15 + 23.89,
              TConInMax=273.15 + 51.67,
              TEvaInMin=273.15 + 13.89,
              TEvaInMax=273.15 + 22.22,
              ffMin=0.875,
              ffMax=1.125))})
        annotation (Placement(transformation(extent={{40,80},{60,100}})));
      Modelica.Blocks.Interfaces.RealInput TOut
        annotation (Placement(transformation(extent={{122,68},{100,90}})));
    equation
      connect(fivZonVAVDX.port_a_Air, duaFanAirHanUnitDX.port_b_Air) annotation (
          Line(
          points={{18,-14.4},{-10,-14.4},{-10,-22},{-20,-22},{-20,1},{-40,1}},
          color={0,127,255},
          thickness=0.5));
      connect(fivZonVAVDX.port_b_Air, duaFanAirHanUnitDX.port_a_Air) annotation (
          Line(
          points={{18,-38.4},{-20,-38.4},{-20,-68},{-40,-68},{-40,-9.4}},
          color={0,127,255},
          thickness=0.5));
      connect(duaFanAirHanUnitDX.port_Exh_Air, port_Exh_Air) annotation (Line(
          points={{-68.28,1},{-76,1},{-76,0},{-80,0},{-80,-40},{-100,-40}},
          color={0,127,255},
          thickness=0.5));
      connect(duaFanAirHanUnitDX.port_Fre_Air, port_Fre_Air) annotation (Line(
          points={{-68,8.8},{-74,8.8},{-74,8},{-80,8},{-80,40},{-100,40}},
          color={0,127,255},
          thickness=0.5));
      connect(booleanReplicator.y, fivZonVAVDX.On) annotation (Line(
          points={{-41.3,-90},{-41.3,-92},{0,-92},{0,-24},{15.3,-24}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(fivZonVAVDX.pre, duaFanAirHanUnitDX.PreMea) annotation (Line(
          points={{74.7,-33.6},{92,-33.6},{92,8.8},{-38.6,8.8}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAVDX.TZon, duaFanAirHanUnitDX.ZonTemp) annotation (Line(
          points={{74.7,-14.4},{78,-14.4},{78,-16},{82,-16},{82,-62},{-30,-62},{-30,
              -6.8},{-38.6,-6.8}},
          color={0,0,127},
          pattern=LinePattern.Dash));

      connect(OnFan, duaFanAirHanUnitDX.On) annotation (Line(
          points={{-112,-60},{-74,-60},{-74,-12},{-69.4,-12}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(booleanReplicator.u, OnZon) annotation (Line(
          points={{-57.4,-90},{-72,-90},{-72,-100},{-112,-100}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(duaFanAirHanUnitDX.DisTemPSetPoi, DisTemPSetPoi) annotation (Line(
          points={{-69.4,-1.6},{-94,-1.6},{-94,60},{-112,60}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(duaFanAirHanUnitDX.PreSetPoi, PreSetPoi) annotation (Line(
          points={{-69.4,-6.8},{-98,-6.8},{-98,21},{-111,21}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAVDX.AirFlowRatSetPoi, AirFlowRatSetPoi) annotation (Line(
          points={{15.3,0},{-2,0},{-2,-19},{-111,-19}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAVDX.yVal, yVal) annotation (Line(
          points={{15.3,-9.6},{-6,-9.6},{-6,-80},{-112,-80}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAVDX.Q_flow, Q_flow) annotation (Line(
          points={{15.3,-43.2},{10,-43.2},{10,-81},{111,-81}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(fivZonVAVDX.TZon, TZon) annotation (Line(
          points={{74.7,-14.4},{96,-14.4},{96,0},{110,0}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(duaFanAirHanUnitDX.CooTempSetPoi, ZonCooTempSetPoi) annotation (Line(
          points={{-69.4,6.2},{-78,6.2},{-78,100},{-112,100}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(ZonHeaTempSetPoi, duaFanAirHanUnitDX.HeaTempSetPoi) annotation (Line(
          points={{-112,80},{-74,80},{-74,11.4},{-69.4,11.4}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(duaFanAirHanUnitDX.TOut, TOut) annotation (Line(
          points={{-38.6,-3.16},{-8,-3.16},{-8,60},{80,60},{80,79},{111,79}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(extent={{-80,60},{80,-80}}, lineColor={0,0,127}),
            Rectangle(extent={{-40,20},{40,-40}}, lineColor={0,0,127}),
            Line(points={{-80,60},{-40,20}}, color={0,0,127}),
            Line(points={{80,60},{40,20}}, color={0,0,127}),
            Line(points={{-80,-80},{-40,-40}}, color={0,0,127}),
            Line(points={{40,-40},{80,-80}}, color={0,0,127})}),     Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end FloorDX;

    model ChillerPlant "a typical chiller plant"

      replaceable package MediumCHW = Modelica.Media.Interfaces.PartialMedium
        "Medium model";
      replaceable package MediumCW = Modelica.Media.Interfaces.PartialMedium
        "Medium model";
      parameter Integer n=3
        "Number of chillers";
      parameter Integer m=2
        "Number of secondary pumps";
      parameter Real thrhol[:] = {0.95,0.95}
        "Threshold for chiller staging";
      parameter Real Cap[:] "Rated Plant Capacity";
      parameter Real tWai = 900 "Waiting time";
      parameter Modelica.Units.SI.TemperatureDifference dT=0.5
        "Temperature difference for stage control";
      parameter Modelica.Units.SI.Power PTow_nominal[:]={10E3 for i in linspace(
          1,
          n,
          n)} "Nominal cooling tower power (at y=1)";
      parameter Modelica.Units.SI.TemperatureDifference dTCHW_nominal=5.56
        "Temperature difference at chilled water side";
      parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
        "Temperature difference at condenser water wide";
      parameter Modelica.Units.SI.Pressure dPCHW_nominal=210729
        "Pressure difference at the chilled water side";
      parameter Modelica.Units.SI.Pressure dPCW_nominal=92661
        "Pressure difference at the condenser water wide";
      parameter Modelica.Units.SI.Pressure dPTow_nominal=191300
        "Pressure difference at the condenser water wide";
      parameter Modelica.Units.SI.Temperature TCHW_nominal=273.15 + 5.56
        "Temperature at chilled water side";
      parameter Modelica.Units.SI.Temperature TCW_nominal=273.15 + 23.89
        "Temperature at condenser water wide";
      parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal=4.44
        "Nominal approach temperature";
      parameter Modelica.Units.SI.TemperatureDifference dTApp=4.44
        "Approach temperature for controlling cooling towers";
      parameter Real COP_nominal = datChi[1].COP_nominal "Chiller COP";
      parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal[:]={-datChi[1].QEva_flow_nominal
          /4200/5.56 for i in linspace(
          1,
          n,
          n)} "Nominal mass flow rate at chilled water side";
      parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={
          mCHW_flow_nominal[1]*(datChi[1].COP_nominal + 1)/datChi[1].COP_nominal
          for i in linspace(
          1,
          n,
          n)} "Nominal mass flow rate at condenser water wide";
      parameter Real Motor_eta[:] = {0.87}
        "Motor efficiency";
      parameter Real Hydra_eta[:] = {1}
        "Hydraulic efficiency";
      parameter Modelica.Units.SI.Pressure dP_nominal=478250
        "Nominal pressure drop for the secondary chilled water pump ";
      parameter Real v_flow_rate[m,:] = {{0, 0.4*sum(mCHW_flow_nominal)/m/996,0.6*sum(
          mCHW_flow_nominal)/m/996,0.8*sum(mCHW_flow_nominal)/m/996,
          sum(mCHW_flow_nominal)/m/996,1.2*sum(mCHW_flow_nominal)/m/996} for i in
          linspace(
          1,
          m,
          m)};
      parameter Real pressure[m,:] = {{1.8*dP_nominal,1.6*dP_nominal,1.2*dP_nominal,1.1*dP_nominal,dP_nominal,0.75*dP_nominal} for i in linspace(1, m, m)};
      parameter Real Motor_eta_Sec[m,:] =  {{0.6,0.6,0.76,0.87,0.86,0.74} for i in linspace(1, m, m)}
        "Motor efficiency";
      parameter Real Hydra_eta_Sec[m,:] = {{1,1,1,1,1,1} for i in linspace(1, m, m)}
        "Hydraulic efficiency";
      parameter Modelica.Units.SI.Pressure dPByp_nominal=100
        "Pressure difference between the outlet and inlet of the modules ";
      parameter Real vTow_flow_rate[n,:]={{0.3,0.6,1} for i in linspace(1, n, n)}
        "Volume flow rate rate";
      parameter Real eta[n,:]={{0.3^3,0.6^3,1} for i in linspace(1, n, n)}
        "Fan efficiency";
      parameter Modelica.Units.SI.Temperature TWetBul_nominal=273.15 + 19.45
        "Nominal wet bulb temperature";
      replaceable Subsystems.Chiller.MultiChillers mulChiSys(
        redeclare package MediumCHW = MediumCHW,
        redeclare package MediumCW = MediumCW,
        dPCHW_nominal=dPCHW_nominal,
        dPCW_nominal=dPCW_nominal,
        mCHW_flow_nominal=mCHW_flow_nominal,
        mCW_flow_nominal=mCW_flow_nominal,
        TCW_start=273.15 + 23.89,
        TCHW_start=273.15 + 5.56,
        per=datChi,
        n=n)
        annotation (Placement(transformation(extent={{-88,-16},{-74,-2}})));
      Subsystems.Pump.PumpSystem pumSecCHW(
        redeclare package Medium = MediumCHW,
        n=m,
        VolFloCur=v_flow_rate,
        PreCur=pressure,
        HydEff=Hydra_eta_Sec,
        MotEff=Motor_eta_Sec,
        m_flow_nominal={sum(mCHW_flow_nominal)/m for i in linspace(
            1,
            m,
            m)},
        dpValve_nominal(displayUnit="Pa") = {dP_nominal*0.5 for i in linspace(
          1,
          m,
          m)})
        annotation (Placement(transformation(extent={{40,-80},{60,-60}})));
      Subsystems.Pump.SimPumpSystem pumPriCHW(
        redeclare package Medium = MediumCHW,
        m_flow_nominal=mCHW_flow_nominal,
        n=n,
        Motor_eta={Motor_eta for i in linspace(
            1,
            n,
            n)},
        Hydra_eta={Hydra_eta for i in linspace(
            1,
            n,
            n)},
        dp_nominal(displayUnit="Pa") = dPCHW_nominal)
        annotation (Placement(transformation(extent={{-12,0},{-48,36}})));
      Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWByp(
        redeclare package Medium = MediumCHW,
        allowFlowReversal=true,
        m_flow_nominal=sum(mCHW_flow_nominal))
                                annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,-10})));
      Buildings.Fluid.Storage.ExpansionVessel expVesCHW(
          redeclare package Medium = MediumCHW)
        annotation (Placement(transformation(extent={{-44,-78},{-36,-70}})));
      Buildings.Fluid.Sensors.MassFlowRate senMasFloByp(redeclare package
          Medium =         MediumCHW) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=-90,
            origin={0,-52})));
      Modelica.Blocks.Math.RealToBoolean reaToBoo
        annotation (Placement(transformation(extent={{-160,86},{-140,106}})));
      Modelica.Blocks.Sources.Constant On(k=1)
        annotation (Placement(transformation(extent={{-240,86},{-220,106}})));
      Subsystems.CoolingTower.CoolingTowersWithBypass
                                                cooTowWithByp(
        redeclare package MediumCW = MediumCW,
        P_nominal=PTow_nominal,
        dP_nominal=dP_nominal,
        mCW_flow_nominal=mCW_flow_nominal,
        eta=eta,
        dPByp_nominal=dPByp_nominal,
        byp(dPByp_nominal=dPByp_nominal),
        TCW_start=273.15 + 29.44,
        v_flow_rate=vTow_flow_rate,
        dTApp_nominal=dTApp_nominal,
        TWetBul_nominal=TWetBul_nominal,
        n=n,
        TCWLowSet=288.71,
        dTCW_nominal=dTCW_nominal)
        annotation (Placement(transformation(extent={{-190,-42},{-162,-14}})));
      Subsystems.Pump.SimPumpSystem      pumCW(
        redeclare package Medium = MediumCW,
        m_flow_nominal=mCW_flow_nominal,
        n=n,
        Motor_eta={Motor_eta for i in linspace(
            1,
            n,
            n)},
        Hydra_eta={Hydra_eta for i in linspace(
            1,
            n,
            n)},
        dp_nominal=dPCW_nominal*10)
                             annotation (Placement(transformation(extent={{-144,-102},
                {-116,-76}})));
      Buildings.Fluid.Storage.ExpansionVessel expVesCW(
          redeclare package Medium = MediumCW)
        annotation (Placement(transformation(extent={{-184,-78},{-176,-70}})));
      replaceable Devices.WaterSide.Control.PlantStageN chiSta(
        tWai=tWai,
        n=n,
        thehol=thrhol,
        Cap=Cap) annotation (Placement(transformation(extent={{-78,58},{-62,72}})));
      Subsystems.Pump.Control.SecPumCon secPumCon(
        tWai=1800,
        n=m)
        annotation (Placement(transformation(extent={{60,40},{80,60}})));
      replaceable Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWBuiEnt(
        redeclare package Medium = MediumCHW,
        allowFlowReversal=true,
        m_flow_nominal=sum(mCHW_flow_nominal))
                                annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={96,-90})));
      parameter
         Buildings.Fluid.Chillers.Data.ElectricEIR.Generic
        datChi[integer(n)]
        annotation (Placement(transformation(extent={{80,88},{100,108}})));
      Modelica.Blocks.Sources.RealExpression PCh(y=sum(mulChiSys.P))
        annotation (Placement(transformation(extent={{140,90},{160,110}})));
      Modelica.Blocks.Continuous.Integrator ECh
        annotation (Placement(transformation(extent={{200,90},{220,110}})));
      Modelica.Blocks.Sources.RealExpression PConSpePum(y=sum(pumPriCHW.P) + sum(
            pumCW.P))
        annotation (Placement(transformation(extent={{140,48},{160,68}})));
      Modelica.Blocks.Continuous.Integrator EConSpePum
        annotation (Placement(transformation(extent={{200,48},{220,68}})));
      Modelica.Blocks.Sources.RealExpression PVarSpePum(y=sum(pumSecCHW.P))
        annotation (Placement(transformation(extent={{140,10},{160,30}})));
      Modelica.Blocks.Continuous.Integrator EVarSpePum
        annotation (Placement(transformation(extent={{200,10},{220,30}})));
      Modelica.Blocks.Sources.RealExpression PCooTow(y=sum(cooTowWithByp.mulCooTowSys.P))
        annotation (Placement(transformation(extent={{140,-34},{160,-14}})));
      Modelica.Blocks.Continuous.Integrator ECooTow
        annotation (Placement(transformation(extent={{200,-34},{220,-14}})));
      Modelica.Blocks.Sources.RealExpression PTot(y=PCh.y + PConSpePum.y +
            PVarSpePum.y + PCooTow.y)
        annotation (Placement(transformation(extent={{160,-90},{180,-70}})));
      Modelica.Blocks.Continuous.Integrator ETot
        annotation (Placement(transformation(extent={{200,-90},{220,-70}})));
      Modelica.Blocks.Sources.RealExpression runCh
        annotation (Placement(transformation(extent={{160,-130},{180,-110}})));

      Modelica.Blocks.Continuous.Integrator maiCos
        annotation (Placement(transformation(extent={{200,-130},{220,-110}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
            MediumCHW)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{230,-50},{250,-30}}),
            iconTransformation(extent={{90,-50},{110,-30}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
            MediumCHW)
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{230,50},{250,70}}),
            iconTransformation(extent={{90,50},{110,70}})));

      Modelica.Blocks.Interfaces.RealInput TCWSet
        "Temperature set point of the condenser water"
        annotation (Placement(transformation(extent={{-312,-76},{-280,-44}}),
            iconTransformation(extent={{-132,-56},{-100,-24}})));
      Modelica.Blocks.Interfaces.RealInput TWetBul
        "Entering air wet bulb temperature"
        annotation (Placement(transformation(extent={{-312,-116},{-280,-84}}),
            iconTransformation(extent={{-132,-96},{-100,-64}})));
      Modelica.Blocks.Interfaces.RealInput dP "Measured pressure drop"
        annotation (Placement(transformation(extent={{-312,64},{-280,96}}),
            iconTransformation(extent={{-132,64},{-100,96}})));
      Modelica.Blocks.Interfaces.RealInput TCHWSet
        "Temperature setpoint of the chilled water"
        annotation (Placement(transformation(extent={{-312,-22},{-280,10}}),
            iconTransformation(extent={{-132,-16},{-100,16}})));

      Modelica.Blocks.Interfaces.RealOutput T "Temperature of the passing fluid"
        annotation (Placement(transformation(extent={{240,-10},{260,10}}),
            iconTransformation(extent={{100,-10},{120,10}})));
      Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWBuiLea(
        redeclare package Medium = MediumCHW,
        allowFlowReversal=true,
        m_flow_nominal=sum(mCHW_flow_nominal)) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={70,18})));
      replaceable Buildings.Fluid.Sensors.MassFlowRate senMasFloSecCHW(redeclare
          package Medium =
            MediumCHW) annotation (Placement(transformation(
            extent={{8,8},{-8,-8}},
            rotation=180,
            origin={130,-90})));
      Modelica.Blocks.Sources.RealExpression Loa(y=senMasFloSecCHW.m_flow*4200*(
            senTCHWBuiLea.T - senTCHWBuiEnt.T))
        annotation (Placement(transformation(extent={{-174,16},{-154,36}})));
      Modelica.Blocks.Interfaces.RealInput dpSetPoi
        "Static differential pressure setpoint for the secondary pump" annotation (
          Placement(transformation(extent={{-312,30},{-280,62}}),
            iconTransformation(extent={{-132,26},{-100,58}})));
    equation
      connect(senTCHWByp.port_a, senMasFloByp.port_b) annotation (Line(
          points={{-4.44089e-016,-20},{-4.44089e-016,-32},{0,-32},{0,-42}},
          color={0,127,255},
          thickness=1));
      connect(senTCHWByp.port_b, pumPriCHW.port_a) annotation (Line(
          points={{6.66134e-016,0},{6.66134e-016,18},{-12,18}},
          color={0,127,255},
          thickness=1));
      connect(mulChiSys.port_a_CHW, pumPriCHW.port_b) annotation (Line(
          points={{-74,-3.4},{-54,-3.4},{-54,18},{-48,18}},
          color={0,127,255},
          thickness=1));
      connect(mulChiSys.port_b_CHW, senMasFloByp.port_a) annotation (Line(
          points={{-74,-14.6},{-74,-90},{0,-90},{0,-62}},
          color={0,127,255},
          thickness=1));
      connect(expVesCHW.port_a, senMasFloByp.port_a) annotation (Line(
          points={{-40,-78},{-40,-90},{-1.77636e-015,-90},{-1.77636e-015,-62}},
          color={0,127,255},
          thickness=1));
      connect(On.y, reaToBoo.u)
        annotation (Line(points={{-219,96},{-162,96}}, color={0,0,127}));
      connect(cooTowWithByp.port_a, mulChiSys.port_b_CW) annotation (Line(
          points={{-162,-19.6},{-162,18},{-100,18},{-100,-3.4},{-88,-3.4}},
          color={0,127,255},
          thickness=1));
      connect(cooTowWithByp.port_b, pumCW.port_a) annotation (Line(
          points={{-162,-39.2},{-162,-89},{-144,-89}},
          color={0,127,255},
          thickness=1));
      connect(pumCW.port_b, mulChiSys.port_a_CW) annotation (Line(
          points={{-116,-89},{-100,-89},{-100,-14.6},{-88,-14.6}},
          color={0,127,255},
          thickness=1));
      connect(expVesCW.port_a, pumCW.port_a) annotation (Line(
          points={{-180,-78},{-180,-89},{-144,-89}},
          color={0,127,255},
          thickness=1));

      connect(pumSecCHW.port_a, senMasFloByp.port_a) annotation (Line(
          points={{40,-70},{0,-70},{0,-62},{-1.83187e-15,-62}},
          color={0,127,255},
          thickness=1));
      connect(chiSta.y, mulChiSys.On) annotation (Line(points={{-61.2,65},{-40,65},{
              -40,40},{-120,40},{-120,-11.8},{-88.63,-11.8}}, color={0,0,127}));

      connect(pumCW.On, mulChiSys.On) annotation (Line(
          points={{-145.26,-81.2},{-152,-81.2},{-152,-40},{-112,-40},{-112,-11.8},{-88.63,
              -11.8}},
          color={0,0,127}));
      connect(cooTowWithByp.On, mulChiSys.On) annotation (Line(
          points={{-191.26,-19.6},{-200,-19.6},{-200,-8},{-120,-8},{-120,-11.8},{-88.63,
              -11.8}},
          color={0,0,127}));
      connect(chiSta.On, reaToBoo.y) annotation (Line(points={{-79.6,70.6},{-120,70.6},
              {-120,96},{-139,96}}, color={255,0,255}));
      connect(chiSta.Status, mulChiSys.Rat) annotation (Line(points={{-79.6,59.4},{-90,
              59.4},{-90,36},{-44,36},{-44,-11.8},{-73.3,-11.8}}, color={0,0,127}));
      connect(pumPriCHW.On, mulChiSys.On) annotation (Line(
          points={{-10.38,28.8},{10,28.8},{10,52},{-120,52},{-120,-11.8},{-88.63,-11.8}},
          color={0,0,127}));
      connect(secPumCon.On, reaToBoo.y) annotation (Line(points={{58,58},{40,58},{40,
              96},{-139,96}}, color={255,0,255}));
      connect(pumSecCHW.SpeRat, secPumCon.Status) annotation (Line(
          points={{61,-63.8},{88,-63.8},{88,-14},{30,-14},{30,42},{58,42}},
          color={0,0,127}));
      connect(pumSecCHW.port_b, senTCHWBuiEnt.port_a) annotation (Line(
          points={{60,-70},{84,-70},{84,-90},{88,-90}},
          color={0,127,255},
          thickness=1));

      connect(PCh.y, ECh.u) annotation (Line(
          points={{161,100},{198,100}},
          color={0,0,127}));
      connect(PConSpePum.y, EConSpePum.u) annotation (Line(
          points={{161,58},{198,58}},
          color={0,0,127}));
      connect(PVarSpePum.y, EVarSpePum.u) annotation (Line(
          points={{161,20},{198,20}},
          color={0,0,127}));
      connect(PCooTow.y, ECooTow.u) annotation (Line(
          points={{161,-24},{198,-24}},
          color={0,0,127}));
      connect(PTot.y, ETot.u) annotation (Line(
          points={{181,-80},{189.5,-80},{198,-80}},
          color={0,0,127}));
      connect(runCh.y, maiCos.u)
        annotation (Line(points={{181,-120},{198,-120}}, color={0,0,127}));
      connect(cooTowWithByp.TCWSet, TCWSet) annotation (Line(
          points={{-191.26,-28},{-244,-28},{-244,-60},{-296,-60}},
          color={0,0,127}));
      connect(cooTowWithByp.TWetBul, TWetBul) annotation (Line(
          points={{-191.26,-36.4},{-220,-36.4},{-220,-100},{-296,-100}},
          color={0,0,127}));
      connect(secPumCon.dP, dP) annotation (Line(
          points={{58,50},{20,50},{20,80},{-296,80}},
          color={0,0,127}));

      connect(mulChiSys.TCHWSet, TCHWSet) annotation (Line(
          points={{-88.63,-6.2},{-260,-6.2},{-260,-6},{-296,-6}},
          color={0,0,127}));
      connect(pumSecCHW.SpeSig, secPumCon.y) annotation (Line(
          points={{39.1,-62},{18,-62},{18,0},{88,0},{88,50},{81,50}},
          color={0,0,127}));
      connect(senTCHWBuiEnt.T, T) annotation (Line(
          points={{96,-81.2},{96,0},{250,0}},
          color={0,0,127}));
      connect(pumPriCHW.port_a, senTCHWBuiLea.port_b) annotation (Line(
          points={{-12,18},{60,18}},
          color={0,127,255},
          thickness=1));
      connect(senTCHWBuiLea.port_a, port_a) annotation (Line(
          points={{80,18},{100,18},{100,60},{240,60}},
          color={0,127,255},
          thickness=1));
      connect(senTCHWBuiEnt.port_b, senMasFloSecCHW.port_a) annotation (Line(points={{104,-90},
              {122,-90}},                     color={0,127,255}));
      connect(senMasFloSecCHW.port_b, port_b) annotation (Line(
          points={{138,-90},{148,-90},{148,-42},{240,-42},{240,-40}},
          color={0,127,255},
          thickness=1));
      connect(Loa.y, chiSta.Loa) annotation (Line(points={{-153,26},{-124,26},{-124,
              65},{-79.6,65}}, color={0,0,127}));
      connect(secPumCon.dpSetPoi, dpSetPoi)
        annotation (Line(points={{58,46},{-296,46}}, color={0,0,127}));
      annotation (__Dymola_Commands(file=
              "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/ChillerPlantSystem.mos"
            "Simulate and plot"),
      Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-280,-140},{240,
                120}})),
        experiment(
          StartTime=1.728e+007,
          StopTime=1.73664e+007,
          __Dymola_NumberOfIntervals=1440,
          __Dymola_Algorithm="Dassl"),
        __Dymola_experimentSetupOutput,
        Documentation(info="<html>
<p>The schematic drawing of the Lejeune plant is shown as folowing.</p>
<p><img src=\"Resources/Images/lejeunePlant/lejeune_schematic_drawing.jpg\" alt=\"image\"/> </p>
<p>In addition, the parameters are listed as below.</p>
<p>The parameters for the chiller plant.</p>
<p><img src=\"Resources/Images/lejeunePlant/Chiller.png\" alt=\"image\"/> </p>
<p>The parameters for the primary chilled water pump.</p>
<p><img src=\"Resources/Images/lejeunePlant/PriCHWPum.png\" alt=\"image\"/> </p>
<p>The parameters for the secondary chilled water pump.</p>
<p><img src=\"Resources/Images/lejeunePlant/SecCHWPum1.png\" alt=\"image\"/> </p>
<p><img src=\"Resources/Images/lejeunePlant/SecCHWPum2.png\" alt=\"image\"/> </p>
<p>The parameters for the condenser water pump.</p>
<p><img src=\"Resources/Images/lejeunePlant/CWPum.png\" alt=\"image\"/> </p>
</html>"),
        Icon(graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-36,58},{28,38}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-36,-26},{28,-46}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-76,24},{-86,-2},{-66,-2},{-76,24}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{50,20},{74,-4}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Line(points={{-76,24},{-76,46},{-36,46}}, color={0,0,127}),
            Line(points={{-76,-2},{-76,-36},{-36,-36}}, color={0,0,127}),
            Line(points={{62,20},{62,46},{28,46}}, color={0,0,127}),
            Line(points={{62,-4},{62,-36},{28,-36}}, color={0,0,127}),
            Text(
              extent={{-158,118},{142,158}},
              textString="%name",
              textColor={0,0,255})}));
    end ChillerPlant;

    model BoilerPlant
      replaceable package MediumHW =
         Modelica.Media.Interfaces.PartialMedium
        "Medium in the hot water side";
      parameter Integer n=2
        "Number of boilers";
      parameter Integer m=2
        "Number of pumps";
      parameter Real thrhol[:]= {0.95}
        "Threshold for boiler staging";
      parameter Real Cap[:] = {2762738.20/n for i in linspace(1, n, n)} "Rated Plant Capacity";
      parameter Modelica.Units.SI.MassFlowRate mHW_flow_nominal[:]={2762738.20/n/20
          /4200 for i in linspace(
          1,
          n,
          n)} "Nominal mass flow rate at the hot water side";
      parameter Modelica.Units.SI.Temperature THW_start=273.15 + 80
        "The start temperature of hot water side";
      parameter Modelica.Units.SI.TemperatureDifference dTHW_nominal=20
        "Temperature difference between the outlet and inlet of the module";
      parameter Real eta[n,:]={{0.8} for i in linspace(1,n,n)} "Fan efficiency";
      parameter Modelica.Units.SI.Pressure dP_nominal=478250
        "Nominal pressure drop for the secondary hot water pump ";
      parameter Real v_flow_rate[m,:] = {{0.1*sum(mHW_flow_nominal)/m/996,0.6*sum(mHW_flow_nominal)/m/996,0.8*sum(mHW_flow_nominal)/m/996,sum(mHW_flow_nominal)/m/996,1.2*sum(mHW_flow_nominal)/m/996} for i in linspace(1,m,m)};
      parameter Real pressure[m,:] = {{2*dP_nominal,1.5*dP_nominal,1.1*dP_nominal,dP_nominal,0.75*dP_nominal} for i in linspace(1,m,m)};

      parameter Real Motor_eta_Sec[m,:] = {{0.6,0.76,0.87,0.86,0.74} for i in linspace(1,m,m)}
        "Motor efficiency";
      parameter Real Hydra_eta_Sec[m,:] = {{1,1,1,1,1} for i in linspace(1,m,m)} "Hydraulic efficiency";

      Subsystems.Pump.PumpSystem pumSecHW(
        redeclare package Medium = MediumHW,
        n=m,
        m_flow_nominal={sum(mHW_flow_nominal)/m for i in linspace(
            1,
            m,
            m)},
        HydEff=Hydra_eta_Sec,
        MotEff=Motor_eta_Sec,
        VolFloCur=v_flow_rate,
        PreCur=pressure,
        dpValve_nominal={dP_nominal*0.25 for i in linspace(
            1,
            m,
            m)}) annotation (Placement(transformation(extent={{10,20},{-10,40}})));
      Modelica.Blocks.Math.RealToBoolean reaToBoolea
        annotation (Placement(transformation(extent={{-160,80},{-140,100}})));
      Modelica.Blocks.Sources.Constant On(k=1)
        annotation (Placement(transformation(extent={{-260,80},{-240,100}})));
      Subsystems.Pump.Control.SecPumCon secPumCon(
        tWai=1800,
        n=m)
        annotation (Placement(transformation(extent={{60,46},{80,66}})));
      replaceable Buildings.Fluid.Sensors.TemperatureTwoPort senTHWBuiEnt(
        allowFlowReversal=true,
        redeclare package Medium = MediumHW,
        m_flow_nominal=sum(mHW_flow_nominal))
                                annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={64,-96})));
      replaceable Subsystems.Boiler.MultiBoilers multiBoiler(
        redeclare package MediumHW = MediumHW,
        dPHW_nominal=dP_nominal*0.5,
        mHW_flow_nominal=mHW_flow_nominal,
        dTHW_nominal=dTHW_nominal,
        eta=eta,
        n=n,
        THW_start=THW_start)
        annotation (Placement(transformation(extent={{-96,-44},{-62,-16}})));
      Buildings.Fluid.Storage.ExpansionVessel expVesCHW(redeclare package Medium =
            MediumHW, V_start=10)
        annotation (Placement(transformation(extent={{30,8},{38,16}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium = MediumHW)
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{230,30},{250,50}}),
            iconTransformation(extent={{90,30},{110,50}})));

      Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium = MediumHW)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{230,-70},{250,-50}}),
            iconTransformation(extent={{90,-70},{110,-50}})));
      Devices.WaterSide.Control.PlantStageN BoiSta(
        tWai=1800,
        n=n,
        thehol=thrhol,
        Cap=Cap) annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
      Modelica.Blocks.Interfaces.RealInput dP "Measured pressure drop"
        annotation (Placement(transformation(extent={{-320,-20},{-280,20}}),
            iconTransformation(extent={{-140,-20},{-100,20}})));

      Modelica.Blocks.Interfaces.RealOutput THWLea
        "Temperature of the passing fluid"
        annotation (Placement(transformation(extent={{240,-10},{260,10}}),
            iconTransformation(extent={{100,-10},{120,10}})));
      Buildings.Fluid.Sensors.TemperatureTwoPort senTHWBuiLea(
        allowFlowReversal=true,
        redeclare package Medium = MediumHW,
        m_flow_nominal=sum(mHW_flow_nominal)) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={120,22})));
      replaceable Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare
          package
          Medium =
            MediumHW) annotation (Placement(transformation(
            extent={{-10,12},{10,-12}},
            rotation=180,
            origin={82,22})));
      Modelica.Blocks.Sources.RealExpression realExpression(y=senMasFlo.m_flow*4200
            *(senTHWBuiEnt.T - senTHWBuiLea.T))
        annotation (Placement(transformation(extent={{62,-50},{42,-30}})));
      Modelica.Blocks.Interfaces.RealInput THWSet
        "Temperature setpoint of the hot water"
        annotation (Placement(transformation(extent={{-320,40},{-280,80}}),
            iconTransformation(extent={{-140,40},{-100,80}})));
      Modelica.Blocks.Interfaces.RealInput dpSetPoi
        "Static differential pressure setpoint for the secondary pump"
        annotation (Placement(transformation(extent={{-320,-80},{-280,-40}}),
            iconTransformation(extent={{-140,-80},{-100,-40}})));
      Modelica.Blocks.Sources.RealExpression PTot(y=sum(pumSecHW.P) + sum(
            multiBoiler.boi.boi.QFue_flow))
        annotation (Placement(transformation(extent={{140,-120},{160,-100}})));
      Modelica.Blocks.Continuous.Integrator ETot
        annotation (Placement(transformation(extent={{180,-120},{200,-100}})));
    equation
      connect(On.y, reaToBoolea.u)
        annotation (Line(points={{-239,90},{-162,90}}, color={0,0,127}));

      connect(secPumCon.On, reaToBoolea.y) annotation (Line(points={{58,64},{40,64},
              {40,90},{-139,90}}, color={255,0,255}));
      connect(multiBoiler.port_a_HW, pumSecHW.port_b)
        annotation (Line(
          points={{-62,-18.8},{-62,30},{-10,30}},
          color={255,0,0},
          thickness=1));
      connect(multiBoiler.port_b_HW, senTHWBuiEnt.port_a) annotation (Line(
          points={{-62,-41.2},{-58,-41.2},{-58,-96},{54,-96}},
          color={255,0,0},
          thickness=1));

      connect(pumSecHW.SpeRat, secPumCon.Status) annotation (Line(
          points={{-11,36.2},{-20,36.2},{-20,48},{58,48}},
          color={0,0,127}));
      connect(senTHWBuiEnt.port_b, port_b) annotation (Line(
          points={{74,-96},{106,-96},{106,-60},{240,-60}},
          color={255,0,0},
          thickness=1));
      connect(BoiSta.On, reaToBoolea.y) annotation (Line(points={{-82,78},{-120,78},
              {-120,90},{-139,90}}, color={255,0,255}));
      connect(secPumCon.dP, dP) annotation (Line(
          points={{58,56},{-180,56},{-180,0},{-300,0}},
          color={0,0,127}));
      connect(senTHWBuiEnt.T, THWLea) annotation (Line(
          points={{64,-85},{64,0},{250,0}},
          color={0,0,127}));
      connect(multiBoiler.Rat, BoiSta.Status) annotation (Line(points={{-60.3,-35.6},
              {-32,-35.6},{-32,34},{-92,34},{-92,62},{-82,62}}, color={0,0,127}));
      connect(BoiSta.y, multiBoiler.On) annotation (Line(points={{-59,70},{-42,70},{
              -42,28},{-142,28},{-142,-35.6},{-97.53,-35.6}}, color={0,0,127}));
      connect(senTHWBuiLea.port_a, port_a) annotation (Line(
          points={{130,22},{134,22},{134,40},{240,40}},
          color={255,0,0},
          thickness=1));
      connect(expVesCHW.port_a, pumSecHW.port_a) annotation (Line(
          points={{34,8},{34,2},{54,2},{54,30},{10,30}},
          color={255,0,0},
          thickness=1));
      connect(senMasFlo.port_b, pumSecHW.port_a) annotation (Line(
          points={{72,22},{48,22},{48,30},{10,30}},
          color={255,0,0},
          thickness=1));
      connect(senMasFlo.port_a, senTHWBuiLea.port_b) annotation (Line(
          points={{92,22},{110,22}},
          color={255,0,0},
          thickness=1));
      connect(realExpression.y, BoiSta.Loa) annotation (Line(points={{41,-40},{-20,-40},
              {-20,2},{-110,2},{-110,70},{-82,70}}, color={0,0,127}));
      connect(secPumCon.y, pumSecHW.SpeSig) annotation (Line(
          points={{81,56},{86,56},{86,38},{10.9,38}},
          color={0,0,127}));
      connect(multiBoiler.THWSet, THWSet) annotation (Line(
          points={{-97.53,-24.4},{-220,-24.4},{-220,60},{-300,60}},
          color={0,0,127}));
      connect(secPumCon.dpSetPoi, dpSetPoi) annotation (Line(points={{58,52},{-240,52},
              {-240,-60},{-300,-60}}, color={0,0,127}));
      connect(PTot.y,ETot. u) annotation (Line(
          points={{161,-110},{178,-110}},
          color={0,0,127}));
      annotation (__Dymola_Commands(file=
              "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/ChillerPlantSystem.mos"
            "Simulate and plot"),
      Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-280,-140},{240,
                120}})),
        experiment(
          StartTime=2.9376e+006,
          StopTime=3.6288e+006,
          __Dymola_NumberOfIntervals=1440,
          __Dymola_Algorithm="Dassl"),
        __Dymola_experimentSetupOutput,
        Documentation(info="<html>
<p>The schematic drawing of the Lejeune plant is shown as folowing.</p>
<p><img src=\"Resources/Images/lejeunePlant/lejeune_schematic_drawing.jpg\" alt=\"image\"/> </p>
<p>In addition, the parameters are listed as below.</p>
<p>The parameters for the chiller plant.</p>
<p><img src=\"Resources/Images/lejeunePlant/Chiller.png\" alt=\"image\"/> </p>
<p>The parameters for the primary chilled water pump.</p>
<p><img src=\"Resources/Images/lejeunePlant/PriCHWPum.png\" alt=\"image\"/> </p>
<p>The parameters for the secondary chilled water pump.</p>
<p><img src=\"Resources/Images/lejeunePlant/SecCHWPum1.png\" alt=\"image\"/> </p>
<p><img src=\"Resources/Images/lejeunePlant/SecCHWPum2.png\" alt=\"image\"/> </p>
<p>The parameters for the condenser water pump.</p>
<p><img src=\"Resources/Images/lejeunePlant/CWPum.png\" alt=\"image\"/> </p>
</html>"),
        Icon(graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-36,-26},{28,-46}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-76,24},{-86,-2},{-66,-2},{-76,24}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{50,20},{74,-4}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Line(points={{-76,24},{-76,46},{28,46}},  color={0,0,127}),
            Line(points={{-76,-2},{-76,-36},{-36,-36}}, color={0,0,127}),
            Line(points={{62,20},{62,46},{28,46}}, color={0,0,127}),
            Line(points={{62,-4},{62,-36},{28,-36}}, color={0,0,127}),
            Text(
              extent={{-150,104},{150,144}},
              textString="%name",
              textColor={0,0,255})}));
    end BoilerPlant;

    model BoilerPlant_simple
      replaceable package MediumHW =
         Modelica.Media.Interfaces.PartialMedium
        "Medium in the hot water side";
      parameter Integer n=2
        "Number of boilers";
      parameter Integer m=1
        "Number of pumps";
      parameter Real thrhol[:]= {0.95}
        "Threshold for chiller staging";
      parameter Real Cap[:] = {2762738.20/2 for i in linspace(1, n, n)} "Rated Plant Capacity";
      parameter Modelica.Units.SI.MassFlowRate mHW_flow_nominal[:]={2762738.20/n/20
          /4200 for i in linspace(
          1,
          n,
          n)} "Nominal mass flow rate at the chilled water side";
      parameter Modelica.Units.SI.Temperature THW_start=273.15 + 80
        "The start temperature of chilled water side";
      parameter Modelica.Units.SI.TemperatureDifference dTHW_nominal=20
        "Temperature difference between the outlet and inlet of the module";
      parameter Real eta[n,:]={{0.8} for i in linspace(1,n,n)} "Fan efficiency";
      parameter Modelica.Units.SI.Pressure dP_nominal=478250
        "Nominal pressure drop for the secondary chilled water pump ";
      parameter Real v_flow_rate[m,:] = {{0.1*sum(mHW_flow_nominal)/m/996,0.6*sum(mHW_flow_nominal)/m/996,0.8*sum(mHW_flow_nominal)/m/996,sum(mHW_flow_nominal)/m/996,1.2*sum(mHW_flow_nominal)/m/996}};
      parameter Real pressure[m,:] = {{2*dP_nominal,1.5*dP_nominal,1.1*dP_nominal,dP_nominal,0.75*dP_nominal}};

      parameter Real Motor_eta_Sec[m,:] = {{0.6,0.76,0.87,0.86,0.74}}
        "Motor efficiency";
      parameter Real Hydra_eta_Sec[m,:] = {{1,1,1,1,1}} "Hydraulic efficiency";

      Subsystems.Pump.PumpSystem pumSecHW(
        redeclare package Medium = MediumHW,
        n=1,
        m_flow_nominal={sum(mHW_flow_nominal)},
        HydEff=Hydra_eta_Sec,
        MotEff=Motor_eta_Sec,
        VolFloCur=v_flow_rate,
        PreCur=pressure,
        dp={dP_nominal*0.25})
                 annotation (Placement(transformation(extent={{22,0},{-12,36}})));
      Modelica.Blocks.Sources.Constant THWSet(k=273.15 + 80)
        annotation (Placement(transformation(extent={{-260,38},{-240,58}})));
      Modelica.Blocks.Math.RealToBoolean realToBoolean
        annotation (Placement(transformation(extent={{-160,80},{-140,100}})));
      Modelica.Blocks.Sources.Constant On(k=1)
        annotation (Placement(transformation(extent={{-260,80},{-240,100}})));
      replaceable Buildings.Fluid.Sensors.TemperatureTwoPort senTHWBuiEnt(
        allowFlowReversal=true,
        redeclare package Medium = MediumHW,
        m_flow_nominal=sum(mHW_flow_nominal))
                                annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-90})));
      replaceable Subsystems.Boiler.MultiBoilers        multiBoiler(
        redeclare package MediumHW = MediumHW,
        dPHW_nominal=dP_nominal*0.5,
        mHW_flow_nominal=mHW_flow_nominal,
        dTHW_nominal=dTHW_nominal,
        eta=eta,
        n=n,
        THW_start=THW_start)
        annotation (Placement(transformation(extent={{-96,-44},{-62,-16}})));
      Buildings.Fluid.Storage.ExpansionVessel expVesCHW(redeclare package
          Medium =
            MediumHW, V_start=10)
        annotation (Placement(transformation(extent={{30,4},{38,12}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium = MediumHW)
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{132,110},{152,130}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium = MediumHW)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{130,-150},{150,-130}})));
      Devices.WaterSide.Control.PlantStageN BoilerStage(
        tWai=1800,
        n=n,
        thehol=thrhol,
        Cap=Cap) annotation (Placement(transformation(extent={{-80,58},{-60,78}})));
      Modelica.Blocks.Interfaces.RealInput dP "Measured pressure drop"
        annotation (Placement(transformation(extent={{-320,-20},{-280,20}})));
      Modelica.Blocks.Interfaces.RealOutput THWLea
        "Temperature of the passing fluid"
        annotation (Placement(transformation(extent={{240,-8},{260,12}})));
      Buildings.Fluid.Sensors.TemperatureTwoPort senTHWBuiLea(
        allowFlowReversal=true,
        redeclare package Medium = MediumHW,
        m_flow_nominal=sum(mHW_flow_nominal)) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={120,18})));
      replaceable Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare
          package Medium =
            MediumHW) annotation (Placement(transformation(
            extent={{-10,12},{10,-12}},
            rotation=180,
            origin={82,18})));
      Modelica.Blocks.Sources.RealExpression realExpression(y=senMasFlo.m_flow*4200
            *(senTHWBuiEnt.T - senTHWBuiLea.T))
        annotation (Placement(transformation(extent={{62,-50},{42,-30}})));
      Devices.Control.conPI conPI(k=0.001, Ti=60)
        annotation (Placement(transformation(extent={{66,74},{86,94}})));
      Modelica.Blocks.Sources.RealExpression SetPoi(y=dP_nominal*0.25)
        annotation (Placement(transformation(extent={{0,60},{20,80}})));
    equation
      connect(On.y, realToBoolean.u) annotation (Line(
          points={{-239,90},{-162,90}},
          color={0,0,127},
          smooth=Smooth.None,
          pattern=LinePattern.Dash));

      connect(multiBoiler.port_a_HW, pumSecHW.port_b)
        annotation (Line(
          points={{-62,-18.8},{-62,18},{-12,18}},
          color={255,0,0},
          thickness=1));
      connect(multiBoiler.port_b_HW, senTHWBuiEnt.port_a) annotation (Line(
          points={{-62,-41.2},{-58,-41.2},{-58,-90},{100,-90}},
          color={255,0,0},
          thickness=1));

      connect(multiBoiler.THWSet, THWSet.y) annotation (Line(
          points={{-97.53,-24.4},{-200,-24.4},{-200,48},{-239,48}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(senTHWBuiEnt.port_b, port_b) annotation (Line(
          points={{120,-90},{132,-90},{140,-90},{140,-140}},
          color={255,0,0},
          thickness=1));
      connect(BoilerStage.On, realToBoolean.y) annotation (Line(
          points={{-82,76},{-120,76},{-120,90},{-139,90}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(senTHWBuiEnt.T, THWLea) annotation (Line(
          points={{110,-79},{110,-79},{110,0},{110,2},{250,2}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(multiBoiler.Rat, BoilerStage.Status) annotation (Line(
          points={{-60.3,-35.6},{-32,-35.6},{-32,34},{-92,34},{-92,60},{-82,60}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(BoilerStage.y, multiBoiler.On) annotation (Line(
          points={{-59,68},{-42,68},{-42,28},{-142,28},{-142,-35.6},{-97.53,-35.6}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(senTHWBuiLea.port_a, port_a) annotation (Line(
          points={{130,18},{142,18},{142,120}},
          color={255,0,0},
          thickness=1));
      connect(expVesCHW.port_a, pumSecHW.port_a) annotation (Line(
          points={{34,4},{34,-2},{54,-2},{54,18},{22,18}},
          color={255,0,0},
          thickness=1));
      connect(senMasFlo.port_b, pumSecHW.port_a) annotation (Line(
          points={{72,18},{48,18},{22,18}},
          color={255,0,0},
          thickness=1));
      connect(senMasFlo.port_a, senTHWBuiLea.port_b) annotation (Line(
          points={{92,18},{110,18}},
          color={255,0,0},
          thickness=1));
      connect(realExpression.y, BoilerStage.Loa) annotation (Line(
          points={{41,-40},{-20,-40},{-20,2},{-110,2},{-110,68},{-82,68}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(conPI.On, realToBoolean.y)
        annotation (Line(points={{64,90},{-139,90}}, color={255,0,255}));
      connect(SetPoi.y, conPI.SetPoi) annotation (Line(points={{21,70},{44,70},{44,84},
              {64,84}}, color={0,0,127}));
      connect(dP, conPI.Mea) annotation (Line(points={{-300,0},{-128,0},{-128,48},{52,
              48},{52,78},{64,78}}, color={0,0,127}));
      connect(conPI.y, pumSecHW.SpeSig[1]) annotation (Line(points={{87,84},{108,84},
              {108,44},{52,44},{52,32.4},{23.53,32.4}}, color={0,0,127}));
      annotation (__Dymola_Commands(file=
              "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/ChillerPlantSystem.mos"
            "Simulate and plot"),
      Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-280,-140},{240,
                120}})),
        experiment(
          StartTime=2.9376e+006,
          StopTime=3.6288e+006,
          __Dymola_NumberOfIntervals=1440,
          __Dymola_Algorithm="Dassl"),
        __Dymola_experimentSetupOutput,
        Documentation(info="<html>
<p>The schematic drawing of the Lejeune plant is shown as folowing.</p>
<p><img src=\"Resources/Images/lejeunePlant/lejeune_schematic_drawing.jpg\" alt=\"image\"/> </p>
<p>In addition, the parameters are listed as below.</p>
<p>The parameters for the chiller plant.</p>
<p><img src=\"Resources/Images/lejeunePlant/Chiller.png\" alt=\"image\"/> </p>
<p>The parameters for the primary chilled water pump.</p>
<p><img src=\"Resources/Images/lejeunePlant/PriCHWPum.png\" alt=\"image\"/> </p>
<p>The parameters for the secondary chilled water pump.</p>
<p><img src=\"Resources/Images/lejeunePlant/SecCHWPum1.png\" alt=\"image\"/> </p>
<p><img src=\"Resources/Images/lejeunePlant/SecCHWPum2.png\" alt=\"image\"/> </p>
<p>The parameters for the condenser water pump.</p>
<p><img src=\"Resources/Images/lejeunePlant/CWPum.png\" alt=\"image\"/> </p>
</html>"),
        Icon(graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-36,-26},{28,-46}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-76,24},{-86,-2},{-66,-2},{-76,24}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{50,20},{74,-4}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Line(points={{-76,24},{-76,46},{28,46}},  color={0,0,127}),
            Line(points={{-76,-2},{-76,-36},{-36,-36}}, color={0,0,127}),
            Line(points={{62,20},{62,46},{28,46}}, color={0,0,127}),
            Line(points={{62,-4},{62,-36},{28,-36}}, color={0,0,127})}));
    end BoilerPlant_simple;

    model ChillerPlant_simple "a typical chiller plant"

      replaceable package MediumCHW = Modelica.Media.Interfaces.PartialMedium
        "Medium model";
      replaceable package MediumCW = Modelica.Media.Interfaces.PartialMedium
        "Medium model";
      parameter Integer n=3
        "Number of chillers";
      parameter Integer m=1
        "Number of secondary pumps";
      parameter Real thrhol[:] = {0.95,0.95}
        "Threshold for chiller staging";
      parameter Real Cap[:] "Rated Plant Capacity";
      parameter Real tWai = 900 "Waiting time";
      parameter Modelica.Units.SI.TemperatureDifference dT=0.5
        "Temperature difference for stage control";
      parameter Modelica.Units.SI.Power PTow_nominal[:]={10E3 for i in linspace(
          1,
          n,
          n)} "Nominal cooling tower power (at y=1)";
      parameter Modelica.Units.SI.TemperatureDifference dTCHW_nominal=5.56
        "Temperature difference at chilled water side";
      parameter Modelica.Units.SI.TemperatureDifference dTCW_nominal=5.18
        "Temperature difference at condenser water wide";
      parameter Modelica.Units.SI.Pressure dPCHW_nominal=210729
        "Pressure difference at the chilled water side";
      parameter Modelica.Units.SI.Pressure dPCW_nominal=92661
        "Pressure difference at the condenser water wide";
      parameter Modelica.Units.SI.Pressure dPTow_nominal=191300
        "Pressure difference at the condenser water wide";
      parameter Modelica.Units.SI.Temperature TCHW_nominal=273.15 + 5.56
        "Temperature at chilled water side";
      parameter Modelica.Units.SI.Temperature TCW_nominal=273.15 + 23.89
        "Temperature at condenser water wide";
      parameter Modelica.Units.SI.TemperatureDifference dTApp_nominal=4.44
        "Nominal approach temperature";
      parameter Modelica.Units.SI.TemperatureDifference dTApp=4.44
        "Approach temperature for controlling cooling towers";
      parameter Real COP_nominal = datChi[1].COP_nominal "Chiller COP";
      parameter Modelica.Units.SI.MassFlowRate mCHW_flow_nominal[:]={-datChi[1].QEva_flow_nominal
          /4200/5.56 for i in linspace(
          1,
          n,
          n)} "Nominal mass flow rate at chilled water side";
      parameter Modelica.Units.SI.MassFlowRate mCW_flow_nominal[:]={
          mCHW_flow_nominal[1]*(datChi[1].COP_nominal + 1)/datChi[1].COP_nominal
          for i in linspace(
          1,
          n,
          n)} "Nominal mass flow rate at condenser water wide";
      parameter Real Motor_eta[:] = {0.87}
        "Motor efficiency";
      parameter Real Hydra_eta[:] = {1}
        "Hydraulic efficiency";
      parameter Modelica.Units.SI.Pressure dP_nominal=478250
        "Nominal pressure drop for the secondary chilled water pump ";
      parameter Real v_flow_rate[m,:] = {{0.4*sum(mCHW_flow_nominal)/m/996,0.6*sum(
          mCHW_flow_nominal)/m/996,0.8*sum(mCHW_flow_nominal)/m/996,
          sum(mCHW_flow_nominal)/m/996,1.2*sum(mCHW_flow_nominal)/m/996}};
      parameter Real pressure[m,:] = {{2.2*dP_nominal,1.2*dP_nominal,1.1*dP_nominal,dP_nominal,0.75*dP_nominal}};
      parameter Real Motor_eta_Sec[m,:] =  {{0.6,0.76,0.87,0.86,0.74}}
        "Motor efficiency";
      parameter Real Hydra_eta_Sec[m,:] = {{1,1,1,1,1}}
        "Hydraulic efficiency";
      parameter Modelica.Units.SI.Pressure dPByp_nominal=100
        "Pressure difference between the outlet and inlet of the modules ";
      parameter Real vTow_flow_rate[n,:]={{0.3,0.6,1} for i in linspace(1, n, n)}
        "Volume flow rate rate";
      parameter Real eta[n,:]={{0.3^3,0.6^3,1} for i in linspace(1, n, n)}
        "Fan efficiency";
      parameter Modelica.Units.SI.Temperature TWetBul_nominal=273.15 + 19.45
        "Nominal wet bulb temperature";
      replaceable Subsystems.Chiller.MultiChillers
                                 mulChiSys(
        redeclare package MediumCHW = MediumCHW,
        redeclare package MediumCW = MediumCW,
        dPCHW_nominal=dPCHW_nominal,
        dPCW_nominal=dPCW_nominal,
        mCHW_flow_nominal=mCHW_flow_nominal,
        mCW_flow_nominal=mCW_flow_nominal,
        TCW_start=273.15 + 23.89,
        TCHW_start=273.15 + 5.56,
        per=datChi,
        n=n)
        annotation (Placement(transformation(extent={{-94,-28},{-56,10}})));
      Subsystems.Pump.PumpSystem            pumSecCHW(
        redeclare package Medium = MediumCHW,
        n=m,
        VolFloCur=v_flow_rate,
        PreCur=pressure,
        HydEff=Hydra_eta_Sec,
        MotEff=Motor_eta_Sec,
        m_flow_nominal={sum(mCHW_flow_nominal)/m},
        dp(displayUnit="Pa") = {dP_nominal*0.5})
        annotation (Placement(transformation(extent={{44,-108},{78,-72}})));
      Subsystems.Pump.SimPumpSystem      pumPriCHW(
        redeclare package Medium = MediumCHW,
        m_flow_nominal=mCHW_flow_nominal,
        n=n,
        Motor_eta={Motor_eta for i in linspace(
            1,
            n,
            n)},
        Hydra_eta={Hydra_eta for i in linspace(
            1,
            n,
            n)})
        annotation (Placement(transformation(extent={{-12,0},{-48,36}})));
      Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWByp(
        redeclare package Medium = MediumCHW,
        allowFlowReversal=true,
        m_flow_nominal=sum(mCHW_flow_nominal))
                                annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,-10})));
      Buildings.Fluid.Storage.ExpansionVessel expVesCHW(
          redeclare package Medium = MediumCHW)
        annotation (Placement(transformation(extent={{-44,-78},{-36,-70}})));
      Buildings.Fluid.Sensors.MassFlowRate senMasFloByp(redeclare package
          Medium =         MediumCHW) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=-90,
            origin={0,-52})));
      Modelica.Blocks.Math.RealToBoolean realToBoolean
        annotation (Placement(transformation(extent={{-160,80},{-140,100}})));
      Modelica.Blocks.Sources.Constant On(k=1)
        annotation (Placement(transformation(extent={{-262,30},{-242,50}})));
      Subsystems.CoolingTower.CoolingTowersWithBypass
                                                cooTowWithByp(
        redeclare package MediumCW = MediumCW,
        P_nominal=PTow_nominal,
        dP_nominal=dP_nominal,
        mCW_flow_nominal=mCW_flow_nominal,
        eta=eta,
        dPByp_nominal=dPByp_nominal,
        byp(dPByp_nominal=dPByp_nominal),
        TCW_start=273.15 + 29.44,
        v_flow_rate=vTow_flow_rate,
        dTApp_nominal=dTApp_nominal,
        TWetBul_nominal=TWetBul_nominal,
        n=n,
        TCWLowSet=288.71,
        dTCW_nominal=dTCW_nominal)
        annotation (Placement(transformation(extent={{-190,-42},{-162,-14}})));
      Subsystems.Pump.SimPumpSystem      pumCW(
        redeclare package Medium = MediumCW,
        m_flow_nominal=mCW_flow_nominal,
        n=n,
        Motor_eta={Motor_eta for i in linspace(
            1,
            n,
            n)},
        Hydra_eta={Hydra_eta for i in linspace(
            1,
            n,
            n)})             annotation (Placement(transformation(extent={{-146,-110},
                {-112,-74}})));
      Buildings.Fluid.Storage.ExpansionVessel expVesCW(
          redeclare package Medium = MediumCW)
        annotation (Placement(transformation(extent={{-184,-78},{-176,-70}})));
      replaceable Devices.WaterSide.Control.PlantStageN       chillerStage(
        tWai=1800,
        n=n,
        thehol=thrhol,
        Cap=Cap) annotation (Placement(transformation(extent={{-80,58},{-60,78}})));
      replaceable Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWBuiEnt(
        redeclare package Medium = MediumCHW,
        allowFlowReversal=true,
        m_flow_nominal=sum(mCHW_flow_nominal))
                                annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={98,-90})));
      parameter
         Buildings.Fluid.Chillers.Data.ElectricEIR.Generic
        datChi[integer(n)]
        annotation (Placement(transformation(extent={{80,88},{100,108}})));
      Modelica.Blocks.Sources.RealExpression PCh(y=sum(mulChiSys.P))
        annotation (Placement(transformation(extent={{140,90},{160,110}})));
      Modelica.Blocks.Continuous.Integrator ECh
        annotation (Placement(transformation(extent={{200,90},{220,110}})));
      Modelica.Blocks.Sources.RealExpression PConSpePum(y=sum(pumPriCHW.P) + sum(
            pumCW.P))
        annotation (Placement(transformation(extent={{142,48},{162,68}})));
      Modelica.Blocks.Continuous.Integrator EConSpePum
        annotation (Placement(transformation(extent={{200,48},{220,68}})));
      Modelica.Blocks.Sources.RealExpression PVarSpePum(y=sum(pumSecCHW.P))
        annotation (Placement(transformation(extent={{140,22},{160,42}})));
      Modelica.Blocks.Continuous.Integrator EVarSpePum
        annotation (Placement(transformation(extent={{200,10},{220,30}})));
      Modelica.Blocks.Sources.RealExpression PCooTow(y=sum(cooTowWithByp.mulCooTowSys.P))
        annotation (Placement(transformation(extent={{158,-32},{178,-12}})));
      Modelica.Blocks.Continuous.Integrator ECooTow
        annotation (Placement(transformation(extent={{200,-34},{220,-14}})));
      Modelica.Blocks.Sources.RealExpression PTot(y=PCh.y + PConSpePum.y +
            PVarSpePum.y + PCooTow.y)
        annotation (Placement(transformation(extent={{160,-90},{180,-70}})));
      Modelica.Blocks.Continuous.Integrator ETot
        annotation (Placement(transformation(extent={{200,-90},{220,-70}})));
      Modelica.Blocks.Sources.RealExpression runCh
        annotation (Placement(transformation(extent={{160,-130},{180,-110}})));

      Modelica.Blocks.Continuous.Integrator mainCos
        annotation (Placement(transformation(extent={{216,-130},{236,-110}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare package Medium =
            MediumCHW)
        "Fluid connector b (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{130,-152},{150,-132}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare package Medium =
            MediumCHW)
        "Fluid connector a (positive design flow direction is from port_a to port_b)"
        annotation (Placement(transformation(extent={{130,110},{150,130}})));
      Modelica.Blocks.Interfaces.RealInput TCWSet
        "Temperature set point of the condenser water"
        annotation (Placement(transformation(extent={{-312,-78},{-280,-46}})));
      Modelica.Blocks.Interfaces.RealInput TWetBul
        "Entering air wet bulb temperature"
        annotation (Placement(transformation(extent={{-312,-136},{-280,-104}})));
      Modelica.Blocks.Interfaces.RealInput dP "Measured pressure drop"
        annotation (Placement(transformation(extent={{-314,84},{-282,116}})));
      Modelica.Blocks.Interfaces.RealInput TCHWSet
        "Temperature setpoint of the chilled water"
        annotation (Placement(transformation(extent={{-312,-16},{-280,16}})));
      Modelica.Blocks.Interfaces.RealOutput T "Temperature of the passing fluid"
        annotation (Placement(transformation(extent={{242,-12},{262,8}})));
      Buildings.Fluid.Sensors.TemperatureTwoPort senTCHWBuiLea(
        redeclare package Medium = MediumCHW,
        allowFlowReversal=true,
        m_flow_nominal=sum(mCHW_flow_nominal)) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={70,18})));
      replaceable Buildings.Fluid.Sensors.MassFlowRate senMasFloSecCHW(redeclare
          package Medium =
            MediumCHW) annotation (Placement(transformation(
            extent={{10,12},{-10,-12}},
            rotation=180,
            origin={126,-90})));
      Modelica.Blocks.Sources.RealExpression Loa(y=senMasFloSecCHW.m_flow*4200*(
            senTCHWBuiLea.T - senTCHWBuiEnt.T))
        annotation (Placement(transformation(extent={{-174,16},{-154,36}})));
      Devices.Control.conPI conPI(k=0.001, Ti=60)
        annotation (Placement(transformation(extent={{60,50},{80,70}})));
      Modelica.Blocks.Sources.RealExpression SetPoi(y=dP_nominal*0.5)
        annotation (Placement(transformation(extent={{-12,62},{8,82}})));
    equation
      connect(senTCHWByp.port_a, senMasFloByp.port_b) annotation (Line(
          points={{-4.44089e-016,-20},{-4.44089e-016,-32},{0,-32},{0,-42}},
          color={0,127,255},
          smooth=Smooth.None,
          thickness=1));
      connect(senTCHWByp.port_b, pumPriCHW.port_a) annotation (Line(
          points={{6.66134e-016,0},{6.66134e-016,18},{-12,18}},
          color={0,127,255},
          smooth=Smooth.None,
          thickness=1));
      connect(mulChiSys.port_a_CHW, pumPriCHW.port_b) annotation (Line(
          points={{-56,6.2},{-54,6.2},{-54,18},{-48,18}},
          color={0,127,255},
          smooth=Smooth.None,
          thickness=1));
      connect(mulChiSys.port_b_CHW, senMasFloByp.port_a) annotation (Line(
          points={{-56,-24.2},{-56,-90},{0,-90},{0,-62}},
          color={0,127,255},
          smooth=Smooth.None,
          thickness=1));
      connect(expVesCHW.port_a, senMasFloByp.port_a) annotation (Line(
          points={{-40,-78},{-40,-90},{-1.77636e-015,-90},{-1.77636e-015,-62}},
          color={0,127,255},
          smooth=Smooth.None,
          thickness=1));
      connect(On.y, realToBoolean.u) annotation (Line(
          points={{-241,40},{-200,40},{-200,90},{-162,90}},
          color={0,0,127},
          smooth=Smooth.None,
          pattern=LinePattern.Dash));
      connect(cooTowWithByp.port_a, mulChiSys.port_b_CW) annotation (Line(
          points={{-162,-19.6},{-162,18},{-100,18},{-100,4},{-98,4},{-98,6.2},{-94,6.2}},
          color={0,127,255},
          smooth=Smooth.None,
          thickness=1));
      connect(cooTowWithByp.port_b, pumCW.port_a) annotation (Line(
          points={{-162,-39.2},{-162,-92},{-146,-92}},
          color={0,127,255},
          smooth=Smooth.None,
          thickness=1));
      connect(pumCW.port_b, mulChiSys.port_a_CW) annotation (Line(
          points={{-112,-92},{-100,-92},{-100,-24.2},{-94,-24.2}},
          color={0,127,255},
          smooth=Smooth.None,
          thickness=1));
      connect(expVesCW.port_a, pumCW.port_a) annotation (Line(
          points={{-180,-78},{-180,-92},{-146,-92}},
          color={0,127,255},
          smooth=Smooth.None,
          thickness=1));

      connect(pumSecCHW.port_a, senMasFloByp.port_a) annotation (Line(
          points={{44,-90},{0,-90},{0,-62},{-1.83187e-015,-62}},
          color={0,127,255},
          smooth=Smooth.None,
          thickness=1));
      connect(chillerStage.y, mulChiSys.On) annotation (Line(
          points={{-59,68},{-40,68},{-40,40},{-120,40},{-120,-16.6},{-95.71,-16.6}},
          color={0,0,127},
          pattern=LinePattern.Dash));

      connect(pumCW.On, mulChiSys.On) annotation (Line(
          points={{-147.53,-81.2},{-152,-81.2},{-152,-40},{-112,-40},{-112,-16.6},{-95.71,
              -16.6}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(cooTowWithByp.On, mulChiSys.On) annotation (Line(
          points={{-191.26,-19.6},{-200,-19.6},{-200,-8},{-120,-8},{-120,-16.6},{-95.71,
              -16.6}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(chillerStage.On, realToBoolean.y) annotation (Line(
          points={{-82,76},{-120,76},{-120,90},{-139,90}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(chillerStage.Status, mulChiSys.Rat) annotation (Line(
          points={{-82,60},{-90,60},{-90,36},{-44,36},{-44,-16.6},{-54.1,-16.6}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(pumPriCHW.On, mulChiSys.On) annotation (Line(
          points={{-10.38,28.8},{10,28.8},{10,52},{-120,52},{-120,-16.6},{-95.71,-16.6}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(pumSecCHW.port_b, senTCHWBuiEnt.port_a) annotation (Line(
          points={{78,-90},{88,-90}},
          color={0,127,255},
          thickness=1));

      connect(PCh.y, ECh.u) annotation (Line(
          points={{161,100},{198,100}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(PConSpePum.y, EConSpePum.u) annotation (Line(
          points={{163,58},{163,58},{194,58},{198,58}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(PVarSpePum.y, EVarSpePum.u) annotation (Line(
          points={{161,32},{180,32},{180,20},{198,20}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(PCooTow.y, ECooTow.u) annotation (Line(
          points={{179,-22},{179,-22},{192,-22},{192,-24},{198,-24}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(PTot.y, ETot.u) annotation (Line(
          points={{181,-80},{189.5,-80},{198,-80}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(runCh.y, mainCos.u) annotation (Line(
          points={{181,-120},{200,-120},{214,-120}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(cooTowWithByp.TCWSet, TCWSet) annotation (Line(
          points={{-191.26,-28},{-260,-28},{-260,-62},{-296,-62}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(cooTowWithByp.TWetBul, TWetBul) annotation (Line(
          points={{-191.26,-36.4},{-240,-36.4},{-240,-120},{-296,-120}},
          color={0,0,127},
          pattern=LinePattern.Dash));

      connect(mulChiSys.TCHWSet, TCHWSet) annotation (Line(
          points={{-95.71,-1.4},{-144,-1.4},{-144,0},{-296,0}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(senTCHWBuiEnt.T, T) annotation (Line(
          points={{98,-79},{110,-79},{110,-2},{252,-2}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(pumPriCHW.port_a, senTCHWBuiLea.port_b) annotation (Line(
          points={{-12,18},{60,18}},
          color={0,127,255},
          thickness=1));
      connect(senTCHWBuiLea.port_a, port_a) annotation (Line(
          points={{80,18},{140,18},{140,120}},
          color={0,127,255},
          thickness=1));
      connect(senTCHWBuiEnt.port_b, senMasFloSecCHW.port_a) annotation (Line(points={{108,-90},
              {108,-90},{116,-90}},           color={0,127,255}));
      connect(senMasFloSecCHW.port_b, port_b) annotation (Line(
          points={{136,-90},{140,-90},{140,-142}},
          color={0,127,255},
          thickness=1));
      connect(Loa.y, chillerStage.Loa) annotation (Line(
          points={{-153,26},{-124,26},{-124,68},{-82,68}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      connect(conPI.On, realToBoolean.y) annotation (Line(points={{58,66},{28,66},{
              28,90},{-139,90}}, color={255,0,255}));
      connect(SetPoi.y, conPI.SetPoi) annotation (Line(points={{9,72},{36,72},{36,
              60},{58,60}}, color={0,0,127}));
      connect(conPI.Mea, dP) annotation (Line(points={{58,54},{26,54},{26,44},{-194,
              44},{-194,100},{-298,100}}, color={0,0,127}));
      connect(conPI.y, pumSecCHW.SpeSig[1]) annotation (Line(points={{81,60},{96,60},
              {96,-30},{18,-30},{18,-75.6},{42.47,-75.6}}, color={0,0,127}));
      annotation (__Dymola_Commands(file=
              "modelica://ChillerPlantSystem/Resources/Scripts/Dymola/LejeunePlant/ChillerPlantSystem.mos"
            "Simulate and plot"),
      Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-280,-140},{240,
                120}})),
        experiment(
          StartTime=1.728e+007,
          StopTime=1.73664e+007,
          __Dymola_NumberOfIntervals=1440,
          __Dymola_Algorithm="Dassl"),
        __Dymola_experimentSetupOutput,
        Documentation(info="<html>
<p>The schematic drawing of the Lejeune plant is shown as folowing.</p>
<p><img src=\"Resources/Images/lejeunePlant/lejeune_schematic_drawing.jpg\" alt=\"image\"/> </p>
<p>In addition, the parameters are listed as below.</p>
<p>The parameters for the chiller plant.</p>
<p><img src=\"Resources/Images/lejeunePlant/Chiller.png\" alt=\"image\"/> </p>
<p>The parameters for the primary chilled water pump.</p>
<p><img src=\"Resources/Images/lejeunePlant/PriCHWPum.png\" alt=\"image\"/> </p>
<p>The parameters for the secondary chilled water pump.</p>
<p><img src=\"Resources/Images/lejeunePlant/SecCHWPum1.png\" alt=\"image\"/> </p>
<p><img src=\"Resources/Images/lejeunePlant/SecCHWPum2.png\" alt=\"image\"/> </p>
<p>The parameters for the condenser water pump.</p>
<p><img src=\"Resources/Images/lejeunePlant/CWPum.png\" alt=\"image\"/> </p>
</html>"),
        Icon(graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-36,58},{28,38}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-36,-26},{28,-46}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-76,24},{-86,-2},{-66,-2},{-76,24}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{50,20},{74,-4}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Line(points={{-76,24},{-76,46},{-36,46}}, color={0,0,127}),
            Line(points={{-76,-2},{-76,-36},{-36,-36}}, color={0,0,127}),
            Line(points={{62,20},{62,46},{28,46}}, color={0,0,127}),
            Line(points={{62,-4},{62,-36},{28,-36}}, color={0,0,127})}));
    end ChillerPlant_simple;

    package Examples
       extends Modelica.Icons.ExamplesPackage;
      model Floor
        import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
        extends Modelica.Icons.Example;
        package MediumAir = Buildings.Media.Air "Medium model for air";
        package MediumCooWat = Buildings.Media.Water "Medium model for chilled water";
        package MediumHeaWat = Buildings.Media.Water "Medium model for heating water";

        parameter Modelica.Units.SI.Pressure PreDroCoiAir=50
          "Pressure drop in the air side";
        parameter Modelica.Units.SI.Pressure PreDroMixingBoxAir=50
          "Pressure drop in the air side";
        parameter Modelica.Units.SI.Pressure PreDroCooWat=79712
          "Pressure drop in the water side";

        parameter Modelica.Units.SI.Temperature TemEcoHig=273.15 + 15.58
          "the highest temeprature when the economizer is on";
        parameter Modelica.Units.SI.Temperature TemEcoLow=273.15 + 0
          "the lowest temeprature when the economizer is on";
        parameter Real MixingBoxDamMin = 0.3 "the minimum damper postion";

        parameter Modelica.Units.SI.Time waitTime(min=0) = 1800
          "Wait time before transition fires";
        parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]={(mAirFloRat1 +
            mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)/1.2*0.5,(
            mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)/1.2*
            0.7,(mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)
            /1.2,(mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)
            /1.2*2} "Volume flow rate curve";
        parameter Real HydEff[:] = {0.93*0.65,0.93*0.7,0.93,0.93*0.6} "Hydraulic efficiency";
        parameter Real MotEff[:] = {0.6045*0.65,0.6045*0.7,0.6045,0.6045*0.6} "Motor efficiency";

        parameter Modelica.Units.SI.Pressure SupPreCur[:]={1400,1000,700,700*0.5}
          "Pressure curve";
        parameter Modelica.Units.SI.Pressure RetPreCur[:]={600,400,200,100}
          "Pressure curve";

        parameter Modelica.Units.SI.Pressure PreAirDroMai1=140
          "Pressure drop 1 across the duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai2=140
          "Pressure drop 2 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai3=120
          "Pressure drop 3 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai4=152
          "Pressure drop 4 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroBra1=0
          "Pressure drop 1 across the duct branch 1";

        parameter Modelica.Units.SI.Pressure PreAirDroBra2=0
          "Pressure drop 1 across the duct branch 2";

        parameter Modelica.Units.SI.Pressure PreAirDroBra3=0
          "Pressure drop 1 across the duct branch 3";

        parameter Modelica.Units.SI.Pressure PreAirDroBra4=0
          "Pressure drop 1 across the duct branch 4";

        parameter Modelica.Units.SI.Pressure PreAirDroBra5=0
          "Pressure drop 1 across the duct branch 5";

        parameter Modelica.Units.SI.Pressure PreWatDroMai1=79712*0.2
          "Pressure drop 1 across the pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai2=79712*0.2
          "Pressure drop 2 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai3=79712*0.2
          "Pressure drop 3 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai4=79712*0.2
          "Pressure drop 4 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroBra1=0
          "Pressure drop 1 across the pipe branch 1";

        parameter Modelica.Units.SI.Pressure PreWatDroBra2=0
          "Pressure drop 1 across the pipe branch 2";

        parameter Modelica.Units.SI.Pressure PreWatDroBra3=0
          "Pressure drop 1 across the pipe branch 3";

        parameter Modelica.Units.SI.Pressure PreWatDroBra4=0
          "Pressure drop 1 across the pipe branch 4";

        parameter Modelica.Units.SI.Pressure PreWatDroBra5=0
          "Pressure drop 1 across the pipe branch 5";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat1=10.92*1.2
          "mass flow rate for vav 1";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat2=2.25*1.2
          "mass flow rate for vav 2";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat3=1.49*1.2
          "mass flow rate for vav 3";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat4=1.9*1.2
          "mass flow rate for vav 4";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat5=1.73*1.2
          "mass flow rate for vav 5";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat1=mAirFloRat1*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 1";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat2=mAirFloRat2*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 2";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat3=mAirFloRat3*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 3";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat4=mAirFloRat4*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 4";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat5=mAirFloRat5*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 5";

        parameter Modelica.Units.SI.Pressure PreDroAir1=200
          "Pressure drop in the air side of vav 1";
        parameter Modelica.Units.SI.Pressure PreDroWat1=79712
          "Pressure drop in the water side of vav 1";
        parameter Modelica.Units.SI.Efficiency eps1(max=1) = 0.8
          "Heat exchanger effectiveness of vav 1";

        parameter Modelica.Units.SI.Pressure PreDroAir2=124
          "Pressure drop in the air side of vav 2";
        parameter Modelica.Units.SI.Pressure PreDroWat2=79712
          "Pressure drop in the water side of vav 2";
        parameter Modelica.Units.SI.Efficiency eps2(max=1) = 0.8
          "Heat exchanger effectiveness of vav 2";

        parameter Modelica.Units.SI.Pressure PreDroAir3=124
          "Pressure drop in the air side of vav 3";
        parameter Modelica.Units.SI.Pressure PreDroWat3=79712
          "Pressure drop in the water side of vav 3";
        parameter Modelica.Units.SI.Efficiency eps3(max=1) = 0.8
          "Heat exchanger effectiveness of vav 3";

        parameter Modelica.Units.SI.Pressure PreDroAir4=124
          "Pressure drop in the air side of vav 4";
        parameter Modelica.Units.SI.Pressure PreDroWat4=79712
          "Pressure drop in the water side of vav 4";
        parameter Modelica.Units.SI.Efficiency eps4(max=1) = 0.8
          "Heat exchanger effectiveness of vav 4";

        parameter Modelica.Units.SI.Pressure PreDroAir5=124
          "Pressure drop in the air side of vav 1";
        parameter Modelica.Units.SI.Pressure PreDroWat5=79712
          "Pressure drop in the water side of vav 1";
        parameter Modelica.Units.SI.Efficiency eps5(max=1) = 0.8
          "Heat exchanger effectiveness of vav 5";

        BuildingControlEmulator.Systems.Floor floor(
          redeclare package MediumAir = MediumAir,
          redeclare package MediumHeaWat = MediumHeaWat,
          redeclare package MediumCooWat = MediumCooWat,
          PreDroCoiAir=PreDroCoiAir,
          PreDroMixingBoxAir=PreDroMixingBoxAir,
          PreDroCooWat=PreDroCooWat,
          TemEcoHig=TemEcoHig,
          TemEcoLow=TemEcoLow,
          MixingBoxDamMin=MixingBoxDamMin,
          waitTime=waitTime,
          HydEff=HydEff,
          MotEff=MotEff,
          VolFloCur=VolFloCur,
          SupPreCur=SupPreCur,
          RetPreCur=RetPreCur,
          PreAirDroMai1=PreAirDroMai1,
          PreAirDroMai2=PreAirDroMai2,
          PreAirDroMai3=PreAirDroMai3,
          PreAirDroMai4=PreAirDroMai4,
          PreAirDroBra1=PreAirDroBra1,
          PreAirDroBra2=PreAirDroBra2,
          PreAirDroBra3=PreAirDroBra3,
          PreAirDroBra4=PreAirDroBra4,
          PreAirDroBra5=PreAirDroBra5,
          PreWatDroMai1=PreWatDroMai1,
          PreWatDroMai2=PreWatDroMai2,
          PreWatDroMai3=PreWatDroMai3,
          PreWatDroMai4=PreWatDroMai4,
          PreWatDroBra1=PreWatDroBra1,
          PreWatDroBra2=PreWatDroBra2,
          PreWatDroBra3=PreWatDroBra3,
          PreWatDroBra4=PreWatDroBra4,
          PreWatDroBra5=PreWatDroBra5,
          mAirFloRat1=mAirFloRat1,
          mAirFloRat2=mAirFloRat2,
          mAirFloRat3=mAirFloRat3,
          mAirFloRat4=mAirFloRat4,
          mAirFloRat5=mAirFloRat5,
          mWatFloRat1=mWatFloRat1,
          mWatFloRat2=mWatFloRat2,
          mWatFloRat3=mWatFloRat3,
          mWatFloRat4=mWatFloRat4,
          mWatFloRat5=mWatFloRat5,
          PreDroAir1=PreDroAir1,
          PreDroWat1=PreDroWat1,
          eps1=eps1,
          PreDroAir2=PreDroAir2,
          PreDroWat2=PreDroWat2,
          eps2=eps2,
          PreDroAir3=PreDroAir3,
          PreDroWat3=PreDroWat3,
          eps3=eps3,
          PreDroAir4=PreDroAir4,
          PreDroWat4=PreDroWat4,
          eps4=eps4,
          PreDroAir5=PreDroAir5,
          PreDroWat5=PreDroWat5,
          eps5=eps5,
          duaFanAirHanUnit(Fan_k=0.01))
          annotation (Placement(transformation(extent={{-24,-20},{26,22}})));
        Buildings.Fluid.Sources.Boundary_pT sou(
          nPorts=2,
          redeclare package Medium = MediumAir,
          p(displayUnit="Pa") = 100000)
          annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));

        Buildings.Fluid.Sources.Boundary_pT souCooWat(
          redeclare package Medium = MediumCooWat,
          nPorts=1,
          p(displayUnit="Pa") = 100000 + PreDroCooWat)
                    annotation (Placement(transformation(extent={{-22,60},{-42,80}})));

        Buildings.Fluid.Sources.Boundary_pT sinCooWat(
          nPorts=1,
          redeclare package Medium = MediumCooWat,
          p(displayUnit="Pa") = 100000,
          T=279.15)
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
        Buildings.Fluid.Sources.Boundary_pT souHeaWat(
          nPorts=1,
          p(displayUnit="Pa") = 100000 + PreWatDroMai1 + PreWatDroMai2 +
            PreWatDroMai3 + PreWatDroMai4 + PreWatDroBra5 + PreDroWat5,
          redeclare package Medium = MediumHeaWat)
          annotation (Placement(transformation(extent={{0,60},{20,80}})));

        Buildings.Fluid.Sources.Boundary_pT sinHeaWat(
          nPorts=1,
          p(displayUnit="Pa") = 100000,
          redeclare package Medium = MediumHeaWat)
          annotation (Placement(transformation(extent={{60,60},{40,80}})));

        Modelica.Blocks.Sources.Ramp loa[5](duration=86400, height=1*1000*10)
          annotation (Placement(transformation(extent={{0,-60},{20,-40}})));
        Modelica.Blocks.Sources.Constant const[5](k=273.15 + 24)
          annotation (Placement(transformation(extent={{-100,18},{-80,38}})));
        Modelica.Blocks.Sources.Constant const1(k=273.15 + 12.88)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.Constant const2(k=400)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-100,-106},{-80,-86}})));
        Modelica.Blocks.Sources.Ramp ramp1[
                                          5](duration=86400, height=1) annotation (Placement(transformation(extent={{-100,42},
                  {-80,62}})));
        Modelica.Blocks.Sources.Ramp ramp2[
                                          5](duration=86400,
          offset=0,
          height=0)                                                    annotation (Placement(transformation(extent={{-72,-60},
                  {-52,-40}})));
        Modelica.Blocks.Sources.Constant const3[5](k=273.15 + 20)
          annotation (Placement(transformation(extent={{0,-100},{-20,-80}})));
        Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam=
              Modelica.Utilities.Files.loadResource(
              "modelica://Buildings/Resources/weatherdata/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos"),
            computeWetBulbTemperature=false) "Weather data reader"
          annotation (Placement(transformation(extent={{30,-80},{50,-60}})));
        Modelica.Blocks.Routing.RealPassThrough TOut(y(
            final quantity="ThermodynamicTemperature",
            final unit="K",
            displayUnit="degC",
            min=0))
          annotation (Placement(transformation(extent={{72,-80},{92,-60}})));
        Buildings.BoundaryConditions.WeatherData.Bus
                                           weaBus
          "Weather data bus"
          annotation (Placement(transformation(extent={{50,-80},{70,-60}})));
      equation
        connect(floor.port_Fre_Air, sou.ports[1])
          annotation (Line(points={{-24,9.4},{-56,9.4},{-56,2},{-80,2}}, color={0,127,255}));
        connect(floor.port_Exh_Air, sou.ports[2])
          annotation (Line(points={{-24,-7.4},{-80,-7.4},{-80,-2}}, color={0,127,255}));
        connect(sinCooWat.ports[1], floor.port_b_CooWat)
          annotation (Line(points={{-60,70},{-52,70},{-52,40},{-14,40},{-14,22}}, color={0,127,255}));
        connect(floor.port_a_CooWat, souCooWat.ports[1])
          annotation (Line(points={{-4,22.42},{-4,46},{-48,46},{-48,70},{-42,70}},
                                                                                color={0,127,255}));
        connect(floor.port_a_HeaWat, souHeaWat.ports[1])
          annotation (Line(points={{6,22},{6,22},{6,46},{24,46},{24,70},{20,70}}, color={0,127,255}));
        connect(floor.port_b_HeaWat, sinHeaWat.ports[1])
          annotation (Line(points={{16,22},{16,36},{34,36},{34,70},{40,70}}, color={0,127,255}));
        connect(loa.y, floor.Q_flow) annotation (Line(
            points={{21,-50},{60,-50},{60,-16.01},{28.75,-16.01}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(const1.y, floor.DisTemPSetPoi) annotation (Line(
            points={{-79,-30},{-64,-30},{-46,-30},{-46,13.6},{-27,13.6}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(const2.y, floor.PreSetPoi) annotation (Line(
            points={{-79,-70},{-38,-70},{-38,5.41},{-26.75,5.41}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(booleanExpression.y, floor.OnZon) annotation (Line(
            points={{-79,-96},{-34,-96},{-34,-20},{-27,-20}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(floor.OnFan, floor.OnZon) annotation (Line(
            points={{-27,-11.6},{-34,-11.6},{-34,-20},{-27,-20}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(ramp1.y, floor.AirFlowRatSetPoi) annotation (Line(
            points={{-79,52},{-54,52},{-54,-2.99},{-26.75,-2.99}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(ramp2.y, floor.yVal) annotation (Line(
            points={{-51,-50},{-42,-50},{-42,-15.8},{-27,-15.8}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(const.y, floor.ZonCooTempSetPoi) annotation (Line(
            points={{-79,28},{-44,28},{-44,22},{-27,22}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(const3.y, floor.ZonHeaTempSetPoi) annotation (Line(
            points={{-21,-90},{-50,-90},{-50,17.8},{-27,17.8}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(weaDat.weaBus, weaBus) annotation (Line(
            points={{50,-70},{54,-70},{54,-70},{60,-70}},
            color={255,204,51},
            thickness=0.5));
        connect(TOut.u, weaBus.TDryBul)
          annotation (Line(points={{70,-70},{60,-70}}, color={0,0,127}));
        connect(TOut.y, floor.TOut) annotation (Line(points={{93,-70},{96,-70},{96,
                -28},{2,-28},{2,-22.94},{1,-22.94}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(
                preserveAspectRatio=false)),
          experiment(StopTime=86400));
      end Floor;

      model FloorDX
        import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
        extends Modelica.Icons.Example;
        package MediumAir = Buildings.Media.Air "Medium model for air";

        parameter Modelica.Units.SI.Pressure PreDroCoiAir=50
          "Pressure drop in the air side";
        parameter Modelica.Units.SI.Pressure PreDroMixingBoxAir=50
          "Pressure drop in the air side";

        parameter Modelica.Units.SI.Temperature TemEcoHig=273.15 + 15.58
          "the highest temeprature when the economizer is on";
        parameter Modelica.Units.SI.Temperature TemEcoLow=273.15 + 0
          "the lowest temeprature when the economizer is on";
        parameter Real MixingBoxDamMin = 0.3 "the minimum damper postion";

        parameter Modelica.Units.SI.Time waitTime(min=0) = 1800
          "Wait time before transition fires";
        parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]={(mAirFloRat1 +
            mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)/1.2*0.5,(
            mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)/1.2*
            0.7,(mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)
            /1.2,(mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)
            /1.2*2} "Volume flow rate curve";
        parameter Real HydEff[:] = {0.93*0.65,0.93*0.7,0.93,0.93*0.6} "Hydraulic efficiency";
        parameter Real MotEff[:] = {0.6045*0.65,0.6045*0.7,0.6045,0.6045*0.6} "Motor efficiency";

        parameter Modelica.Units.SI.Pressure SupPreCur[:]={1400,1000,700,700*0.5}
          "Pressure curve";
        parameter Modelica.Units.SI.Pressure RetPreCur[:]={600,400,200,100}
          "Pressure curve";

        parameter Modelica.Units.SI.Time minOffTim(min=0) = 900 "Minimum off time";
        parameter Modelica.Units.SI.Time minOnTim(min=0) = 0 "Minimum on time";
        parameter Real dT = 0.5
            "Temperature control deadband";

        parameter Modelica.Units.SI.Pressure PreAirDroMai1=140
          "Pressure drop 1 across the duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai2=140
          "Pressure drop 2 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai3=120
          "Pressure drop 3 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai4=152
          "Pressure drop 4 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroBra1=0
          "Pressure drop 1 across the duct branch 1";

        parameter Modelica.Units.SI.Pressure PreAirDroBra2=0
          "Pressure drop 1 across the duct branch 2";

        parameter Modelica.Units.SI.Pressure PreAirDroBra3=0
          "Pressure drop 1 across the duct branch 3";

        parameter Modelica.Units.SI.Pressure PreAirDroBra4=0
          "Pressure drop 1 across the duct branch 4";

        parameter Modelica.Units.SI.Pressure PreAirDroBra5=0
          "Pressure drop 1 across the duct branch 5";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat1=2.72
          "mass flow rate for vav 1";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat2=0.82
          "mass flow rate for vav 2";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat3=0.63
          "mass flow rate for vav 3";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat4=0.78
          "mass flow rate for vav 4";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat5=1.56
          "mass flow rate for vav 5";

        parameter Modelica.Units.SI.Pressure PreDroAir1=200
          "Pressure drop in the air side of vav 1";

        parameter Modelica.Units.SI.Pressure PreDroAir2=124
          "Pressure drop in the air side of vav 2";

        parameter Modelica.Units.SI.Pressure PreDroAir3=124
          "Pressure drop in the air side of vav 3";

        parameter Modelica.Units.SI.Pressure PreDroAir4=124
          "Pressure drop in the air side of vav 4";

        parameter Modelica.Units.SI.Pressure PreDroAir5=124
          "Pressure drop in the air side of vav 1";

        BuildingControlEmulator.Systems.FloorDX
                                              floorDX(
          redeclare package MediumAir = MediumAir,
          PreDroCoiAir=PreDroCoiAir,
          PreDroMixingBoxAir=PreDroMixingBoxAir,
          TemEcoHig=TemEcoHig,
          TemEcoLow=TemEcoLow,
          MixingBoxDamMin=MixingBoxDamMin,
          waitTime=waitTime,
          HydEff=HydEff,
          MotEff=MotEff,
          VolFloCur=VolFloCur,
          SupPreCur=SupPreCur,
          RetPreCur=RetPreCur,
          minOffTim=minOffTim,
          minOnTim=minOnTim,
          dT=dT,
          PreAirDroMai1=PreAirDroMai1,
          PreAirDroMai2=PreAirDroMai2,
          PreAirDroMai3=PreAirDroMai3,
          PreAirDroMai4=PreAirDroMai4,
          PreAirDroBra1=PreAirDroBra1,
          PreAirDroBra2=PreAirDroBra2,
          PreAirDroBra3=PreAirDroBra3,
          PreAirDroBra4=PreAirDroBra4,
          PreAirDroBra5=PreAirDroBra5,
          mAirFloRat1=mAirFloRat1,
          mAirFloRat2=mAirFloRat2,
          mAirFloRat3=mAirFloRat3,
          mAirFloRat4=mAirFloRat4,
          mAirFloRat5=mAirFloRat5,
          PreDroAir1=PreDroAir1,
          PreDroAir2=PreDroAir2,
          PreDroAir3=PreDroAir3,
          PreDroAir4=PreDroAir4,
          PreDroAir5=PreDroAir5,
          Q_flow_nominal1=Q_flow_nominal1,
          Q_flow_nominal2=Q_flow_nominal2,
          Q_flow_nominal3=Q_flow_nominal3,
          Q_flow_nominal4=Q_flow_nominal4,
          Q_flow_nominal5=Q_flow_nominal5,
          datCoi=datCoi)
          annotation (Placement(transformation(extent={{-24,-18},{26,24}})));
        Buildings.Fluid.Sources.Boundary_pT sou(
          nPorts=2,
          redeclare package Medium = MediumAir,
          p(displayUnit="Pa") = 100000)
          annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));

        Modelica.Blocks.Sources.Ramp loa1(duration=86400, height=33000)
          annotation (Placement(transformation(extent={{-2,-60},{18,-40}})));
        Modelica.Blocks.Sources.Constant const[5](k=273.15 + 24)
          annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
        Modelica.Blocks.Sources.Constant const1(k=273.15 + 12.88)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.Constant const2(k=400)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-100,-106},{-80,-86}})));
        Modelica.Blocks.Sources.Ramp ramp1[
                                          5](duration=86400, height=1,
          offset=0.3)                                                  annotation (Placement(transformation(extent={{-100,80},
                  {-80,100}})));
        Modelica.Blocks.Sources.Ramp ramp2[
                                          5](duration=86400,
          offset=0,
          height=0)                                                    annotation (Placement(transformation(extent={{-72,-60},
                  {-52,-40}})));
        Modelica.Blocks.Sources.Constant const3[5](k=273.15 + 20)
          annotation (Placement(transformation(extent={{0,-100},{-20,-80}})));
        parameter
          Buildings.Fluid.HeatExchangers.DXCoils.AirCooled.Data.SingleSpeed.York_Sunline_ZF240
          datCoi
          annotation (Placement(transformation(extent={{40,82},{60,102}})));
        Modelica.Blocks.Sources.Constant const4(k=273.15 + 30)
          annotation (Placement(transformation(extent={{100,12},{80,32}})));

        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal1=1200
          "rated heat flow rate for heating of vav 1";
        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal2=4500
          "rated heat flow rate for heating of vav 2";
        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal3=6700
          "rated heat flow rate for heating of vav 3";
        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal4=4500
          "rated heat flow rate for heating of vav 4";
        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal5=4500
          "rated heat flow rate for heating of vav 5";

        Modelica.Blocks.Sources.Ramp loa2(duration=86400, height=10000)
          annotation (Placement(transformation(extent={{34,-60},{54,-40}})));
        Modelica.Blocks.Sources.Ramp loa3(duration=86400, height=7600)
          annotation (Placement(transformation(extent={{68,-60},{88,-40}})));
        Modelica.Blocks.Sources.Ramp loa4(duration=86400, height=9500)
          annotation (Placement(transformation(extent={{18,-98},{38,-78}})));
        Modelica.Blocks.Sources.Ramp loa5(duration=86400, height=19000)
          annotation (Placement(transformation(extent={{54,-98},{74,-78}})));
      equation
        connect(floorDX.port_Fre_Air, sou.ports[1])
          annotation (Line(points={{-24,11.4},{-56,11.4},{-56,2},{-80,2}},
                                                                         color={0,127,255}));
        connect(floorDX.port_Exh_Air, sou.ports[2])
          annotation (Line(points={{-24,-5.4},{-80,-5.4},{-80,-2}}, color={0,127,255}));
        connect(const1.y, floorDX.DisTemPSetPoi) annotation (Line(
            points={{-79,-30},{-46,-30},{-46,15.6},{-27,15.6}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(const2.y, floorDX.PreSetPoi) annotation (Line(
            points={{-79,-70},{-38,-70},{-38,7.41},{-26.75,7.41}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(booleanExpression.y, floorDX.OnZon) annotation (Line(
            points={{-79,-96},{-34,-96},{-34,-18},{-27,-18}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(floorDX.OnFan, floorDX.OnZon) annotation (Line(
            points={{-27,-9.6},{-34,-9.6},{-34,-18},{-27,-18}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(ramp1.y, floorDX.AirFlowRatSetPoi) annotation (Line(
            points={{-79,90},{-54,90},{-54,-0.99},{-26.75,-0.99}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(ramp2.y, floorDX.yVal) annotation (Line(
            points={{-51,-50},{-42,-50},{-42,-13.8},{-27,-13.8}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(const.y, floorDX.ZonCooTempSetPoi) annotation (Line(
            points={{-79,50},{-44,50},{-44,24},{-27,24}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(const3.y, floorDX.ZonHeaTempSetPoi) annotation (Line(
            points={{-21,-90},{-50,-90},{-50,19.8},{-27,19.8}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(const4.y, floorDX.TOut) annotation (Line(
            points={{79,22},{50,22},{50,19.59},{28.75,19.59}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(loa1.y, floorDX.Q_flow[1]);
        connect(loa2.y, floorDX.Q_flow[2]);
        connect(loa3.y, floorDX.Q_flow[3]);
        connect(loa4.y, floorDX.Q_flow[4]);
        connect(loa5.y, floorDX.Q_flow[5]);

        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(
                preserveAspectRatio=false)),
          experiment(StopTime=86400));
      end FloorDX;

      model FloorWithCon
        import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
        extends Modelica.Icons.Example;
        package MediumAir = Buildings.Media.Air "Medium model for air";
        package MediumCooWat = Buildings.Media.Water "Medium model for chilled water";
        package MediumHeaWat = Buildings.Media.Water "Medium model for heating water";

        parameter Modelica.Units.SI.Pressure PreDroCoiAir=50
          "Pressure drop in the air side";
        parameter Modelica.Units.SI.Pressure PreDroMixingBoxAir=50
          "Pressure drop in the air side";
        parameter Modelica.Units.SI.Pressure PreDroCooWat=79712
          "Pressure drop in the water side";

        parameter Modelica.Units.SI.Temperature TemEcoHig=273.15 + 15.58
          "the highest temeprature when the economizer is on";
        parameter Modelica.Units.SI.Temperature TemEcoLow=273.15 + 0
          "the lowest temeprature when the economizer is on";
        parameter Real MixingBoxDamMin = 0.3 "the minimum damper postion";

        parameter Modelica.Units.SI.Time waitTime(min=0) = 1800
          "Wait time before transition fires";
        parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[:]={(mAirFloRat1 +
            mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)/1.2*0.5,(
            mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)/1.2*
            0.7,(mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)
            /1.2,(mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)
            /1.2*2} "Volume flow rate curve";
        parameter Real HydEff[:] = {0.93*0.65,0.93*0.7,0.93,0.93*0.6} "Hydraulic efficiency";
        parameter Real MotEff[:] = {0.6045*0.65,0.6045*0.7,0.6045,0.6045*0.6} "Motor efficiency";

        parameter Modelica.Units.SI.Pressure SupPreCur[:]={1400,1000,700,700*0.5}
          "Pressure curve";
        parameter Modelica.Units.SI.Pressure RetPreCur[:]={600,400,200,100}
          "Pressure curve";

        parameter Modelica.Units.SI.Pressure PreAirDroMai1=140
          "Pressure drop 1 across the duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai2=140
          "Pressure drop 2 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai3=120
          "Pressure drop 3 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai4=152
          "Pressure drop 4 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroBra1=0
          "Pressure drop 1 across the duct branch 1";

        parameter Modelica.Units.SI.Pressure PreAirDroBra2=0
          "Pressure drop 1 across the duct branch 2";

        parameter Modelica.Units.SI.Pressure PreAirDroBra3=0
          "Pressure drop 1 across the duct branch 3";

        parameter Modelica.Units.SI.Pressure PreAirDroBra4=0
          "Pressure drop 1 across the duct branch 4";

        parameter Modelica.Units.SI.Pressure PreAirDroBra5=0
          "Pressure drop 1 across the duct branch 5";

        parameter Modelica.Units.SI.Pressure PreWatDroMai1=79712*0.2
          "Pressure drop 1 across the pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai2=79712*0.2
          "Pressure drop 2 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai3=79712*0.2
          "Pressure drop 3 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai4=79712*0.2
          "Pressure drop 4 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroBra1=79712*0.6
          "Pressure drop 1 across the pipe branch 1";

        parameter Modelica.Units.SI.Pressure PreWatDroBra2=79712*0.4
          "Pressure drop 1 across the pipe branch 2";

        parameter Modelica.Units.SI.Pressure PreWatDroBra3=79712*0.2
          "Pressure drop 1 across the pipe branch 3";

        parameter Modelica.Units.SI.Pressure PreWatDroBra4=0
          "Pressure drop 1 across the pipe branch 4";

        parameter Modelica.Units.SI.Pressure PreWatDroBra5=0
          "Pressure drop 1 across the pipe branch 5";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat1=10.92*1.2
          "mass flow rate for vav 1";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat2=2.25*1.2
          "mass flow rate for vav 2";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat3=1.49*1.2
          "mass flow rate for vav 3";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat4=1.9*1.2
          "mass flow rate for vav 4";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat5=1.73*1.2
          "mass flow rate for vav 5";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat1=mAirFloRat1*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 1";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat2=mAirFloRat2*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 2";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat3=mAirFloRat3*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 3";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat4=mAirFloRat4*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 4";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat5=mAirFloRat5*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 5";

        parameter Modelica.Units.SI.Pressure PreDroAir1=200
          "Pressure drop in the air side of vav 1";
        parameter Modelica.Units.SI.Pressure PreDroWat1=79712
          "Pressure drop in the water side of vav 1";
        parameter Modelica.Units.SI.Efficiency eps1(max=1) = 0.8
          "Heat exchanger effectiveness of vav 1";

        parameter Modelica.Units.SI.Pressure PreDroAir2=124
          "Pressure drop in the air side of vav 2";
        parameter Modelica.Units.SI.Pressure PreDroWat2=79712
          "Pressure drop in the water side of vav 2";
        parameter Modelica.Units.SI.Efficiency eps2(max=1) = 0.8
          "Heat exchanger effectiveness of vav 2";

        parameter Modelica.Units.SI.Pressure PreDroAir3=124
          "Pressure drop in the air side of vav 3";
        parameter Modelica.Units.SI.Pressure PreDroWat3=79712
          "Pressure drop in the water side of vav 3";
        parameter Modelica.Units.SI.Efficiency eps3(max=1) = 0.8
          "Heat exchanger effectiveness of vav 1";

        parameter Modelica.Units.SI.Pressure PreDroAir4=124
          "Pressure drop in the air side of vav 4";
        parameter Modelica.Units.SI.Pressure PreDroWat4=79712
          "Pressure drop in the water side of vav 4";
        parameter Modelica.Units.SI.Efficiency eps4(max=1) = 0.8
          "Heat exchanger effectiveness of vav 1";

        parameter Modelica.Units.SI.Pressure PreDroAir5=124
          "Pressure drop in the air side of vav 1";
        parameter Modelica.Units.SI.Pressure PreDroWat5=79712
          "Pressure drop in the water side of vav 1";
        parameter Modelica.Units.SI.Efficiency eps5(max=1) = 0.8
          "Heat exchanger effectiveness of vav 1";

        BuildingControlEmulator.Systems.Floor floor(
          fivZonVAV(vol(V=100)),
          redeclare package MediumAir = MediumAir,
          redeclare package MediumHeaWat = MediumHeaWat,
          redeclare package MediumCooWat = MediumCooWat,
          PreDroCoiAir=PreDroCoiAir,
          PreDroMixingBoxAir=PreDroMixingBoxAir,
          PreDroCooWat=PreDroCooWat,
          TemEcoHig=TemEcoHig,
          TemEcoLow=TemEcoLow,
          MixingBoxDamMin=MixingBoxDamMin,
          waitTime=waitTime,
          HydEff=HydEff,
          MotEff=MotEff,
          VolFloCur=VolFloCur,
          SupPreCur=SupPreCur,
          RetPreCur=RetPreCur,
          PreAirDroMai1=PreAirDroMai1,
          PreAirDroMai2=PreAirDroMai2,
          PreAirDroMai3=PreAirDroMai3,
          PreAirDroMai4=PreAirDroMai4,
          PreAirDroBra1=PreAirDroBra1,
          PreAirDroBra2=PreAirDroBra2,
          PreAirDroBra3=PreAirDroBra3,
          PreAirDroBra4=PreAirDroBra4,
          PreAirDroBra5=PreAirDroBra5,
          PreWatDroMai1=PreWatDroMai1,
          PreWatDroMai2=PreWatDroMai2,
          PreWatDroMai3=PreWatDroMai3,
          PreWatDroMai4=PreWatDroMai4,
          PreWatDroBra1=PreWatDroBra1,
          PreWatDroBra2=PreWatDroBra2,
          PreWatDroBra3=PreWatDroBra3,
          PreWatDroBra4=PreWatDroBra4,
          PreWatDroBra5=PreWatDroBra5,
          mAirFloRat1=mAirFloRat1,
          mAirFloRat2=mAirFloRat2,
          mAirFloRat3=mAirFloRat3,
          mAirFloRat4=mAirFloRat4,
          mAirFloRat5=mAirFloRat5,
          mWatFloRat1=mWatFloRat1,
          mWatFloRat2=mWatFloRat2,
          mWatFloRat3=mWatFloRat3,
          mWatFloRat4=mWatFloRat4,
          mWatFloRat5=mWatFloRat5,
          PreDroAir1=PreDroAir1,
          PreDroWat1=PreDroWat1,
          eps1=eps1,
          PreDroAir2=PreDroAir2,
          PreDroWat2=PreDroWat2,
          eps2=eps2,
          PreDroAir3=PreDroAir3,
          PreDroWat3=PreDroWat3,
          eps3=eps3,
          PreDroAir4=PreDroAir4,
          PreDroWat4=PreDroWat4,
          eps4=eps4,
          PreDroAir5=PreDroAir5,
          PreDroWat5=PreDroWat5,
          eps5=eps5,
          duaFanAirHanUnit(Fan_k=0.01))
          annotation (Placement(transformation(extent={{-26,-20},{24,22}})));
        Buildings.Fluid.Sources.Boundary_pT sou(
          nPorts=2,
          redeclare package Medium = MediumAir,
          p(displayUnit="Pa") = 100000)
          annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));

        Buildings.Fluid.Sources.Boundary_pT souCooWat(
          redeclare package Medium = MediumCooWat,
          nPorts=1,
          p(displayUnit="Pa") = 100000 + PreDroCooWat,
          T=279.15) annotation (Placement(transformation(extent={{-22,60},{-42,80}})));

        Buildings.Fluid.Sources.Boundary_pT sinCooWat(
          nPorts=1,
          redeclare package Medium = MediumCooWat,
          p(displayUnit="Pa") = 100000,
          T=279.15)
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));

        Buildings.Fluid.Sources.Boundary_pT souHeaWat(
          nPorts=1,
          p(displayUnit="Pa") = 100000 + PreWatDroMai1 + PreWatDroMai2 + PreWatDroMai3 + PreWatDroMai4 + PreWatDroBra5 + PreDroWat5,
          redeclare package Medium = MediumHeaWat,
          T=353.15)
          annotation (Placement(transformation(extent={{0,60},{20,80}})));

        Buildings.Fluid.Sources.Boundary_pT sinHeaWat(
          nPorts=1,
          p(displayUnit="Pa") = 100000,
          redeclare package Medium = MediumHeaWat)
          annotation (Placement(transformation(extent={{60,60},{40,80}})));
        Modelica.Blocks.Sources.Ramp loa[5](duration=86400,
          height={mAirFloRat1*1000*(22 - 12.88),mAirFloRat2*1000*(22 - 12.88),mAirFloRat3*1000*(22 - 12.88),mAirFloRat4*1000*(22 - 12.88),mAirFloRat5*1000*(22 - 12.88)},
          offset={mAirFloRat1*1000*0.5*(20-25),mAirFloRat2*1000*0.5*(20-25),mAirFloRat3*1000*0.5*(20-25),mAirFloRat4*1000*0.5*(20-25),mAirFloRat5*1000*0.5*(20-25)})
          annotation (Placement(transformation(extent={{-4,-60},{16,-40}})));
        Modelica.Blocks.Sources.Constant const[5](k=273.15 + 24)
          annotation (Placement(transformation(extent={{-100,18},{-80,38}})));
        Modelica.Blocks.Sources.Constant const1(k=273.15 + 12.88)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.Constant const2(k=400)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-100,-106},{-80,-86}})));
        BuildingControlEmulator.Devices.AirSide.Terminal.Controls.ZonCon
                                                                 zonCon[5](
            MinFlowRateSetPoi=0.3,
          HeatingFlowRateSetPoi=0.5,
          heaCon(Ti=60, k=0.001),
          cooCon(k=0.01))
          annotation (Placement(transformation(extent={{60,-10},{80,10}})));
        Modelica.Blocks.Sources.Constant TCooSetPoi[5](k=273.15 + 24)
          annotation (Placement(transformation(extent={{80,20},{60,40}})));
        Modelica.Blocks.Sources.Constant THeaSetPoi[5](k=273.15 + 20)
          annotation (Placement(transformation(extent={{80,-40},{60,-20}})));
        Modelica.Blocks.Sources.Constant const3[5](k=273.15 + 20)
          annotation (Placement(transformation(extent={{20,-98},{0,-78}})));
        Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam=
              Modelica.Utilities.Files.loadResource(
              "modelica://Buildings/Resources/weatherdata/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos"),
            computeWetBulbTemperature=false) "Weather data reader"
          annotation (Placement(transformation(extent={{28,-90},{48,-70}})));
        Buildings.BoundaryConditions.WeatherData.Bus
                                           weaBus
          "Weather data bus"
          annotation (Placement(transformation(extent={{48,-90},{68,-70}})));
        Modelica.Blocks.Routing.RealPassThrough TOut(y(
            final quantity="ThermodynamicTemperature",
            final unit="K",
            displayUnit="degC",
            min=0))
          annotation (Placement(transformation(extent={{70,-90},{90,-70}})));
      equation
        connect(floor.port_Fre_Air, sou.ports[1])
          annotation (Line(points={{-26,9.4},{-56,9.4},{-56,2},{-80,2}}, color={0,127,255}));
        connect(floor.port_Exh_Air, sou.ports[2])
          annotation (Line(points={{-26,-7.4},{-80,-7.4},{-80,-2}}, color={0,127,255}));
        connect(sinCooWat.ports[1], floor.port_b_CooWat)
          annotation (Line(points={{-60,70},{-52,70},{-52,40},{-16,40},{-16,22}}, color={0,127,255}));
        connect(floor.port_a_CooWat, souCooWat.ports[1])
          annotation (Line(points={{-6,22.42},{-6,46},{-48,46},{-48,70},{-42,70}},
                                                                                color={0,127,255}));
        connect(floor.port_a_HeaWat, souHeaWat.ports[1])
          annotation (Line(points={{4,22},{6,22},{6,46},{24,46},{24,70},{20,70}}, color={0,127,255}));
        connect(floor.port_b_HeaWat, sinHeaWat.ports[1])
          annotation (Line(points={{14,22},{14,36},{34,36},{34,70},{40,70}}, color={0,127,255}));
        connect(loa.y, floor.Q_flow) annotation (Line(
            points={{17,-50},{38,-50},{38,-16},{34,-16},{34,-16.01},{26.75,-16.01}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(const1.y, floor.DisTemPSetPoi) annotation (Line(
            points={{-79,-30},{-64,-30},{-46,-30},{-46,13.6},{-29,13.6}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(const2.y, floor.PreSetPoi) annotation (Line(
            points={{-79,-70},{-38,-70},{-38,5.41},{-28.75,5.41}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(booleanExpression.y, floor.OnZon) annotation (Line(
            points={{-79,-96},{-34,-96},{-34,-20},{-29,-20}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(floor.OnFan, floor.OnZon) annotation (Line(
            points={{-29,-11.6},{-34,-11.6},{-34,-20},{-29,-20}},
            color={255,0,255},
            pattern=LinePattern.Dash));
        connect(floor.TZon, zonCon.T) annotation (Line(
            points={{26.5,1},{43.25,1},{43.25,0},{58,0}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(TCooSetPoi.y, zonCon.TCooSetPoi) annotation (Line(
            points={{59,30},{44,30},{44,6},{58,6}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(THeaSetPoi.y, zonCon.THeaSetPoi) annotation (Line(
            points={{59,-30},{44,-30},{44,-6},{58,-6}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(zonCon.yAirFlowSetPoi, floor.AirFlowRatSetPoi) annotation (Line(
            points={{81,6},{90,6},{90,92},{-88,92},{-88,50},{-62,50},{-62,-2.99},{-28.75,
                -2.99}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(zonCon.yValPos, floor.yVal) annotation (Line(
            points={{81,-6},{92,-6},{92,-62},{-60,-62},{-60,-15.8},{-29,-15.8}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(const.y, floor.ZonCooTempSetPoi) annotation (Line(
            points={{-79,28},{-54,28},{-54,22},{-29,22}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(const3.y, floor.ZonHeaTempSetPoi) annotation (Line(
            points={{-1,-88},{-24,-88},{-24,-86},{-52,-86},{-52,17.8},{-29,17.8}},
            color={0,0,127},
            pattern=LinePattern.Dash));
        connect(weaDat.weaBus, weaBus) annotation (Line(
            points={{48,-80},{58,-80}},
            color={255,204,51},
            thickness=0.5));
        connect(TOut.u, weaBus.TDryBul)
          annotation (Line(points={{68,-80},{58,-80}}, color={0,0,127}));
        connect(TOut.y, floor.TOut) annotation (Line(points={{91,-80},{96,-80},{96,
                -56},{26,-56},{26,-30},{-1,-30},{-1,-22.94}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(
                preserveAspectRatio=false)),
          experiment(StopTime=86400));
      end FloorWithCon;

      model FloorNWithCon
        import MultizoneOfficeComplexAir.BaseClasses.BuildingControlEmulator;
        extends Modelica.Icons.Example;
        package MediumAir = Buildings.Media.Air "Medium model for air";
        package MediumCooWat = Buildings.Media.Water "Medium model for chilled water";
        package MediumHeaWat = Buildings.Media.Water "Medium model for heating water";

        parameter Integer n =  3  "Number of floors";

        parameter Modelica.Units.SI.Pressure PreDroCoiAir=50
          "Pressure drop in the air side";
        parameter Modelica.Units.SI.Pressure PreDroMixingBoxAir=50
          "Pressure drop in the air side";
        parameter Modelica.Units.SI.Pressure PreDroCooWat=79712
          "Pressure drop in the water side";

        parameter Modelica.Units.SI.Temperature TemEcoHig=273.15 + 15.58
          "the highest temeprature when the economizer is on";
        parameter Modelica.Units.SI.Temperature TemEcoLow=273.15 + 0
          "the lowest temeprature when the economizer is on";
        parameter Real MixingBoxDamMin = 0.3 "the minimum damper postion";

        parameter Modelica.Units.SI.Time waitTime(min=0) = 1800
          "Wait time before transition fires";
        parameter Modelica.Units.SI.VolumeFlowRate VolFloCur[n,:]={{(mAirFloRat1 +
            mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)/1.2*0.5,(
            mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)/1.2*
            0.7,(mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)
            /1.2,(mAirFloRat1 + mAirFloRat2 + mAirFloRat3 + mAirFloRat4 + mAirFloRat5)
            /1.2*2} for i in linspace(
            1,
            n,
            n)} "Volume flow rate curve";
        parameter Real HydEff[n,:] = {{0.93*0.65,0.93*0.7,0.93,0.93*0.6} for i in linspace(1,n,n)} "Hydraulic efficiency";
        parameter Real MotEff[n,:] = {{0.6045*0.65,0.6045*0.7,0.6045,0.6045*0.6} for i in linspace(1,n,n)} "Motor efficiency";

        parameter Modelica.Units.SI.Pressure SupPreCur[n,:]={{1400,1000,700,700*0.5}
            for i in linspace(
            1,
            n,
            n)} "Pressure curve";
        parameter Modelica.Units.SI.Pressure RetPreCur[n,:]={{600,400,200,100} for i in
                linspace(
            1,
            n,
            n)} "Pressure curve";

        parameter Modelica.Units.SI.Pressure PreAirDroMai1=140
          "Pressure drop 1 across the duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai2=140
          "Pressure drop 2 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai3=120
          "Pressure drop 3 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroMai4=152
          "Pressure drop 4 across the main duct";

        parameter Modelica.Units.SI.Pressure PreAirDroBra1=0
          "Pressure drop 1 across the duct branch 1";

        parameter Modelica.Units.SI.Pressure PreAirDroBra2=0
          "Pressure drop 1 across the duct branch 2";

        parameter Modelica.Units.SI.Pressure PreAirDroBra3=0
          "Pressure drop 1 across the duct branch 3";

        parameter Modelica.Units.SI.Pressure PreAirDroBra4=0
          "Pressure drop 1 across the duct branch 4";

        parameter Modelica.Units.SI.Pressure PreAirDroBra5=0
          "Pressure drop 1 across the duct branch 5";

        parameter Modelica.Units.SI.Pressure PreWatDroMai1=79712*0.2
          "Pressure drop 1 across the pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai2=79712*0.2
          "Pressure drop 2 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai3=79712*0.2
          "Pressure drop 3 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroMai4=79712*0.2
          "Pressure drop 4 across the main pipe";

        parameter Modelica.Units.SI.Pressure PreWatDroBra1=79712*0.6
          "Pressure drop 1 across the pipe branch 1";

        parameter Modelica.Units.SI.Pressure PreWatDroBra2=79712*0.4
          "Pressure drop 1 across the pipe branch 2";

        parameter Modelica.Units.SI.Pressure PreWatDroBra3=79712*0.2
          "Pressure drop 1 across the pipe branch 3";

        parameter Modelica.Units.SI.Pressure PreWatDroBra4=0
          "Pressure drop 1 across the pipe branch 4";

        parameter Modelica.Units.SI.Pressure PreWatDroBra5=0
          "Pressure drop 1 across the pipe branch 5";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat1=10.92*1.2
          "mass flow rate for vav 1";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat2=2.25*1.2
          "mass flow rate for vav 2";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat3=1.49*1.2
          "mass flow rate for vav 3";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat4=1.9*1.2
          "mass flow rate for vav 4";

        parameter Modelica.Units.SI.MassFlowRate mAirFloRat5=1.73*1.2
          "mass flow rate for vav 5";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat1=mAirFloRat1*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 1";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat2=mAirFloRat2*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 2";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat3=mAirFloRat3*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 3";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat4=mAirFloRat4*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 4";

        parameter Modelica.Units.SI.MassFlowRate mWatFloRat5=mAirFloRat5*0.3*(35 -
            12.88)/4.2/20 "mass flow rate for vav 5";

        parameter Modelica.Units.SI.Pressure PreDroAir1=200
          "Pressure drop in the air side of vav 1";
        parameter Modelica.Units.SI.Pressure PreDroWat1=79712
          "Pressure drop in the water side of vav 1";
        parameter Modelica.Units.SI.Efficiency eps1(max=1) = 0.8
          "Heat exchanger effectiveness of vav 1";

        parameter Modelica.Units.SI.Pressure PreDroAir2=124
          "Pressure drop in the air side of vav 2";
        parameter Modelica.Units.SI.Pressure PreDroWat2=79712
          "Pressure drop in the water side of vav 2";
        parameter Modelica.Units.SI.Efficiency eps2(max=1) = 0.8
          "Heat exchanger effectiveness of vav 2";

        parameter Modelica.Units.SI.Pressure PreDroAir3=124
          "Pressure drop in the air side of vav 3";
        parameter Modelica.Units.SI.Pressure PreDroWat3=79712
          "Pressure drop in the water side of vav 3";
        parameter Modelica.Units.SI.Efficiency eps3(max=1) = 0.8
          "Heat exchanger effectiveness of vav 1";

        parameter Modelica.Units.SI.Pressure PreDroAir4=124
          "Pressure drop in the air side of vav 4";
        parameter Modelica.Units.SI.Pressure PreDroWat4=79712
          "Pressure drop in the water side of vav 4";
        parameter Modelica.Units.SI.Efficiency eps4(max=1) = 0.8
          "Heat exchanger effectiveness of vav 1";

        parameter Modelica.Units.SI.Pressure PreDroAir5=124
          "Pressure drop in the air side of vav 1";
        parameter Modelica.Units.SI.Pressure PreDroWat5=79712
          "Pressure drop in the water side of vav 1";
        parameter Modelica.Units.SI.Efficiency eps5(max=1) = 0.8
          "Heat exchanger effectiveness of vav 1";

        BuildingControlEmulator.Systems.Floor floor[n](
          fivZonVAV(vol(V=100)),
          redeclare package MediumAir = MediumAir,
          redeclare package MediumHeaWat = MediumHeaWat,
          redeclare package MediumCooWat = MediumCooWat,
          PreDroCoiAir=PreDroCoiAir,
          PreDroMixingBoxAir=PreDroMixingBoxAir,
          PreDroCooWat=PreDroCooWat,
          TemEcoHig=TemEcoHig,
          TemEcoLow=TemEcoLow,
          MixingBoxDamMin=MixingBoxDamMin,
          waitTime=waitTime,
          HydEff=HydEff,
          MotEff=MotEff,
          VolFloCur=VolFloCur,
          SupPreCur=SupPreCur,
          RetPreCur=RetPreCur,
          PreAirDroMai1=PreAirDroMai1,
          PreAirDroMai2=PreAirDroMai2,
          PreAirDroMai3=PreAirDroMai3,
          PreAirDroMai4=PreAirDroMai4,
          PreAirDroBra1=PreAirDroBra1,
          PreAirDroBra2=PreAirDroBra2,
          PreAirDroBra3=PreAirDroBra3,
          PreAirDroBra4=PreAirDroBra4,
          PreAirDroBra5=PreAirDroBra5,
          PreWatDroMai1=PreWatDroMai1,
          PreWatDroMai2=PreWatDroMai2,
          PreWatDroMai3=PreWatDroMai3,
          PreWatDroMai4=PreWatDroMai4,
          PreWatDroBra1=PreWatDroBra1,
          PreWatDroBra2=PreWatDroBra2,
          PreWatDroBra3=PreWatDroBra3,
          PreWatDroBra4=PreWatDroBra4,
          PreWatDroBra5=PreWatDroBra5,
          mAirFloRat1=mAirFloRat1,
          mAirFloRat2=mAirFloRat2,
          mAirFloRat3=mAirFloRat3,
          mAirFloRat4=mAirFloRat4,
          mAirFloRat5=mAirFloRat5,
          mWatFloRat1=mWatFloRat1,
          mWatFloRat2=mWatFloRat2,
          mWatFloRat3=mWatFloRat3,
          mWatFloRat4=mWatFloRat4,
          mWatFloRat5=mWatFloRat5,
          PreDroAir1=PreDroAir1,
          PreDroWat1=PreDroWat1,
          eps1=eps1,
          PreDroAir2=PreDroAir2,
          PreDroWat2=PreDroWat2,
          eps2=eps2,
          PreDroAir3=PreDroAir3,
          PreDroWat3=PreDroWat3,
          eps3=eps3,
          PreDroAir4=PreDroAir4,
          PreDroWat4=PreDroWat4,
          eps4=eps4,
          PreDroAir5=PreDroAir5,
          PreDroWat5=PreDroWat5,
          eps5=eps5,
          duaFanAirHanUnit(Fan_k=0.01))
          annotation (Placement(transformation(extent={{-26,-20},{24,22}})));
        Buildings.Fluid.Sources.Boundary_pT sou[n](
          nPorts=3,
          redeclare package Medium = MediumAir,
          p(displayUnit="Pa") = 100000)
          annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
        Buildings.Fluid.Sources.Boundary_pT souCooWat[n](
          redeclare package Medium = MediumCooWat,
          nPorts=1,
          p(displayUnit="Pa") = 100000 + PreDroCooWat,
          T=279.15) annotation (Placement(transformation(extent={{-22,60},{-42,80}})));
        Buildings.Fluid.Sources.Boundary_pT sinCooWat[n](
          nPorts=1,
          redeclare package Medium = MediumCooWat,
          p(displayUnit="Pa") = 100000,
          T=279.15) annotation (Placement(transformation(extent={{-80,62},{-60,82}})));
        Buildings.Fluid.Sources.Boundary_pT souHeaWat[n](
          nPorts=1,
          p(displayUnit="Pa") = 100000 + PreWatDroMai1 + PreWatDroMai2 +
            PreWatDroMai3 + PreWatDroMai4 + PreWatDroBra5 + PreDroWat5,
          redeclare package Medium = MediumHeaWat,
          T=353.15) annotation (Placement(transformation(extent={{0,60},{20,80}})));

        Buildings.Fluid.Sources.Boundary_pT sinHeaWat[n](
          nPorts=1,
          p(displayUnit="Pa") = 100000,
          redeclare package Medium = MediumHeaWat)
          annotation (Placement(transformation(extent={{60,60},{40,80}})));
        Modelica.Blocks.Sources.Ramp loa[5*n](
          duration=86400,
          height={mAirFloRat1*1000*(22 - 12.88),mAirFloRat2*1000*(22 - 12.88),
              mAirFloRat3*1000*(22 - 12.88),mAirFloRat4*1000*(22 - 12.88),mAirFloRat5*
              1000*(22 - 12.88),mAirFloRat1*1000*(22 - 12.88),mAirFloRat2*1000*(22 - 12.88),
              mAirFloRat3*1000*(22 - 12.88),mAirFloRat4*1000*(22 - 12.88),mAirFloRat5*
              1000*(22 - 12.88),mAirFloRat1*1000*(22 - 12.88),mAirFloRat2*1000*(22 - 12.88),
              mAirFloRat3*1000*(22 - 12.88),mAirFloRat4*1000*(22 - 12.88),mAirFloRat5*
              1000*(22 - 12.88)},
          offset={mAirFloRat1*1000*0.5*(20 - 25),mAirFloRat2*1000*0.5*(20 - 25),
              mAirFloRat3*1000*0.5*(20 - 25),mAirFloRat4*1000*0.5*(20 - 25),
              mAirFloRat5*1000*0.5*(20 - 25),mAirFloRat1*1000*0.5*(20 - 25),mAirFloRat2*1000*0.5*(20 - 25),
              mAirFloRat3*1000*0.5*(20 - 25),mAirFloRat4*1000*0.5*(20 - 25),
              mAirFloRat5*1000*0.5*(20 - 25),mAirFloRat1*1000*0.5*(20 - 25),mAirFloRat2*1000*0.5*(20 - 25),
              mAirFloRat3*1000*0.5*(20 - 25),mAirFloRat4*1000*0.5*(20 - 25),
              mAirFloRat5*1000*0.5*(20 - 25)})
          annotation (Placement(transformation(extent={{-4,-60},{16,-40}})));
        Modelica.Blocks.Sources.Constant const1[n](k=273.15 + 12.88)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.Constant const2[n](k=400)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression[n](y=true)
          annotation (Placement(transformation(extent={{-100,-106},{-80,-86}})));
        BuildingControlEmulator.Devices.AirSide.Terminal.Controls.ZonCon
                                                                 zonCon[15](
          MinFlowRateSetPoi=0.3,
          HeatingFlowRateSetPoi=0.5,
          heaCon(Ti=60, k=0.001),
          cooCon(k=0.01))
          annotation (Placement(transformation(extent={{60,-10},{80,10}})));
        Modelica.Blocks.Sources.Constant TCooSetPoi[15](k=273.15 + 24)
          annotation (Placement(transformation(extent={{80,20},{60,40}})));
        Modelica.Blocks.Sources.Constant THeaSetPoi[15](k=273.15 + 20)
          annotation (Placement(transformation(extent={{80,-40},{60,-20}})));
        Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam=
              Modelica.Utilities.Files.loadResource(
              "modelica://Buildings/Resources/weatherdata/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos"),
            computeWetBulbTemperature=false) "Weather data reader"
          annotation (Placement(transformation(extent={{-2,-90},{18,-70}})));
        Buildings.BoundaryConditions.WeatherData.Bus
                                           weaBus
          "Weather data bus"
          annotation (Placement(transformation(extent={{18,-90},{38,-70}})));
        Modelica.Blocks.Routing.RealPassThrough TOut(y(
            final quantity="ThermodynamicTemperature",
            final unit="K",
            displayUnit="degC",
            min=0))
          annotation (Placement(transformation(extent={{40,-90},{60,-70}})));
        Modelica.Blocks.Routing.Replicator rep(nout=n)
          annotation (Placement(transformation(extent={{72,-90},{92,-70}})));
      equation
        for i in 1:n loop
         connect(floor[i].port_Exh_Air, sou[i].ports[1]);
         connect(floor[i].port_Fre_Air, sou[i].ports[2]);
         connect(sinCooWat[i].ports[1], floor[i].port_b_CooWat);
         connect(floor[i].port_a_CooWat, souCooWat[i].ports[1]);
         connect(floor[i].port_a_HeaWat, souHeaWat[i].ports[1]);
         connect(floor[i].port_b_HeaWat, sinHeaWat[i].ports[1]);
         connect(const2[i].y, floor[i].PreSetPoi);
          connect(const1[i].y, floor[i].DisTemPSetPoi);
         connect(booleanExpression[i].y, floor[i].OnFan);
         connect(floor[i].OnZon, booleanExpression[i].y);
         for j in 1:5 loop
          connect(loa[(i-1)*5+j].y, floor[i].Q_flow[j]);
            connect(floor[i].TZon[j], zonCon[(i - 1)*5 + j].T);
          connect(zonCon[(i-1)*5+j].yAirFlowSetPoi, floor[i].AirFlowRatSetPoi[j]);
          connect(zonCon[(i-1)*5+j].yValPos, floor[i].yVal[j]);
          connect(TCooSetPoi[(i-1)*5+j].y, floor[i].ZonCooTempSetPoi[j]);
          connect(THeaSetPoi[(i-1)*5+j].y, floor[i].ZonHeaTempSetPoi[j]);
         end for;
        end for;
        connect(THeaSetPoi.y, zonCon.THeaSetPoi);
        connect(TCooSetPoi.y, zonCon.TCooSetPoi);

        connect(weaDat.weaBus, weaBus) annotation (Line(
            points={{18,-80},{28,-80}},
            color={255,204,51},
            thickness=0.5));
        connect(TOut.u, weaBus.TDryBul)
          annotation (Line(points={{38,-80},{28,-80}}, color={0,0,127}));
        connect(TOut.y, rep.u)
          annotation (Line(points={{61,-80},{70,-80}}, color={0,0,127}));
        connect(rep.y, floor.TOut) annotation (Line(points={{93,-80},{96,-80},{96,-52},
                {30,-52},{30,-30},{-1,-30},{-1,-22.94}}, color={0,0,127}));
         annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(coordinateSystem(
                preserveAspectRatio=false)),
          experiment(StopTime=86400));
      end FloorNWithCon;
    end Examples;
  end Systems;
annotation ();
end BuildingControlEmulator;
